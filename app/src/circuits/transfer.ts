// Auto-generated file
export const transferWitness = new Uint8Array([
31,139,8,0,0,0,0,0,2,255,173,156,115,176,228,65,146,199,223,91,243,176,103,219,42,101,225,184,103,219,190,226,217,182,109,219,119,107,219,182,109,219,182,63,53,177,17,251,235,127,118,226,197,102,79,196,155,233,232,158,236,204,172,196,55,191,89,253,206,207,222,245,184,206,249,187,254,125,221,119,254,109,194,72,222,75,233,197,198,56,67,169,117,213,85,106,200,226,102,173,97,244,217,92,119,49,167,108,75,108,214,204,98,66,54,38,172,37,189,59,211,207,143,178,222,131,199,226,113,5,37,89,214,249,112,197,163,44,111,250,90,189,102,211,107,240,33,76,9,51,248,184,186,84,227,235,204,51,231,208,242,242,115,244,150,178,73,198,73,41,211,22,177,51,215,26,221,149,14,178,108,55,221,245,129,15,98,27,217,230,80,242,10,115,73,206,62,166,18,70,168,45,218,96,211,152,113,70,59,145,146,23,79,156,228,146,167,152,121,229,163,44,59,170,52,84,112,35,231,58,90,145,50,100,225,219,60,141,15,34,83,202,244,177,197,188,102,109,35,218,100,10,150,140,52,66,242,115,22,119,149,163,44,63,173,180,30,211,104,205,217,104,227,106,165,183,144,90,11,33,186,229,75,247,113,216,228,210,88,97,217,97,100,134,110,115,157,101,229,21,189,205,87,61,202,194,192,110,103,76,205,152,81,114,116,4,67,42,35,149,149,90,88,46,197,218,166,115,179,143,234,164,102,223,101,122,107,249,48,107,130,140,88,229,106,7,89,174,154,96,108,237,101,206,110,11,255,93,66,114,43,228,84,60,6,47,103,154,47,33,78,79,176,181,60,252,236,173,117,126,198,210,122,155,101,202,213,79,206,177,75,194,0,63,82,14,82,35,94,79,50,45,127,90,142,132,101,178,117,186,80,115,139,194,129,15,83,67,235,201,212,38,188,55,187,25,174,113,148,229,36,205,134,81,198,241,86,34,126,216,220,57,177,208,123,40,179,197,57,67,117,46,154,149,114,143,173,230,60,155,153,184,47,151,17,36,214,116,205,163,191,146,43,117,174,226,157,33,102,218,26,216,84,7,202,58,131,190,49,198,53,240,152,223,31,96,187,4,153,38,219,229,48,15,29,188,15,238,90,138,231,120,109,197,115,124,175,227,57,102,159,234,140,205,207,230,115,107,62,18,205,184,116,185,209,92,44,49,37,107,70,66,165,16,171,173,37,250,54,196,215,33,101,97,67,90,51,191,247,81,47,201,126,133,22,183,159,178,247,101,152,232,221,26,201,241,233,98,243,228,99,150,11,132,71,168,211,44,94,148,42,41,26,177,50,56,180,210,223,71,209,95,239,171,232,175,235,156,228,182,171,118,45,47,38,16,172,132,143,175,166,229,70,160,165,222,72,224,222,106,42,210,170,172,101,139,177,184,201,68,201,179,110,47,76,51,230,251,29,99,149,26,176,154,12,252,99,93,12,197,19,101,61,241,174,85,250,28,126,89,17,20,78,163,142,48,75,229,205,41,39,132,165,153,59,14,142,233,253,143,122,181,57,40,242,125,196,82,93,183,56,37,197,98,131,35,233,56,136,209,44,181,207,79,194,220,184,220,76,11,110,153,212,16,74,181,27,61,135,250,1,39,231,88,91,42,150,70,32,99,100,194,32,199,220,59,62,94,62,163,112,39,123,122,73,213,205,236,72,246,157,223,209,36,106,87,64,93,124,63,62,240,104,163,93,84,213,224,172,143,189,246,140,43,200,181,38,134,170,44,117,84,19,67,72,166,155,96,109,198,171,84,128,80,165,211,154,186,89,141,52,142,31,116,146,219,36,48,7,159,43,170,155,28,169,48,56,45,83,165,167,111,145,50,79,17,181,150,226,18,93,178,13,219,100,70,26,90,142,28,99,160,114,124,176,82,31,218,173,232,67,148,100,237,222,244,161,138,189,246,195,244,108,52,31,174,40,235,35,46,32,139,154,228,103,222,189,164,21,122,163,13,212,130,181,195,23,251,182,239,63,242,2,178,252,142,48,10,252,180,222,86,227,74,203,100,174,208,123,109,166,92,201,248,168,99,45,4,59,204,13,14,214,24,11,52,80,102,161,109,128,158,164,137,115,116,1,74,24,152,42,26,100,17,102,104,34,164,252,138,36,136,21,63,228,163,143,122,37,114,121,208,90,242,162,20,208,184,16,154,29,0,128,220,89,137,98,229,93,207,164,66,45,221,34,143,42,209,87,157,148,156,56,220,144,54,63,70,209,247,31,123,1,89,151,195,133,31,119,17,189,46,131,65,63,94,49,31,63,225,2,178,132,243,114,178,207,175,242,36,27,10,209,72,84,166,101,42,21,104,133,79,188,72,172,82,253,108,179,133,112,106,158,10,111,134,8,157,136,170,39,110,119,185,79,82,196,152,159,172,136,49,63,69,49,190,62,85,81,214,167,41,202,250,244,131,172,203,213,129,119,87,115,246,227,51,20,245,250,76,69,89,159,117,18,95,49,68,51,122,10,102,186,74,33,89,173,110,236,197,225,139,189,20,122,224,138,68,225,169,212,166,156,29,224,7,16,92,136,44,107,124,171,203,40,234,101,79,241,125,163,126,130,164,152,205,0,208,196,172,165,246,129,161,61,96,139,254,15,6,12,28,11,64,212,111,8,80,86,48,195,186,144,172,15,221,248,228,20,245,242,199,122,15,152,1,22,213,104,24,22,75,4,81,205,141,20,154,5,121,136,167,176,131,122,114,240,20,136,4,2,90,158,164,94,134,124,51,27,239,116,95,131,162,94,114,212,107,0,43,115,9,190,1,210,60,81,216,44,67,145,77,158,99,170,209,111,108,9,210,21,116,46,54,197,75,147,76,73,104,45,198,38,192,177,68,69,189,146,162,172,124,140,213,89,1,129,204,111,76,28,163,98,89,236,37,59,12,32,42,36,245,89,60,40,223,5,233,192,230,22,93,116,195,181,218,253,0,221,45,15,82,44,71,127,45,239,106,225,240,104,55,151,0,114,224,12,153,252,39,173,166,134,233,24,20,70,198,107,4,218,240,124,152,105,210,25,83,157,207,206,49,197,206,207,86,180,241,115,20,101,125,174,162,172,207,83,172,133,159,175,168,215,23,40,202,186,238,81,86,147,9,11,17,109,195,152,149,233,121,151,230,168,68,45,138,145,98,4,223,16,5,70,192,229,76,87,180,25,172,103,10,79,214,96,78,129,191,248,194,99,124,25,178,145,230,25,92,200,189,206,61,36,227,55,144,140,164,145,139,101,86,138,35,175,50,233,225,85,24,252,189,55,54,164,21,123,128,118,234,34,95,164,104,227,23,159,204,67,59,138,129,82,165,85,203,96,222,168,170,228,137,201,41,173,202,192,198,176,148,32,57,86,29,38,80,249,93,236,62,25,154,127,97,226,99,144,179,95,114,98,99,101,198,102,26,79,112,43,120,109,57,222,193,80,107,215,102,73,44,179,164,169,149,249,190,204,94,22,112,132,158,2,90,130,59,129,209,97,90,108,95,170,104,227,151,41,242,76,95,126,50,139,18,239,80,25,197,51,239,151,97,67,48,226,205,26,37,65,125,64,131,180,102,163,140,29,8,27,158,131,245,115,150,72,251,108,137,121,160,45,255,21,138,179,194,87,42,206,10,95,165,232,251,175,86,148,245,53,71,127,193,6,1,74,4,103,192,211,50,93,228,206,192,79,35,13,176,116,221,56,2,151,33,1,222,4,28,11,119,139,59,2,8,56,140,25,34,81,45,229,107,79,244,130,189,112,169,73,132,22,36,149,237,128,169,225,4,107,146,213,51,212,192,220,20,96,27,59,19,115,245,157,19,132,215,137,126,248,6,77,80,195,215,41,218,248,245,138,178,190,65,113,30,250,70,69,89,223,164,24,247,223,172,24,247,223,162,104,227,183,42,218,248,109,138,54,126,187,34,207,244,29,138,178,190,83,49,238,191,75,81,214,119,43,241,76,236,154,228,123,20,121,166,239,61,98,223,104,193,176,149,143,50,80,168,61,214,0,170,160,67,167,37,54,142,94,104,205,110,217,218,250,12,208,194,14,206,90,152,3,208,141,125,132,135,10,255,190,19,236,11,103,205,68,229,197,178,58,41,66,147,134,79,165,107,49,253,65,139,194,143,251,68,187,163,232,246,34,221,192,59,128,122,22,228,54,246,182,108,202,247,43,250,254,7,20,101,85,69,89,77,17,251,118,69,189,134,162,172,121,1,89,151,219,139,174,139,232,117,153,29,236,15,42,214,232,31,186,72,62,146,95,100,0,176,96,142,5,67,22,44,96,46,165,138,157,9,140,49,127,248,34,117,130,245,84,152,32,8,19,147,144,148,195,27,103,92,136,173,77,104,184,20,126,68,113,111,245,163,138,123,171,31,83,140,175,31,87,148,245,19,138,178,126,82,49,183,127,74,81,175,159,86,148,245,51,138,188,201,207,42,242,38,63,167,104,227,207,43,202,250,5,69,89,191,168,24,95,191,164,168,215,47,43,202,250,149,99,76,176,112,72,147,114,21,41,108,236,181,37,138,173,153,237,125,195,208,201,178,132,125,242,132,168,197,220,65,187,128,161,220,203,12,143,213,240,2,209,133,95,61,217,35,83,219,66,140,219,91,133,173,115,13,245,18,165,89,87,30,155,122,89,197,236,96,154,105,177,128,38,166,123,195,177,123,5,60,189,204,46,249,215,20,109,252,245,147,115,164,158,67,248,246,204,145,161,223,156,66,134,200,130,61,207,214,214,109,205,128,36,97,239,98,247,86,168,90,195,162,154,129,117,237,237,183,95,253,55,142,254,146,197,233,251,148,195,154,187,164,207,18,25,71,217,71,103,22,219,36,14,125,195,77,178,213,39,156,209,28,171,52,58,6,158,160,240,167,2,244,251,77,69,27,127,75,17,99,254,246,153,222,157,135,223,57,211,187,243,240,187,138,254,250,189,163,141,180,115,71,1,21,129,83,2,40,179,148,131,12,196,8,226,149,173,232,144,152,225,14,10,120,169,37,22,237,49,218,178,160,210,34,135,90,97,155,204,239,159,240,247,177,179,187,160,171,155,26,39,27,15,24,37,98,59,164,10,35,24,40,163,64,2,166,201,196,214,208,198,156,225,177,34,14,102,32,132,95,155,164,214,31,40,218,248,135,138,178,254,72,17,203,253,177,162,172,63,81,140,213,63,85,140,213,63,83,180,241,207,21,109,252,11,69,27,255,82,49,190,254,74,209,95,127,173,168,215,223,40,202,250,219,147,222,97,1,235,139,153,41,198,234,41,41,222,195,186,247,17,55,247,211,165,55,3,209,61,224,134,216,224,70,211,10,51,66,173,108,32,40,220,13,10,62,252,157,162,94,127,127,218,59,224,163,40,124,118,248,50,230,188,116,133,139,165,0,96,147,10,233,179,53,217,6,94,118,91,227,141,12,45,141,95,234,136,128,204,1,55,251,15,138,122,253,227,153,222,221,225,127,82,212,235,159,21,101,253,139,18,103,197,60,223,255,85,145,179,250,183,99,172,118,47,37,130,92,88,0,5,176,12,59,153,105,58,24,6,36,87,65,14,109,216,125,235,147,200,241,190,176,144,234,222,118,32,198,100,120,46,12,204,238,223,143,178,28,205,145,72,15,217,46,211,172,205,140,193,141,176,118,172,253,13,202,36,223,217,250,116,89,66,54,136,39,33,92,94,21,13,24,191,41,70,235,63,20,125,255,159,138,178,254,75,81,214,127,43,206,29,255,163,168,215,255,42,202,250,63,69,89,255,127,210,31,217,198,122,22,151,182,7,138,22,222,202,27,249,66,163,192,220,140,74,101,221,23,76,198,74,190,10,235,92,0,157,79,251,11,17,21,111,90,31,226,245,142,122,237,27,209,212,183,14,63,198,90,177,250,180,39,157,58,54,222,7,90,59,80,182,5,255,209,112,119,143,116,48,56,96,57,169,136,177,139,210,185,174,175,104,227,13,20,101,221,80,81,214,141,20,99,245,198,138,122,221,68,81,214,77,143,241,5,73,202,254,145,118,140,53,49,176,54,118,216,194,206,136,205,121,113,252,224,69,88,23,102,174,60,102,155,70,28,219,164,192,156,181,39,69,162,232,102,71,189,186,152,125,53,154,168,201,112,166,204,222,192,175,186,191,79,96,129,101,178,191,112,224,246,60,233,233,248,172,151,40,166,123,110,132,200,103,206,52,165,202,205,21,109,188,197,41,207,84,43,77,51,85,3,45,204,102,149,10,13,161,202,238,128,93,214,240,140,246,133,97,197,181,212,205,190,251,200,182,181,199,205,182,194,37,11,73,97,110,121,148,101,32,134,3,36,102,153,185,176,92,19,33,57,106,45,163,145,125,131,72,153,198,50,73,133,26,199,254,82,70,202,115,223,165,128,163,134,214,42,181,217,91,41,218,120,107,197,158,118,155,19,222,55,133,149,242,96,103,231,214,48,155,17,200,201,46,204,218,95,6,233,166,67,216,18,2,80,226,38,179,119,129,42,153,3,130,152,249,208,36,78,223,222,246,100,87,206,2,112,241,98,130,202,155,99,194,40,44,208,252,190,9,6,246,38,103,80,26,159,133,125,105,205,181,185,4,151,165,230,160,135,55,213,215,243,237,20,253,117,251,19,27,247,197,194,108,162,99,255,30,130,72,106,117,7,168,109,172,48,33,109,122,163,103,115,120,142,200,9,123,14,241,88,104,216,8,68,235,76,172,249,14,39,49,49,88,210,195,126,15,75,45,96,213,202,73,80,163,89,182,82,4,26,116,61,172,119,159,11,210,104,64,49,1,148,161,42,211,0,33,172,220,25,121,252,29,21,109,188,147,162,172,59,43,206,48,119,81,148,117,87,197,88,189,155,98,172,222,93,209,198,123,40,218,120,79,69,27,239,165,24,95,247,86,244,215,125,20,245,186,175,162,172,251,157,233,221,105,190,191,162,94,15,56,211,187,211,252,64,69,189,30,116,148,37,13,171,179,223,183,18,45,8,164,80,170,217,15,241,233,117,12,160,108,219,43,223,10,118,93,172,135,88,35,214,125,101,177,175,198,160,69,64,231,244,96,69,189,30,114,148,213,24,242,98,220,12,6,141,223,83,218,233,25,115,64,144,174,66,102,213,220,70,11,116,225,196,226,33,111,36,205,114,0,148,1,183,90,55,73,82,30,170,168,215,195,20,101,61,92,81,214,35,20,115,251,145,138,122,61,74,81,214,163,21,109,124,140,222,222,189,60,86,209,198,199,41,222,7,120,188,226,125,128,39,40,218,248,196,51,189,239,158,62,233,76,239,187,167,79,86,180,241,41,138,177,250,84,69,189,158,166,168,215,211,21,207,241,25,138,231,248,76,69,27,159,165,104,227,179,21,109,124,142,98,76,60,87,209,95,207,83,212,235,249,138,178,94,112,114,142,213,22,182,92,9,168,99,109,74,56,220,3,191,77,75,139,186,10,180,217,85,116,88,104,59,103,210,2,111,148,212,86,101,20,5,220,7,80,217,11,143,248,222,7,160,34,180,195,26,62,48,34,72,103,133,191,246,21,114,1,174,172,50,129,80,165,68,207,210,109,10,148,223,62,198,201,188,202,0,224,3,91,153,23,41,218,248,226,211,157,180,1,243,214,222,22,145,6,150,179,169,103,118,124,140,214,108,147,141,219,156,145,45,174,8,140,26,150,22,39,240,155,130,122,168,25,196,245,151,156,240,76,53,143,224,114,69,107,2,49,48,166,243,214,117,105,10,159,14,224,103,8,117,252,100,214,244,76,67,193,141,100,33,122,196,192,143,68,218,215,75,21,109,124,153,226,156,246,114,197,57,237,21,138,54,190,242,76,239,119,32,188,234,76,239,119,32,188,90,209,198,215,40,158,227,107,21,245,122,221,81,214,104,11,134,146,117,53,100,99,52,61,49,136,204,18,86,111,109,121,170,49,212,126,36,27,202,48,151,22,172,208,147,16,91,115,38,70,186,201,170,160,191,254,24,95,205,174,108,60,61,163,249,26,33,179,193,109,84,26,88,65,198,58,152,174,144,22,63,134,99,69,197,65,11,60,21,189,3,86,212,36,128,153,25,242,6,69,27,223,168,40,235,77,138,189,227,205,138,178,222,162,152,67,111,85,204,161,183,41,218,248,118,69,27,207,206,245,108,60,63,215,139,175,43,232,201,178,87,84,212,235,74,138,178,174,172,104,227,85,206,245,238,250,92,245,92,239,174,207,213,20,109,188,250,185,30,38,191,198,185,30,38,191,166,162,141,215,58,215,203,237,107,43,230,182,83,140,123,127,174,135,1,130,162,94,114,174,135,11,223,1,136,160,231,105,108,81,0,0
]);

export const transferVK = new Uint8Array([
0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,10,161,71,7,175,10,225,128,151,66,246,167,53,200,43,134,178,57,1,175,97,211,24,119,41,230,245,233,55,213,17,57,0,241,88,174,241,220,239,25,219,218,179,165,85,85,108,44,28,237,114,170,100,213,165,65,159,105,19,234,247,250,85,16,25,134,21,166,183,172,204,172,214,210,215,91,143,51,39,202,46,209,133,98,178,182,70,132,71,159,3,177,218,102,247,184,35,126,62,14,112,221,181,116,216,163,135,230,26,226,219,58,161,189,13,130,118,6,181,35,22,11,223,139,158,130,168,80,38,209,130,6,209,242,106,84,240,172,223,157,242,170,179,91,161,169,36,39,26,137,245,50,108,238,59,147,167,120,254,47,29,63,177,125,187,238,243,16,103,121,62,207,174,84,171,27,225,86,0,214,165,241,47,254,114,143,136,117,125,125,150,185,3,140,88,115,17,110,70,130,74,162,31,212,75,249,143,230,40,177,52,40,159,205,226,83,57,188,134,25,51,180,23,96,44,146,191,131,198,2,126,131,55,194,47,31,241,130,11,18,122,58,50,165,174,201,116,161,246,85,6,59,127,114,85,203,16,246,70,138,217,250,97,166,84,139,229,247,5,21,250,87,111,160,165,234,74,68,92,198,97,158,38,83,147,190,249,181,24,170,145,201,184,53,91,103,3,139,216,129,68,188,112,31,37,226,99,103,222,20,212,76,179,244,72,70,85,111,63,153,26,219,66,4,227,205,231,151,200,253,6,152,72,222,167,254,231,247,130,162,112,72,184,7,2,78,8,87,98,25,215,183,16,200,205,207,10,210,188,79,175,210,106,119,247,246,150,181,212,46,69,165,0,4,198,209,35,205,48,221,59,156,16,55,3,129,71,247,152,90,178,168,209,121,167,167,100,238,98,42,252,92,172,93,171,235,143,116,162,248,154,211,63,6,143,228,36,9,90,252,119,136,123,32,248,41,60,74,38,2,197,92,127,104,179,71,33,219,218,169,216,242,207,201,244,50,218,149,23,83,205,9,116,248,130,85,178,247,131,192,91,43,197,98,240,29,3,253,33,255,237,84,139,100,252,105,66,103,170,120,17,92,142,46,69,198,130,138,194,135,244,23,242,141,225,77,59,77,110,93,118,150,209,35,108,178,110,7,253,202,60,28,8,2,34,231,157,105,161,68,83,192,213,69,229,191,181,247,73,14,171,21,70,125,90,77,145,30,196,220,155,49,212,14,34,27,223,28,1,220,249,238,115,234,238,179,161,206,110,99,71,218,90,36,220,58,197,54,175,175,49,148,114,106,180,232,41,246,80,137,188,245,127,250,152,15,169,69,100,206,230,146,47,8,201,245,194,69,196,66,191,70,110,3,169,35,157,6,15,65,13,196,100,44,190,144,69,64,141,169,168,174,242,189,132,11,91,150,85,74,33,167,254,39,214,253,122,208,247,144,25,248,211,16,41,177,95,227,47,67,17,150,234,155,216,164,211,172,95,165,227,219,60,68,238,85,105,119,121,84,107,246,47,100,220,103,61,88,119,26,70,37,32,180,245,214,198,153,238,207,235,102,66,201,152,228,185,187,82,42,182,40,105,50,35,16,219,12,145,160,203,52,110,6,63,130,99,74,13,168,202,249,202,217,246,182,75,150,241,127,188,146,216,220,197,50,25,112,180,224,65,128,116,126,141,76,15,163,42,22,36,59,117,101,7,59,176,181,49,159,58,52,132,104,69,151,61,215,27,76,125,157,30,164,24,94,152,51,254,48,1,152,240,248,243,231,124,69,126,151,113,95,213,255,131,199,8,105,73,69,12,242,251,236,226,46,62,125,82,173,122,69,124,34,54,185,27,0,157,0,244,118,3,189,134,89,146,58,59,169,224,28,19,213,181,254,13,161,195,14,185,218,215,35,134,251,14,28,50,130,178,226,169,191,166,10,224,214,47,1,143,163,16,79,26,43,47,2,199,84,171,106,215,218,212,180,92,26,58,141,163,57,93,63,242,52,53,137,188,137,134,237,158,179,230,226,27,183,214,226,49,144,30,200,97,78,234,15,136,168,43,6,211,225,46,34,37,123,176,115,181,87,121,176,181,148,159,164,31,131,19,114,62,232,0,103,79,123,197,28,183,79,216,202,149,68,247,60,222,158,163,83,170,121,92,37,30,182,95,116,15,61,3,99,67,89,98,68,43,144,28,183,14,156,145,84,86,63,165,120,198,84,21,26,81,176,255,122,254,56,17,166,37,148,15,104,115,249,203,182,242,245,152,227,105,134,87,142,13,216,101,10,50,253,48,27,27,102,45,27,60,43,125,112,30,65,90,46,202,125,251,201,0,185,86,183,84,3,203,124,218,122,168,103,73,50,197,229,157,3,181,1,10,75,123,213,14,45,180,55,67,200,185,177,223,101,211,12,66,106,81,85,178,233,35,112,90,108,174,234,3,221,45,111,68,6,198,21,12,21,185,96,53,75,231,234,188,74,176,109,218,103,232,232,6,25,229,101,150,77,81,191,124,64,110,239,121,136,225,152,10,178,158,229,24,80,61,193,127,51,117,21,181,252,149,195,121,93,242,15,144,245,216,167,154,185,180,38,182,234,53,226,6,227,53,150,120,157,108,147,164,89,131,70,40,171,15,184,91,210,75,123,255,101,210,8,239,53,39,159,54,45,119,242,10,218,154,36,111,13,121,8,36,225,226,23,194,25,80,227,45,8,138,17,172,15,177,99,66,172,198,90,157,36,73,79,1,123,52,139,183,157,152,120,140,67,176,63,34,148,194,169,20,244,190,95,185,202,44,164,29,25,113,53,142,85,12,21,42,101,243,203,211,105,252,37,208,214,241,200,25,224,109,204,235,217,195,183,189,160,24,239,155,239,176,114,48,68,4,28,11,209,209,165,42,193,178,172,181,68,44,204,93,140,192,25,67,174,2,38,142,39,155,1,49,244,34,59,139,213,29,9,37,148,30,112,194,1,12,115,177,47,121,189,42,204,211,95,21,230,6,114,88,33,178,239,99,209,235,9,79,210,208,28,12,177,82,137,54,28,10,14,27,120,242,94,251,126,111,60,238,5,108,216,101,63,17,254,145,190,198,127,154,27,165,1,41,102,77,249,231,240,123,74,236,47,57,111,108,222,18,68,63,84,241,42,135,194,207,81,130,243,98,15,193,148,76,109,7,11,67,61,70,54,126,25,27,155,244,14,239,40,182,115,135,81,3,171,249,23,167,96,25,207,123,186,77,167,118,33,38,236,205,113,0,71,159,200,134,136,225,41,88,145,151,160,175,76,123,158,248,111,226,72,6,146,245,246,220,82,83,74,29,98,220,84,22,128,101,14,89,74,245,125,9,3,32,159,177,149,45,217,174,171,86,225,130,214,139,102,40,82,227,106,21,1,49,242,133,241,100,141,176,210,216,81,40,37,91,141,255,3,17,59,200,75,216,161,88,39,2,195,165,28,200,253,0,130,224,181,46,141,249,70,18,177,75,194,175,185,247,111,87,90,96,211,201,213,15,194,119,152,141,148,153,122,93,219,38,166,150,247,90,223,21,213,147,77,158,218,216,28,155,254,7,63,241,47,43,173,120,177,10,228,161,98,149,22,160,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,33,133,39,207,80,22,108,92,177,149,164,12,137,212,187,153,115,230,29,176,91,71,106,197,176,76,199,150,61,175,236,233,30,184,133,233,142,251,145,236,39,40,67,128,226,35,208,12,114,58,117,45,171,253,172,6,11,104,130,71,48,25,157,150
]);

export const transferRawProof = new Uint8Array([

]);

export const transferProof = {
	publicInputs: ["0x1c0c2cd4806bd818498f4ef58836794d4ab61417de6e61ee198f7de25898e50e","0x11da5b03a2d88adb959d5f04f8e03455e59e36b68feabd6170930cd7d473ee92","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x2a0401ac9eec19b4f5472f48793db9f20b3946e3eaab8d3ecbbc3ec69bcbe9e5","0x03c577df3d7845a6f5875e1e1eb8604871ae24a8b650cfd0a4bc70ab55a682e4","0x0257eb9d702cfdf9ad18ce614cc49eb6ee4a2260f78c6ba88eb0e72789d456a7","0x1729aef9320951bfdb39ad3c520577666fdabe318ce1c545e081f2be92573342","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x2837ae6b3eb38bb368e52e4f2db26967710d7f4f46a1a963bd53ad59f1617fe8","0x1583f4b6db398339d0632fd7211c518ee6bf24db94ae0f0635a5760515d57e9c","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x112a1ff350478488e3a0b8bf9a7cbd47cba795ba5ff1901f160658ead721e0de","0x06b6fb5d211126493951c7e0df9ced3f15500d7dad4e9a6b67876587e8c39867","0x1bed9aacd69a2c1f4f769142c3e39ddb12593e789028b0b42f07b9a66bddc84a","0x15ab7915cc5dd8269868ccd05f386fbc60fc97a2e823dbab8d6074734500631d","0x01fcd442136cac858e278b50f3e5ada064470c04118ff33d74a5cb2cc0fbb9d6","0x02eb69c38a7b90863944938ef5e3b63ed0cd119e56271ba665e64ff8645d40cf"],
	proof: new Uint8Array([
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,32,141,25,46,227,200,37,47,47,159,128,57,190,14,130,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,174,220,175,194,113,156,228,185,149,108,136,168,159,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,4,141,21,47,156,32,206,209,28,3,98,48,91,196,138,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,165,110,32,137,204,142,226,201,21,148,7,152,190,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,223,120,124,186,206,241,83,65,68,111,153,182,245,37,115,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,179,102,165,25,211,81,204,246,52,49,228,226,100,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,131,238,198,48,231,255,52,200,81,40,228,34,130,182,54,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,18,27,158,156,14,151,1,119,39,39,74,188,95,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,79,148,206,234,190,97,206,30,244,162,150,34,225,252,37,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,38,146,115,106,166,90,93,147,173,9,251,52,231,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,181,205,150,135,229,85,56,160,79,22,35,63,19,57,176,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,14,160,59,39,97,131,100,73,176,30,79,100,193,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,20,120,224,107,188,176,203,242,27,172,198,50,151,183,96,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,106,26,158,209,189,204,253,21,178,219,237,8,136,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,72,215,80,164,229,104,199,17,162,200,70,101,221,222,49,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,52,246,214,22,11,224,123,197,199,112,118,1,52,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,20,120,224,107,188,176,203,242,27,172,198,50,151,183,96,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,106,26,158,209,189,204,253,21,178,219,237,8,136,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,72,215,80,164,229,104,199,17,162,200,70,101,221,222,49,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,52,246,214,22,11,224,123,197,199,112,118,1,52,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,4,8,38,67,176,167,109,6,124,59,168,115,11,98,251,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,129,181,106,96,140,125,8,90,170,138,128,157,111,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,153,188,225,85,36,150,135,155,67,25,186,233,139,110,152,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,23,19,164,191,247,128,26,59,243,0,189,176,96,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,236,236,227,224,124,194,117,232,194,143,53,5,124,21,226,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,138,171,67,83,206,136,98,234,135,131,202,168,182,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,7,80,187,191,189,195,121,180,112,88,169,126,36,153,211,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,32,155,8,160,88,242,60,89,90,232,109,171,135,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,181,206,151,230,93,247,22,17,136,8,165,139,35,84,91,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,114,68,152,228,67,61,209,200,106,197,238,181,162,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,213,67,167,219,122,41,159,177,46,114,46,248,166,247,122,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,179,26,155,14,113,212,242,76,105,103,212,221,77,121,43,138,217,87,14,16,190,22,206,145,14,229,165,133,151,242,232,151,87,203,84,235,134,72,151,67,154,135,158,221,76,224,4,217,117,27,211,32,226,18,233,191,54,208,219,251,192,106,63,156,144,125,36,205,234,72,172,158,91,12,81,34,179,33,5,101,234,27,208,32,15,95,105,10,159,238,208,62,124,167,130,59,83,238,58,28,138,15,42,105,120,19,31,223,183,127,30,40,9,168,68,139,220,8,73,13,150,67,54,55,172,98,177,85,221,240,228,109,116,102,144,181,0,95,154,245,132,79,29,187,60,17,129,127,57,62,22,85,189,136,208,178,35,116,234,28,12,34,90,142,118,214,139,239,222,58,54,222,27,196,44,59,111,65,117,244,96,126,92,13,14,38,7,65,209,123,112,3,150,247,89,163,158,47,109,61,126,49,187,254,79,96,26,0,72,181,25,228,16,32,227,230,65,142,3,234,178,125,5,101,43,200,97,3,70,45,29,15,202,34,19,95,103,87,38,178,229,29,8,248,217,145,219,176,126,9,109,153,93,169,197,149,27,212,50,243,224,35,62,96,230,151,144,208,121,242,5,253,17,194,5,243,155,121,59,186,73,55,11,197,194,100,213,72,195,175,22,6,121,223,15,80,174,106,125,2,154,208,48,88,13,143,99,129,107,49,90,6,230,158,174,242,61,8,236,9,125,110,224,15,148,28,2,46,208,202,83,141,189,68,11,93,100,117,162,252,249,204,52,19,245,1,236,47,187,172,206,10,195,202,231,83,76,220,78,241,101,160,231,251,92,54,4,42,99,103,26,164,217,52,0,172,171,67,79,113,88,132,140,155,151,83,146,253,184,101,5,52,133,94,164,87,53,25,41,159,21,238,87,62,110,165,63,15,95,242,40,27,215,80,231,110,6,225,115,207,215,155,93,32,203,198,121,134,51,206,2,183,72,194,219,125,163,226,182,218,250,90,97,245,148,30,78,168,175,64,9,230,119,32,120,240,69,225,1,190,162,30,47,183,64,243,9,215,204,227,44,139,30,199,220,150,151,158,213,9,83,242,59,146,127,250,75,224,86,37,149,138,166,146,17,242,84,117,184,93,130,120,167,227,132,60,229,62,26,163,137,213,102,59,154,160,62,33,83,233,131,88,228,252,205,69,37,105,83,94,64,111,136,134,26,221,220,83,226,210,39,46,203,51,189,75,179,193,171,201,216,128,112,248,81,38,237,147,1,201,53,203,90,34,140,224,96,72,147,134,184,170,185,171,178,78,178,193,214,176,23,208,91,144,253,18,221,50,212,166,47,39,155,228,43,157,181,138,251,71,123,2,166,236,123,157,207,116,236,189,92,48,65,177,152,39,6,99,56,232,17,29,21,80,122,161,161,205,154,246,216,28,4,203,250,66,112,26,10,167,138,127,171,229,245,194,184,71,95,118,230,27,111,119,34,11,135,47,244,202,50,29,77,224,58,29,221,197,52,126,20,181,6,13,240,122,183,200,244,38,89,184,122,22,177,132,12,154,147,85,43,45,211,191,216,173,35,193,168,66,148,147,131,58,13,85,213,91,116,53,226,233,150,104,205,154,52,185,16,171,122,59,216,255,200,28,101,215,69,82,69,155,18,3,175,37,75,241,66,225,205,58,200,26,17,252,90,255,149,133,21,179,32,228,247,110,7,107,41,142,178,232,149,223,130,240,195,149,192,134,19,10,9,90,229,244,43,169,21,72,177,186,23,16,128,30,9,180,98,177,139,248,111,170,104,136,39,169,44,159,208,2,121,84,49,198,207,252,156,164,152,6,150,140,20,174,102,243,87,104,1,25,98,119,97,24,70,45,50,30,216,180,179,17,252,152,48,210,80,157,203,12,195,25,87,195,46,36,101,46,17,131,152,3,193,7,143,83,221,154,164,29,59,120,213,61,140,97,35,224,69,49,151,66,174,13,60,219,1,102,32,28,162,24,252,160,175,148,60,87,223,18,189,85,107,10,37,14,172,235,198,143,238,82,227,62,100,238,121,155,12,95,203,175,26,12,146,41,219,158,164,195,157,44,221,89,120,107,183,188,27,123,162,109,241,217,125,253,105,133,110,102,41,241,78,24,83,185,65,233,173,53,244,0,8,203,103,222,90,61,206,212,215,182,56,49,82,214,85,69,43,84,180,255,15,254,227,34,107,75,206,118,178,171,129,0,104,102,84,87,99,17,106,98,2,160,37,94,103,250,90,101,5,142,111,177,44,34,181,130,154,130,31,229,127,17,137,141,84,47,30,236,22,211,46,252,95,61,78,180,108,192,16,111,99,152,83,244,22,86,179,71,169,218,125,39,7,239,247,80,198,207,151,214,199,95,110,163,130,203,214,168,154,90,201,58,253,138,205,23,13,228,219,5,87,26,114,196,244,135,160,149,240,178,71,219,36,159,30,38,73,114,104,203,154,57,255,86,28,86,115,245,33,251,181,235,76,217,89,142,24,245,27,153,16,42,131,86,1,88,35,133,55,23,47,155,5,240,37,114,44,115,195,161,34,192,77,148,223,163,199,118,137,24,208,210,144,244,107,30,65,118,49,150,236,144,175,246,1,77,119,104,13,75,200,142,30,138,164,59,82,131,64,0,207,124,86,254,147,173,135,134,22,192,183,169,179,53,66,92,231,227,172,116,7,15,224,15,29,213,16,181,93,223,160,102,78,17,238,94,226,104,141,137,37,131,85,105,17,248,156,138,233,8,243,108,60,201,14,102,18,123,111,47,196,209,9,143,65,25,165,70,80,6,110,83,33,238,7,61,145,74,51,223,207,76,14,147,175,205,91,86,34,52,167,52,11,4,206,134,156,7,247,226,193,106,238,210,45,180,237,19,156,94,41,187,7,16,129,131,55,209,138,188,46,7,65,68,157,252,183,48,20,230,58,182,76,251,90,46,170,112,127,118,86,180,251,161,110,174,116,205,61,62,63,8,17,127,46,60,57,130,173,11,148,9,85,44,18,154,4,17,212,129,66,150,155,156,173,229,79,239,213,111,198,233,129,184,19,7,149,41,146,59,223,161,213,134,118,15,113,222,187,54,50,169,126,42,11,157,149,249,105,112,119,254,219,34,238,187,1,165,188,40,234,102,189,119,94,101,65,86,180,107,103,231,20,244,207,188,196,80,216,44,246,185,209,2,142,223,48,251,29,124,197,139,237,245,243,245,81,157,2,210,101,72,177,183,110,36,133,67,80,192,25,203,79,235,174,143,101,71,21,101,32,107,227,105,175,89,205,107,36,56,2,84,32,233,173,27,57,187,197,110,89,129,27,32,234,63,239,137,51,126,224,240,9,87,5,83,216,147,173,184,154,0,127,219,81,53,237,235,46,78,35,14,131,197,244,147,220,120,238,116,74,211,113,110,12,76,115,148,80,239,13,58,36,107,176,217,164,76,35,214,130,39,95,119,29,190,220,122,77,149,117,161,73,115,12,194,9,127,129,180,197,188,238,177,194,228,26,220,178,130,119,108,80,61,183,229,124,249,7,143,47,91,151,255,83,44,220,161,45,10,228,143,96,137,86,240,188,107,250,152,116,126,210,53,168,35,249,28,153,181,126,74,50,193,72,65,82,100,118,235,36,195,5,223,152,75,235,19,13,96,246,129,131,62,97,147,164,69,193,206,146,112,238,150,207,77,199,254,98,196,129,18,5,163,113,63,131,140,49,151,121,145,241,187,63,36,212,70,190,242,69,218,125,39,48,241,68,224,135,144,69,16,179,100,22,146,79,58,164,5,194,40,118,8,118,3,71,104,6,148,31,200,87,98,28,42,228,135,63,226,54,194,195,197,118,196,29,12,157,34,32,92,220,58,38,141,68,98,84,34,44,101,239,79,77,4,203,229,123,53,108,67,176,78,201,103,73,233,24,8,133,117,62,243,133,236,251,91,227,125,115,252,199,30,136,204,254,94,5,50,203,61,101,29,251,196,50,39,59,247,6,69,14,104,147,155,79,179,218,219,79,84,69,51,208,183,179,34,85,205,178,161,46,57,241,8,114,217,84,39,129,111,0,60,165,163,163,158,51,125,254,197,198,50,44,190,120,214,196,163,247,168,28,66,126,91,33,92,137,89,48,88,108,58,16,82,102,238,24,212,62,184,19,154,42,201,59,199,203,210,181,116,64,227,17,193,44,209,215,202,37,31,50,84,254,49,9,185,185,89,41,72,188,179,38,189,62,48,2,3,16,212,57,172,117,189,136,163,161,240,103,12,78,217,29,87,157,226,36,7,130,234,15,171,22,20,196,186,156,149,164,179,127,180,45,199,234,28,63,144,219,16,80,184,65,100,210,61,163,90,44,224,101,38,168,229,230,16,142,43,204,59,212,83,228,88,89,217,156,153,81,134,83,159,85,124,95,119,20,239,213,222,15,58,243,244,98,4,15,29,107,118,129,243,100,219,233,132,24,176,240,179,47,98,13,96,173,11,146,210,236,180,25,240,8,214,28,90,31,252,72,152,168,7,103,164,115,141,74,47,57,79,220,38,17,30,229,217,113,70,74,161,56,64,94,250,3,252,58,222,18,109,190,187,17,37,251,131,227,103,192,168,145,140,123,217,203,121,132,195,241,207,22,35,133,16,173,17,1,201,86,27,24,40,191,47,246,233,205,165,206,143,126,96,108,105,54,250,21,72,29,111,227,41,181,113,213,225,30,49,42,49,247,174,252,7,12,45,219,220,76,89,142,240,150,208,142,9,245,229,113,210,19,151,207,80,144,160,254,149,185,135,11,80,177,229,25,4,168,97,234,116,231,188,77,139,100,187,141,86,105,141,124,100,215,96,113,151,85,12,168,139,192,249,13,114,192,172,5,29,0,19,238,231,94,244,179,252,9,255,161,13,235,204,129,196,20,105,135,23,56,110,225,165,98,140,16,148,145,230,144,184,67,115,209,116,185,242,60,223,188,81,79,39,66,37,222,233,22,64,208,20,36,37,246,100,94,224,15,200,202,217,147,14,212,159,87,87,17,18,61,37,228,96,252,248,87,122,14,189,141,182,137,81,229,102,55,7,47,5,26,237,36,176,97,126,214,239,39,106,8,76,135,176,137,21,58,51,20,235,65,162,203,192,176,12,138,128,192,1,89,193,12,236,62,211,204,28,239,102,148,206,152,93,169,233,74,243,151,24,52,164,213,168,198,157,239,219,65,166,106,146,166,51,20,5,29,105,220,216,112,102,238,209,13,191,60,151,49,197,189,136,35,90,209,27,125,198,67,201,150,189,146,72,167,214,41,67,245,248,202,186,44,191,252,86,73,205,176,99,195,250,216,164,64,35,41,96,137,253,161,104,237,214,129,124,184,169,29,160,151,157,230,88,109,23,105,237,149,180,100,101,103,223,155,16,245,69,17,233,38,244,168,218,195,78,17,134,94,198,10,193,185,147,84,198,243,82,32,22,142,19,75,140,255,148,144,158,36,234,188,109,179,113,226,237,173,163,97,29,248,1,15,91,118,127,5,26,72,56,118,223,173,4,198,13,132,200,4,49,159,175,96,132,27,11,18,75,165,174,240,171,219,12,7,192,16,117,235,87,60,252,176,230,199,245,20,138,146,10,242,247,170,152,178,35,142,57,249,68,1,199,242,1,28,203,33,64,69,221,217,86,103,101,113,25,251,142,214,165,238,233,79,137,200,128,239,74,60,242,213,236,155,191,134,196,226,92,38,12,245,32,194,192,189,201,242,248,39,135,6,62,219,165,30,230,59,254,20,222,190,89,90,176,175,107,136,218,157,222,8,7,168,165,141,158,73,235,253,67,137,68,198,44,119,226,104,227,49,200,233,65,231,219,38,25,21,39,116,242,125,229,40,148,171,125,11,51,223,5,140,123,16,30,142,76,15,0,173,93,83,158,105,17,66,17,58,146,215,127,46,39,84,73,14,71,237,179,5,240,174,230,219,21,110,236,209,38,44,209,64,141,211,101,192,236,6,233,130,42,101,18,111,141,43,163,34,13,187,170,47,76,126,239,160,122,2,87,214,5,202,156,245,14,0,198,68,169,164,55,166,13,160,122,15,116,82,199,17,227,216,9,161,6,75,107,198,184,188,129,143,142,196,129,197,239,171,152,105,156,246,175,119,210,198,72,209,175,209,204,23,48,157,114,74,147,180,250,61,74,141,110,62,89,100,20,3,29,47,160,2,133,143,17,36,23,183,193,170,181,145,189,42,47,216,219,86,93,126,19,107,236,214,14,117,178,125,44,212,156,50,28,77,218,26,114,137,150,155,211,53,61,243,24,3,31,67,2,98,81,222,75,215,179,232,44,192,74,107,9,114,162,93,198,44,34,207,70,69,40,173,176,86,186,54,23,20,150,151,214,199,22,76,239,80,155,189,47,12,47,237,79,246,135,201,53,241,213,183,26,144,170,79,250,56,246,197,30,5,236,210,149,158,85,163,27,56,83,4,55,160,106,56,161,98,37,34,146,223,145,173,92,145,115,39,99,168,90,168,172,8,28,230,106,151,90,247,223,189,246,55,233,11,232,156,166,69,184,100,238,101,69,113,0,228,216,217,222,251,46,100,14,37,244,212,30,21,201,51,85,191,59,115,61,124,7,12,27,210,164,163,161,8,244,56,67,49,53,230,23,173,248,39,107,39,16,15,162,218,181,65,194,109,132,190,232,4,157,158,165,216,220,204,203,47,16,148,105,136,160,27,79,219,140,245,103,48,18,26,155,185,141,254,64,41,30,115,143,65,242,241,40,237,189,246,10,76,68,168,121,185,81,227,111,252,72,97,121,13,127,118,107,241,51,255,185,209,12,108,87,83,47,127,223,149,182,205,76,5,228,42,227,226,136,18,143,12,153,147,252,26,33,6,240,153,72,107,172,154,43,16,157,146,25,190,153,193,140,134,55,196,84,93,180,219,162,10,235,42,253,218,218,42,50,213,170,234,9,157,31,65,108,180,234,145,190,17,67,49,42,20,112,7,18,190,5,227,196,14,178,137,211,111,166,25,46,13,132,62,73,110,114,58,91,138,189,148,240,4,145,12,85,57,109,117,38,123,27,93,42,168,94,176,253,228,43,26,26,83,247,0,40,1,237,244,243,215,203,105,61,36,142,45,164,14,74,53,165,247,157,129,27,4,162,220,112,249,74,25,219,42,238,168,116,103,136,205,152,62,4,237,102,230,20,147,157,141,160,118,49,15,68,58,73,120,215,157,152,157,20,31,146,52,204,97,1,4,239,218,29,116,46,79,212,146,144,84,55,142,197,51,106,60,62,127,152,251,107,192,180,126,134,44,178,58,180,139,26,58,180,47,215,82,114,153,71,91,147,74,17,173,8,129,247,130,122,253,18,244,234,170,84,156,204,27,132,190,160,164,233,138,176,210,173,192,96,90,68,248,137,128,96,44,50,8,84,237,98,28,30,6,24,212,14,190,212,10,59,126,68,79,227,150,31,116,209,162,217,165,124,20,50,94,95,107,45,117,113,215,13,140,55,190,145,200,9,29,4,26,253,166,228,246,149,199,4,84,213,111,220,77,104,193,97,11,184,75,238,95,202,165,126,89,145,254,163,93,1,154,113,42,81,180,201,29,210,248,33,25,10,2,255,131,68,102,210,120,124,10,183,17,19,139,223,232,237,136,250,28,208,103,106,25,30,90,98,229,211,192,196,158,120,14,114,105,114,147,204,109,136,252,18,224,225,240,209,88,145,125,102,4,167,87,13,19,247,183,80,55,16,112,32,254,236,61,254,169,230,225,55,223,235,98,235,31,57,62,188,93,242,230,151,9,191,36,118,23,103,252,233,45,111,46,180,96,188,30,25,187,218,165,109,87,255,75,227,169,193,191,152,223,56,141,144,10,41,49,83,8,110,198,60,21,21,194,97,214,110,47,222,120,54,49,82,91,139,171,211,10,28,31,41,68,228,149,177,100,13,233,26,22,130,173,77,193,158,181,214,194,141,222,40,211,140,207,174,112,138,120,101,64,163,61,168,9,174,43,163,85,195,207,231,37,130,212,186,70,17,186,241,81,244,142,5,206,213,10,200,121,65,61,216,192,178,161,138,251,79,21,171,151,19,164,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,120,111,126,70,123,46,237,206,137,200,104,110,198,207,77,64,123,189,246,239,49,221,110,45,190,141,138,14,146,150,127,34,63,159,107,24,173,164,236,167,215,199,164,124,212,209,164,216,43,216,3,222,97,220,220,188,111,93,216,208,99,129,53,36,39,247,117,207,155,10,100,48,201,230,121,158,34,168,27,33,49,0,115,83,242,118,11,131,165,18,202,209,208,162,233,0,216,215,188,246,227,191,110,105,0,23,234,102,20,95,76,64,113,219,134,193,181,4,142,58,57,114,144,250,134,199,39,29,97,78,163,134,175,11,95,246,12,234,32,138,182,21,223,137,104,6,100,233,29,219,253,161,229,90,67,238,4,165,162,21,121,28,234,25,202,36,206,210,226,212,39,228,250,204,39,180,26,4,238,197,185,240,0,108,200,142,218,11,189,200,231,31,70,136,143,238,255,216,45,86,32,44,136,187,212,96,41,5,90,134,22,176,200,189,139,170,191,93,206,17,217,71,230,21,64,165,153,206,162,126,240,184,16,183,138,232,91,216,136,244,15,76,207,150,247,69,89,189,66,191,86,169,222,11,94,18,71,124,122,65,5,32,229,196,5,33,240,90,229,148,219,143,253,252,105,111,71,153,36,84,49,7,73,15,173,196,186,41,10,171,32,205,214,104,68,44,246,109,79,5,50,167,100,94,241,47,84,83,15,145,1,102,24,229,97,121,147,233,112,22,108,96,148,217,221,254,187,55,53,168,3,42,63,59,130,178,10,33,168,68,88,193,107,3,247,164,108,113,35,21,56,16,22,9,205,42,66,169,74,237,83,35,123,215,121,148,194,74,68,49,155,207,40,149,202,91,51,181,219,188,34,187,98,1,27,65,107,138,22,68,4,57,117,182,121,187,183,236,73,167,90,210,16,64,102,146,189,241,135,23,21,240,157,97,62,47,116,190,112,230,49,216,7,14,106,126,247,210,64,226,76,58,182,119,211,22,238,61,5,167,190,172,244,236,201,190,198,21,93,202,234,147,6,99,21,255,143,187,3,163,45,139,62,69,127,27,240,30,137,61,232,85,139,90,25,90,243,104,197,3,137,183,85,183,209,149,184,127,108,186,163,220,38,142,28,215,237,157,140,248,164,125,105,106,163,108,17,10,174,15,198,3,125,202,154,121,3,80,2,68,31,188,107,40,115,220,68,170,200,78,148,225,110,186,171,47,30,82,157,222,48,4,232,7,236,136,240,21,137,215,69,97,71,63,119,239,241,161,198,111,232,185,237,16,251,13,53,208,195,191,145,128,15,2,176,7,212,235,10,128,97,4,120,222,27,87,45,167,130,161,228,43,173,154,104,181,6,20,118,5,31,142,180,5,27,61,30,30,173,226,121,18,124,206,43,5,221,160,197,161,223,186,213,109,10,254,95,17,176,19,60,107,101,62,109,200,106,252,233,40,174,254,77,89,18,102,58,242,216,59,205,186,149,213,205,148,82,254,99,89,26,79,240,51,146,53,170,240,83,50,117,20,25,48,149,74,255,32,117,18,0,81,214,145,109,142,5,146,161,37,20,148,106,169,64,46,31,81,21,31,118,91,16,40,177,146,1,74,177,40,16,244,40,100,93,121,0,31,206,207,252,249,184,16,195,236,202,204,240,188,147,33,153,114,157,4,137,103,188,16,136,130,63,217,126,157,231,123,70,1,40,151,60,240,160,219,43,53,45,100,129,118,141,65,66,50,56,25,37,230,26,37,171,216,134,218,89,236,143,143,135,39,197,155,125,3,38,21,77,91,86,41,235,2,54,131,15,244,144,24,5,52,23,187,105,251,79,13,157,64,20,16,205,216,233,254,193,202,2,18,163,154,42,156,132,11,205,186,61,247,204,34,78,24,58,38,53,45,58,35,239,14,94,106,231,243,239,78,57,86,40,52,171,106,8,95,5,44,83,0,43,82,130,6,166,222,139,88,111,237,236,170,190,243,62,48,77,245,46,26,203,153,156,170,153,115,52,142,144,105,2,10,220,239,2,7,243,232,160,163,187,139,45,135,9,230,14,138,172,245,245,213,73,249,43,144,166,90,158,189,166,155,202,26,31,131,224,19,20,169,106,131,135,70,205,95,88,216,222,47,154,116,113,223,249,41,182,142,61,120,161,232,170,135,88,124,71,219,175,7,253,38,212,223,23,97,31,167,193,148,32,117,162,221,197,74,37,193,182,172,57,37,233,172,19,251,177,224,255,194,203,3,178,64,187,138,0,71,247,253,17,67,34,7,232,124,229,52,214,220,202,32,221,141,210,140,192,43,158,146,227,63,155,33,173,87,137,86,191,107,66,98,105,81,255,244,179,181,142,141,230,194,203,163,240,75,165,222,91,14,78,78,78,62,186,17,214,222,151,168,225,229,100,171,186,208,184,76,248,122,170,211,97,154,199,166,158,13,187,248,132,226,70,254,131,250,180,17,214,222,151,168,225,229,100,171,186,208,184,76,248,122,170,211,97,154,199,166,158,13,187,248,132,226,70,254,131,250,180,2,86,235,222,161,215,226,241,6,244,243,148,36,246,66,112,126,192,167,180,240,166,61,106,122,250,159,124,219,120,79,214,15,169,255,158,68,154,97,127,190,174,209,110,209,47,100,253,100,64,52,206,12,242,120,33,40,169,209,88,255,99,120,111,17,70,208,75,99,69,223,70,237,58,179,176,6,152,146,112,103,42,216,125,179,37,41,71,46,122,53,0,203,57,171,144,4,96,172,47,132,131,16,32,52,70,198,16,174,111,18,162,189,110,225,91,13,91,219,196,227,56,254,111,160,130,114,206,36,167,112,202,172,146,178,210,89,20,49,203,44,99,244,176,84,114,70,119,114,173,83,225,110,91,245,139,177,235,60,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,229,117,3,84,90,252,195,123,145,48,84,103,130,24,102,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,126,68,216,246,41,95,210,245,115,99,145,125,156,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,15,149,165,176,53,84,63,22,91,164,123,125,222,197,247,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,76,241,7,22,89,78,217,33,46,239,224,180,161,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,249,158,114,48,160,174,28,64,78,26,228,19,214,27,242,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,142,78,137,67,89,19,158,231,161,135,151,15,164,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,164,5,243,36,169,69,218,70,36,155,37,115,155,37,223,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,79,36,169,57,82,104,24,7,132,249,144,171,99,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,201,23,215,50,130,62,40,108,168,73,45,83,53,129,248,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,35,152,200,103,34,154,240,155,115,174,129,179,255,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,219,86,131,65,164,90,90,207,1,114,60,230,15,165,25,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,105,95,140,62,97,183,152,181,47,200,140,139,202,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,57,4,6,179,228,124,251,175,3,212,211,22,129,184,212,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,194,132,214,26,184,123,73,192,116,108,92,123,38,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,82,109,215,226,201,52,77,23,47,142,174,221,189,238,34,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,113,215,7,77,91,120,177,17,132,148,248,222,40,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,169,94,228,53,59,156,160,198,103,17,66,63,206,71,120,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,242,248,245,55,171,102,16,84,113,102,79,64,52,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,218,97,239,160,9,98,114,150,201,161,31,164,71,94,10,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,125,124,114,97,46,32,202,227,75,217,251,180,252,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,10,121,125,83,129,231,244,54,165,112,216,93,219,228,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,168,185,215,214,143,243,78,229,227,190,120,84,243,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,249,239,65,232,238,95,87,57,8,99,205,6,187,81,47,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,83,100,67,142,143,182,213,6,160,90,136,0,34,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,38,90,121,11,196,101,200,74,57,199,29,186,224,245,211,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,190,245,188,144,85,153,48,65,102,102,201,169,29,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,115,134,160,116,78,60,107,118,241,98,227,211,143,96,93,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,127,162,158,104,201,68,253,109,64,76,252,197,169,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,61,161,91,159,131,144,174,90,200,73,180,33,24,166,38,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,118,44,148,177,126,55,222,253,215,183,220,38,58,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,162,243,9,221,16,53,112,247,30,221,202,164,77,230,78,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,204,136,79,4,106,73,161,116,204,63,80,155,54,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,251,164,220,21,127,165,80,80,133,49,227,104,171,93,156,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,239,227,134,210,27,181,19,202,143,4,91,84,73,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,184,225,60,70,60,222,3,144,16,60,245,11,229,101,151,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,206,142,252,223,166,191,10,3,32,162,197,161,18,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,137,229,134,61,186,24,27,201,210,212,125,133,203,169,68,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,39,68,86,8,107,7,212,157,193,81,238,46,42,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,20,11,9,107,61,208,1,31,129,251,68,144,17,71,118,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,189,218,161,167,167,124,166,42,206,134,165,162,166,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,17,72,171,252,123,182,210,108,55,38,23,21,9,213,184,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,110,241,216,90,18,61,227,253,195,96,249,100,51,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,23,207,93,255,86,102,186,41,10,76,199,66,245,125,73,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,6,192,123,12,138,102,188,40,211,244,129,199,129,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,165,173,83,72,18,138,217,245,185,94,54,166,162,228,119,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,193,235,79,29,192,146,219,239,247,156,2,254,141,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,147,74,35,126,65,212,128,220,142,178,6,52,133,92,27,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,222,116,164,116,225,9,57,89,196,114,132,242,97,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,85,181,74,143,212,122,150,235,6,54,183,26,45,33,251,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,237,244,109,92,215,84,235,54,115,247,156,223,10,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,60,56,160,232,176,255,149,52,125,42,46,214,137,222,87,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,39,45,74,159,238,87,133,53,183,222,24,124,147,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,222,92,210,194,193,226,107,64,194,99,51,13,75,172,114,122,2,180,179,44,214,49,43,181,11,109,45,227,178,46,230,36,162,30,53,40,163,75,138,253,172,229,72,90,175,117,233,12,147,147,194,232,60,186,209,164,84,83,77,147,107,228,52,24,86,28,255,126,46,222,97,39,54,122,136,132,110,81,237,173,0,212,177,124,20,161,146,135,47,227,248,156,245,120,230,41,145,172,141,162,248,197,73,99,236,19,168,204,6,125,215,46,42,128,193,16,170,63,82,254,3,131,150,237,236,181,207,11,229,214,49,174,253,129,205,208,207,78,110,53,145,31,172,153,214,210,208,251,94,211,25,65,154,5,196,47,98,48,155,8,243,118,53,208,14,150,244,201,227,137,243,123,242,230,162,23,145,207,226,152,128,33,9,241,21,189,220,169,224,1,218,30,10,177,175,235,13,142,173,228,39,220,233,5,167,245,248,52,124,124,63,215,127,99,60,85,90,98,106,213,59,224,3,40,86,235,55,16,78,86,157,3,245,250,99,68,25,251,175,143,151,69,73,247,148,185,252,185,196,72,104,13,91,111,218,21,225,217,234,35,6,186,130,18,185,189,144,190,143,20,185,77,222,45,170,25,41,10,166,243,162,173,59,62,63,97,36,23,62,14,44,212,112,149,157,172,136,178,144,92,114,131,35,146,136,106,244,179,239,0,151,183,85,229,9,165,152,1,46,46,20,211,77,192,75,47,189,11,236,159,43,16,200,7,177,82,37,7,177,111,232,58,126,169,44,51,172,38,47,131,60,9,33,243,87,231,71,31,138,241,92,174,25,240,225,26,233,80,27,251,47,114,149,36,141,234,99,129,198,112,173,100,138,2,66,231,125,192,204,249,246,74,144,85,209,54,147,142,127,73,182,127,178,252,15,73,153,229,120,171,23,78,219,219,213,15,21,195,249,158,231,74,98,149,91,252,180,71,103,73,95,43,114,159,70,145,63,73,135,247,47,207,141,104,92,213,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,58,158,21,25,197,124,39,127,254,32,138,178,237,232,212,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,151,40,18,6,15,148,21,75,56,117,181,239,181,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,54,39,134,57,93,75,72,125,238,8,242,80,108,50,20,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,241,113,47,181,175,162,173,37,171,211,144,170,128,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,188,239,103,108,194,150,141,181,115,230,90,131,248,9,252,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,219,8,131,9,107,251,37,114,171,78,222,198,141,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,125,67,248,96,15,1,157,23,190,90,39,131,129,26,61,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,241,77,34,120,88,153,144,88,49,198,230,182,60,22
]),
};

export const transferCircuit = {"program":{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":3017363721188420600,"abi":{"parameters":[{"name":"_s","type":{"kind":"struct","path":"Sender","fields":[{"name":"priv_key","type":{"kind":"field"}},{"name":"bal","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amt","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"rnd","type":{"kind":"field"}}]},"visibility":"private"},{"name":"s","type":{"kind":"struct","path":"UserPubParams","fields":[{"name":"pub_key","type":{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}}]},"visibility":"public"},{"name":"r","type":{"kind":"struct","path":"UserPubParams","fields":[{"name":"pub_key","type":{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}}]},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]},{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1dCZxVVRn/3psZYIABE0wEQgVyw+Xet8y8UURckMzM0lQgQd4szwRFBUVN05elllvuYqKOG4oballmuWXumqaRZea+pGmaSWYJdr+Ze3jfu/OWGe7/e3MecX6/87t37nn83/f9z7ecc+45vAh1lWSEyIl03fOlxr9y3STwLOo/q/Xvo9S9mGeT/asTrrgRgRV3GhOJ9qZYuxt3006suSWVdBLJlsaUm3KTqWRbLBWPt6cSqabmluYmp9lNxNvdTLI5nvHBouHlcs1NAdVh2JLXEf51o2AHbeR3hiy1GEFWC6RF/hpixXwsdwRQro2UjCIS6Iuwco4A9mttQMZScjvhSp4NOSGLdIyR/nWUEdo4BjdkA89G+c9kqVFUNGxnj+w5VmsZLHcUTkenlnKZoFjp6XeVk1tioo1yJJAT6USjKWB4o6m7lwUND2ksZWR1yykzGijXF3DG4EhOGTerzOkoIBaS0zG94LTcd0lOx1AuaA4QfBLhnG5VabxYa8aNJ9ubkk5jOpFsa4zH2mJNTlsimXE9gWPNCY+aTGsi1ZaKxTOxpljrKqx8jgxsJpGsolwC4fuNqWvUtSnlRluVyKJIPWXwHutfxxmhjUGMpe5ZdBzpZ1GJFdZZxhIui46jdVk0UNyxpJNFx1PA8MaTfhbthTJls+h4oFxfJJ0syrhZZU7HAbGQnG5GOll0M1qXRYNZlP3KZNFx/v3mXt3Cq1tS6cUkdMDaEqhnAXFR2DHJxVb+dYIhxBgbN6wMPJtA5QOlE67kkbimjtie6SpbEc6pJxA2Q9dQz4Z2YeWWHLipeCzWFOfPpdocN9HmjUtisbaWhNPqpFtj7c0JtzmTiCXirW2tLR5m2s04mXRrcybVhSXl3VpTYAYPLvWGFX5roJFuA9RXi8NtCuCG5XAbwkY4tN4TiugdFndbwmYw4/zbUvfMhH7FUQvkYXPSyXBoneuAOm9BfRP4nXDF7UdYmzVlO02Bt1PAdUg3WDvhSqfe0htAuBU1tv6kY2yupsCuAm7McmNjvWNU3cY2gHSMLa4pcFwBN2G5sbHeCapuY6snHWNLagqcVMBttNzYWO9GwhubhqwMGiP8PKUJbKxylZH/5qGKWW3rL+6bKP+VQ7GVuZRXm726PVV2ZW57wtpDsICw81bmdvCvEw0hJuJxQ3BlbiLpr8xJEsOuzO1AOKOfSH2TWcLKLTlArsztqCkwg6NX5nYEGukk0s1SCA4nEX5lbhLpZjyEk05SwN2JsBnPOP9O1D0zoQPqACAPKSDWZOqbgOqEKy5SbinvzpoC76yAuwvpBkEnXOnUexdBMAg3b2iGdlbgPNBtBvbPrlSdzoqUW8q7m6bAuyngTiG7nZX1niIIBuGqOitwhRAaTHdX4i84Ig8rJzJATSWso9f7Ns5cmvWFenG/C+WOmKXE86ni3kyXv+TVPbz6ZV8+jQXaRsKPevdU4nRAEU73FJyW+8xXvLqXV7+qxCn37xQFTvcmrG+i5dPS+2vAviFR0DFpTyDW18E6o/cvcFxC9gv75N4KtrMPYX0GzeMeYB73UuJxX6qOccFEINY3LPdBHjsA86zLMWcfBdvZj+z2wakKPO6rwOP+lvPI4y7gqw6X/W8/BR43tpzHegUe91fgcRPSyQk2H0yPArEOAPIn3www7iZU2fOZSF2iQs5p/nW6EdooyQ3ZwLPppH8+8wCgAUzrOVbZ85nTcTquNeczpxHWwUyZQQHDm0H65zN7oUzZ85kzgHJ9E2cMeVGMcbPKnE4HYiE5PbAXnPbmfOaBtO58ZnAXGPuVWSGc7t/P9Oosrx5Eld0FdhDpjKjAfZy3C2y2f00bQoyxcUNwF1ia9HeBSRLD7gKbTTinThM2Q1dqF9hs0tkF1qIpMIMH52VhhW8BGmkrUF8tDlsJvwuslbARDq13uojeYXHbCJvBjPO3+XZeybleDVAXmUna/WvGCG2U5IZs4FmG9Od6NUADaO85Vtm5XoawmWRtmOu1E9bBTDmYAoZ3MOnP9XqhTNm53sFAub6FM4a8KMa4WWVOM0AsJKeH9ILT3sz1DqF1c73gXI/9ysz1Mv79HK/O9eqhVNm53qGEHQkFCwg7b653mH+dZwgxxsYNwbnePNKf60kSw871DiOcU88jbIau1FxPcoCc6x2uKTCDo+d6hwON9AigvlocHkH4ud4RhI1waL3nFdE7LO6RhM1gxvmP9O08mNH5bw4SJrPViXvzH6KVy4LzvbrAq0dRZbPgUVR9WfBo/7rQEGI6iBuCWXAh6WdBSWLYLHg04RxhIVVnFpQcILPgMZoCMzg6Cx4DNNJjye4syBweS/gseCzZnQUXFtE7LO5xpJMFjyP9c68zgTzMB2J9m/omoDrhiouUW8p7vKbAxyvgnkC6QdAJVzr1PkEQDMJV3d43C8jpAiDWd6g6nRUpt5T3RE2BT1TAPYnsdlbW+yRBMAhX1Vlnkp3BNEtYozfnFRnXzLVnifsTKHdecb54vkDcm6njd716sle/R7kzjXydWQQ7LbDLfeb7Xj3Fq6f6umskvJMIP7o8jbD2jpZPS+8fAPuGRImC5UwDsX4I1jmoqxOuuOyfyH5hnzxNwXZOJ6zPoHk8GczjKUo8nkE6uRbtgwuBWGda7oMcb+YD8TjmnK5gO2eR3T7IPC4A83iGAo9nU3Xkf3T/IMe8P1Lm0AlXOm3nTIW+OcdyvblfzlHQ+1zL9ebYs1BB7/OAeldyIWYgUG4p7/maAp+vgHsB0Bi09L5AEAzCraixDSIdY7tQU+ALFXAvstzYWO+LSMfYpLyaxhYFyh0Vcl7sXxcZoY33cEM28GwR6Z8giAKN6eKeY5U9QbCIsIYjtxgVKj39rr48QXAx6UTASyhgeJeQ/gmCXihT9gTBJUC5fowzhrxdAYybVeZ0ERALyemlveC0NycILqV1JwiCeyfZr8w7lEX+/WKvXubVy6myeycvB+pZQFwUdt7eySv8a4chxBgbNwT3TnaQ/t5JSWLYvZNXEM6pOwiboSu1d1JygNw7eaWmwAweXKkLK/yVQCO9CqivFodXEX7v5FWEjXBovTuK6B0W92rCZjDj/FdTfjYjoI3yAshFClxcA+YieHKCF29MRh8k7q+hnp2cuNarS7x6HVU2+19H1Zf9r/evSw0hxjC5IZj9l5J+9pckhs3+1xPO6JdSdWZ/yQEy+9+gKTCDo7P/DUAjvZHszv7M4Y2Ez/43kt3Zf2kRvcPi3kQ62f8m0j85sRjIw7VArJupbwKqE664SLmlvLdoCnyLAu4y0g2CTrjSqfcyQTAIV3Uz9mVATpcAsW6l6nRWpNxS3ts0Bb5NAfd2sttZWe/bBcEgXFVnXUx2BtOfENbozekGxjVz7cvE/TLKnW64VjxfIu7N1PGnXr3Dqz+j/JMTi4tgdwjscp/5uVfv9OovfN01Et7thB9d3kVYe0fLp6X3L4F9Q6JEwXJ2ALF+BdY5qKsTrrjsn8h+YZ+8S8F27iasz6B5vAPM451KPN5DOrkW7YNLgVj3Wu6DHdSVR1F4HHPuVrCd+8huH2Qel4B5vEeBx/upOvI/un+QY95fK3PohCudtnOvQt88YLne3C8PKOj9G8v17qD812UovR8E6l3JhZjBQLmlvA9pCvyQAu7DQGPQ0vthQTAIt6LG1kA6xvaIpsCPKOA+armxsd6PUnUb2xDSMbbHNAV+TAH3ccuNjfV+nKrb2IaSjrE9oSnwEwq4T1pubKz3k4Q3NgEJP00BHKO5c4By/Zaq01mRckt5n9IU+CkF3KfJbmdlvZ8WBINwVZ0VOMZ15wLl+h1Vp7Mi5ZbyPqMp8DMKuM+S3c7Kej8rCAbhqu4UmEN2BtPfg/nTWCx5lPCraMsJ6+xmFwPzaXYlzBX3T1NuF8Ng8bxB3C/3r3/w6nNe/SPl75CYUwR7nsAu95k/efV5r/7Z110j0T+r0F8vkK6dhpVPS++/APuGREG/nZ0HxHoRrDP6rRX7J7Jf2CdfULCdlwjrM2genwPz+LwSjy+TzhgD7YPLgVivWO6DnEOBP+jmcsx5ScF2XiW7fbBBgceXFXh8jaoj/6P7BznWf12ZQydc6bSdVxT65g3L9eZ+eUNB7zct15vjznIFvd+yXG/exa6xMyQWsVtv3v10n4LecbDeptSC5RwCxPorsF+AduMi+6KSi79APvMWf9/WFPhtBdx3gEaqpfc7gmAQroqsfERJI9AnqiDQ36+gd7JKAv1QINbfgP0CtBs3WaWBHshnXqB/V1PgdxVw3yO7Az3r/Z4gGIRb0vGdcAWaPP9Oa/8IT/YFenvE+7T2B04Nv+MNkk8SPnl/QNjAa96Ksp+Yt5zvi/t3KPdWdIh4PlTcf+Bf/+HVD736T8ovaJv8iP4/fFrjrM+DhN+VATxD5D4I1HcF6fjKR0V8ZYXwlXKf+ZdXP/bqv335NCag7ynY0Cdkt41r6f0fYN+QKOi3lyuAWP8F64x+q8P5Btkv7JOfKNjOp4T1GTSPH4J5/FiJx5VgHrV88AMg1irLfZDHhMA863LM+VTBdj4ju31wqAKPKxV4JMvHuCb/o/sHuSYRsXzuyrazSqFvopbrzf3CMqL1rrFcb85XKxT6u9ZyvflXQ/kXNNHrE+cCsc4DYtVF7B5LzKSuX0lF4fEv7J6lYNf9InaPJWYp8Hi2Ao/9LY8PvPPrLYX48CYQ6y0g1gDL4wOfygGeOHJf8TBeVbDresvjw1wFHl9T4HGg5fGBx3U8xkHHBzleRI7BwmINsjw+8DgW+W6I50CfKdj1YMvjA7+vAL5n7PolTIV5VYPlaxGcr14kfNxZj+zWe66S3p+zXG+eX/WL4PVevwr07q+g9zDL9ebxcr2C3sOrQO+BCnpvYLnePP4ZrKD356tA7wYFvTcE6s2ymX2I5mq44PERj9EHi/Y6r/bzan/q+t1M3tvBv5c5yP8cn+jkd1tD/XYunHc5B3E85tjEfso2y/23oX9vSn//esXSMXeMej06QzStxivU1lCibWiJtvVLtA0r0TaiRNvIEm37+9ddV74w9dbzTt1Ctk0r8e+ml2ibVaJtdom2Q0u0HVaibX6JtqNKtF1Xou36Em03l2hbVqTN2PJ4/1rvX82Yn+2bbXuy/7cTrrj1AheNn3ISTfWUX8Dyx80eLU1+DKYCvmPixm7ZHH5QFy4NlNtrRoF/w/FlCOXu1xP/hssUgR0JtO1e4Hs1dfZsImnwaxXwvRIbVkD+WqEbl12ztLqs4fe6wQeDfP7H+Hg1BeSIBGSqoeJ9TgWeRQrgRAOfjRT5fql3DXXvg2KyFeKRCjwrJFtNGdlqC8gWxI2W0KPY90iZDD8N1J3rSKCtkOzcr8ZuarP57ZP9506I0pTKHYqp8fHrqLsdyO+vC3x+nP/3QCG/5GLyGsqZaUq7mXg6k06m29oSren1A/gk+GSexvr36/JWyRJXzisx5RhbMG8VihOl8lbQH7mYXFUup8m8ZbA1xwKeTTQq95k7jIrngkrkrdE56Lw+rKPiOacu8NkN/SvPtYYXwetXAq+BitsS/7uRgo8gRghOunFUSI5IATmqPW9s6v/d13nDzJHrC8iDjovmOxXwV8dFWQaK+0GBNsNBbYF/FynydzRwLfXZ4HP5rKFAm8E0awhSXqNHfeC6gcDVyPHDdfAL9pVc0xke0FPyPRkkg8EzPltH3Us00GY+G/SZCF4+NyhLTYHvMsXYjIz7hs//Aejv+oylGAEA","debug_symbols":"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","file_map":{"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"62":{"source":"use elgamal::{add_ciphertexts, decrypt, embed_message, encrypt, field_to_point, public_key};\nuse std::embedded_curve_ops::EmbeddedCurvePoint;\n\ntype CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\npub struct PtXY {\n    x: Field,\n    y: Field,\n}\n\ntype CipherTextXY = (PtXY, PtXY);\n\npub fn xy_to_pt(pt: PtXY) -> EmbeddedCurvePoint {\n    let PtXY { x, y } = pt;\n    let is_infinite = (x == 0) & (y == 0);\n    EmbeddedCurvePoint { x, y, is_infinite }\n}\n\npub fn pt_to_xy(pt: EmbeddedCurvePoint) -> PtXY {\n    let EmbeddedCurvePoint { x, y, is_infinite } = pt;\n    if is_infinite {\n        PtXY { x: 0, y: 0 }\n    } else {\n        PtXY { x, y }\n    }\n}\n\npub fn ctxy_to_ct(ct: CipherTextXY) -> CipherText {\n    (xy_to_pt(ct.0), xy_to_pt(ct.1))\n}\n\npub fn ct_to_ctxy(ct: CipherText) -> CipherTextXY {\n    (pt_to_xy(ct.0), pt_to_xy(ct.1))\n}\n\npub struct Sender {\n    priv_key: Field,\n    bal: u32,\n    amt: u32,\n    rnd: Field,\n}\n\npub struct UserPubParams {\n    pub_key: PtXY,\n    bal_ct: CipherTextXY,\n}\n\nfn main(\n    _s: Sender,\n    s: pub UserPubParams,\n    r: pub UserPubParams,\n) -> pub (CipherTextXY, CipherTextXY) {\n    // Check balance is sufficient\n    assert(_s.bal >= _s.amt);\n    let bal_pt = embed_message(_s.bal as Field);\n\n    // Set up keys\n    let pub_key = public_key(_s.priv_key);\n\n    assert((s.pub_key.x == pub_key.x) & (s.pub_key.y == pub_key.y));\n\n    // check balance matches the ciphertext\n    let s_bal_ct = ctxy_to_ct(s.bal_ct);\n    let balance_pt = decrypt(s_bal_ct, _s.priv_key);\n    assert((balance_pt.x == bal_pt.x) & (balance_pt.y == bal_pt.y));\n\n    // remove amount from balance\n    let sender_balance = encrypt(pub_key, (_s.bal - _s.amt) as Field, _s.rnd);\n\n    let r_pk = xy_to_pt(r.pub_key);\n    let rec_amt = encrypt(r_pk, (_s.amt) as Field, _s.rnd);\n\n    let r_bal_ct = ctxy_to_ct(r.bal_ct);\n    let new_rec_bal_ct = add_ciphertexts(rec_amt, r_bal_ct);\n\n    (ct_to_ctxy(sender_balance), ct_to_ctxy(new_rec_bal_ct))\n}\n\n#[test]\nfn test_main() {\n    let _s = Sender {\n        priv_key: 0x04d73359c9166e49aafaf9a4852eaa4dceb2c26878196b10e9048004ff5cc20c,\n        bal: 0xffff,\n        amt: 0x1234,\n        rnd: 0x030cffca80ca4344e54e436fc5a03ae8e884b8f3edcb780702599e1951e8aa62,\n    };\n    let s_pk = public_key(_s.priv_key);\n    let sender_bal_ct = encrypt(s_pk, _s.bal as Field, _s.rnd);\n\n    let s = UserPubParams { pub_key: pt_to_xy(s_pk), bal_ct: ct_to_ctxy(sender_bal_ct) };\n\n    let _r_priv_key = 0x208196b10e9048004ff5cc204d73359c9166e49aafaf9a4852eaa4dceb2c2687;\n    let _r_bal: u32 = 0x1000;\n    let r_pk = public_key(_r_priv_key);\n    let r_bal_ct = ct_to_ctxy(encrypt(r_pk, _r_bal as Field, _s.rnd));\n    let r = UserPubParams { pub_key: pt_to_xy(r_pk), bal_ct: r_bal_ct };\n\n    let (s_bal, r_bal) = main(_s, s, r);\n\n    let s_expected_bal = field_to_point((_s.bal - _s.amt) as Field);\n    let s_updated_bal = decrypt(ctxy_to_ct(s_bal), _s.priv_key);\n\n    assert(s_expected_bal.x == s_updated_bal.x);\n    assert(s_expected_bal.y == s_updated_bal.y);\n\n    let r_expected_bal = field_to_point((_r_bal + _s.amt) as Field);\n    let r_updated_bal = decrypt(ctxy_to_ct(r_bal), _r_priv_key);\n\n    assert(r_expected_bal.x == r_updated_bal.x);\n    assert(r_expected_bal.y == r_updated_bal.y);\n}\n","path":"/Users/shramee/www/starknet/confidential-erc20/circuits/transfer/src/main.nr"},"63":{"source":"// ElGamal Cryptosystem Implementation\n//\n// This library implements the elliptic curve variant of the ElGamal cryptosystem as described\n// in the accompanying documentation. It provides functions for key generation, message embedding,\n// encryption and decryption with the following features:\n//\n// - Curve-agnostic implementation: No elliptic curve parameters are hardcoded in this library\n// - Works with any curve supported by the underlying proving system\n// - Preserves the additive homomorphic property described in Section 2.4\n// - Implements the message embedding approach from Section 2.5\n//\n// The implementation follows the mathematical formulation in the documentation with\n// function signatures designed to be simple and composable.\n\npub mod tests;\n\nuse std::embedded_curve_ops::{\n    embedded_curve_add, EmbeddedCurvePoint, EmbeddedCurveScalar, fixed_base_scalar_mul,\n    multi_scalar_mul,\n};\n\n// #region utils\n\npub type CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\n/// Field to point, x . G\npub fn field_to_point(x: Field) -> EmbeddedCurvePoint {\n    fixed_base_scalar_mul(EmbeddedCurveScalar::from_field(x))\n}\n\n// #endregion utils\n\n/// Implements key generation as in Section 2.1\n/// Computes H = x . G (Equation 2.1)\npub fn public_key(priv_key: Field) -> EmbeddedCurvePoint {\n    field_to_point(priv_key)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt(pub_key: EmbeddedCurvePoint, message: Field, randomness: Field) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    encrypt_pt(pub_key, field_to_point(message), randomness)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt_pt(\n    pub_key: EmbeddedCurvePoint,\n    embedded_message: EmbeddedCurvePoint,\n    randomness: Field,\n) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    let c1 = field_to_point(randomness);\n    let c2 = embedded_curve_add(\n        embedded_message,\n        multi_scalar_mul([pub_key], [EmbeddedCurveScalar::from_field(randomness)]),\n    );\n    (c1, c2)\n}\n\n/// Decryption as per Section 2.3\n/// Computes C_2 - x . C_1 = P_m\npub fn decrypt(ct: CipherText, priv_key: Field) -> EmbeddedCurvePoint {\n    let x = EmbeddedCurveScalar::from_field(priv_key);\n    let diff = multi_scalar_mul([ct.0], [x]);\n    embedded_curve_add(ct.1, -diff)\n}\n\n/// Additively homomorphic property as in Section 2.4\n/// Computes (A_1 + B_1, A_2 + B_2)\npub fn add_ciphertexts(a: CipherText, b: CipherText) -> CipherText {\n    (embedded_curve_add(a.0, b.0), embedded_curve_add(a.1, b.1))\n}\n\n/// Message embedding function f(m) = m . G from Section 2.5\n/// Fails if message is over 40 bits\npub fn embed_message(m: Field) -> EmbeddedCurvePoint {\n    m.assert_max_bit_size::<40>();\n    field_to_point(m)\n}\n\n/// Verifies that a point is the correct embedding of a message\n/// Implements the verification function from Section 2.5\npub fn verify_embedding(embedding: EmbeddedCurvePoint, m: Field) {\n    assert(embedding == field_to_point(m));\n}\n","path":"elgamal/lib.nr"}},"names":["main"],"brillig_names":["decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]},"warnings":[]};