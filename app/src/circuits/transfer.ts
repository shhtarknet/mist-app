// Auto-generated file
export const transferWitness = new Uint8Array([
31,139,8,0,0,0,0,0,2,255,173,156,115,176,228,65,146,199,223,91,243,176,103,219,42,101,225,184,103,219,190,226,217,182,109,219,119,107,219,182,109,219,182,63,53,177,17,251,235,127,118,226,197,102,79,196,155,233,232,158,236,204,172,196,55,191,89,253,206,207,222,245,184,206,249,187,254,125,221,119,254,109,194,72,222,75,233,197,198,56,67,169,117,213,85,106,200,226,102,173,97,244,217,92,119,49,167,108,75,108,214,204,98,66,54,38,172,37,189,59,211,207,143,178,222,131,199,226,113,5,37,89,214,249,112,197,163,44,111,250,90,189,102,211,107,240,33,76,9,51,248,184,186,84,227,235,204,51,231,208,242,242,115,244,150,178,73,198,73,41,211,22,177,51,215,26,221,149,14,178,108,55,221,245,129,15,98,27,217,230,80,242,10,115,73,206,62,166,18,70,168,45,218,96,211,152,113,70,59,145,146,23,79,156,228,146,167,152,121,229,163,44,59,170,52,84,112,35,231,58,90,145,50,100,225,219,60,141,15,34,83,202,244,177,197,188,102,109,35,218,100,10,150,140,52,66,242,115,22,119,149,163,44,63,173,180,30,211,104,205,217,104,227,106,165,183,144,90,11,33,186,229,75,247,113,216,228,210,88,97,217,97,100,134,110,115,157,101,229,21,189,205,87,61,202,194,192,110,103,76,205,152,81,114,116,4,67,42,35,149,149,90,88,46,197,218,166,115,179,143,234,164,102,223,101,122,107,249,48,107,130,140,88,229,106,7,89,174,154,96,108,237,101,206,110,11,255,93,66,114,43,228,84,60,6,47,103,154,47,33,78,79,176,181,60,252,236,173,117,126,198,210,122,155,101,202,213,79,206,177,75,194,0,63,82,14,82,35,94,79,50,45,127,90,142,132,101,178,117,186,80,115,139,194,129,15,83,67,235,201,212,38,188,55,187,25,174,113,148,229,36,205,134,81,198,241,86,34,126,216,220,57,177,208,123,40,179,197,57,67,117,46,154,149,114,143,173,230,60,155,153,184,47,151,17,36,214,116,205,163,191,146,43,117,174,226,157,33,102,218,26,216,84,7,202,58,131,190,49,198,53,240,152,223,31,96,187,4,153,38,219,229,48,15,29,188,15,238,90,138,231,120,109,197,115,124,175,227,57,102,159,234,140,205,207,230,115,107,62,18,205,184,116,185,209,92,44,49,37,107,70,66,165,16,171,173,37,250,54,196,215,33,101,97,67,90,51,191,247,81,47,201,126,133,22,183,159,178,247,101,152,232,221,26,201,241,233,98,243,228,99,150,11,132,71,168,211,44,94,148,42,41,26,177,50,56,180,210,223,71,209,95,239,171,232,175,235,156,228,182,171,118,45,47,38,16,172,132,143,175,166,229,70,160,165,222,72,224,222,106,42,210,170,172,101,139,177,184,201,68,201,179,110,47,76,51,230,251,29,99,149,26,176,154,12,252,99,93,12,197,19,101,61,241,174,85,250,28,126,89,17,20,78,163,142,48,75,229,205,41,39,132,165,153,59,14,142,233,253,143,122,181,57,40,242,125,196,82,93,183,56,37,197,98,131,35,233,56,136,209,44,181,207,79,194,220,184,220,76,11,110,153,212,16,74,181,27,61,135,250,1,39,231,88,91,42,150,70,32,99,100,194,32,199,220,59,62,94,62,163,112,39,123,122,73,213,205,236,72,246,157,223,209,36,106,87,64,93,124,63,62,240,104,163,93,84,213,224,172,143,189,246,140,43,200,181,38,134,170,44,117,84,19,67,72,166,155,96,109,198,171,84,128,80,165,211,154,186,89,141,52,142,31,116,146,219,36,48,7,159,43,170,155,28,169,48,56,45,83,165,167,111,145,50,79,17,181,150,226,18,93,178,13,219,100,70,26,90,142,28,99,160,114,124,176,82,31,218,173,232,67,148,100,237,222,244,161,138,189,246,195,244,108,52,31,174,40,235,35,46,32,139,154,228,103,222,189,164,21,122,163,13,212,130,181,195,23,251,182,239,63,242,2,178,252,142,48,10,252,180,222,86,227,74,203,100,174,208,123,109,166,92,201,248,168,99,45,4,59,204,13,14,214,24,11,52,80,102,161,109,128,158,164,137,115,116,1,74,24,152,42,26,100,17,102,104,34,164,252,138,36,136,21,63,228,163,143,122,37,114,121,208,90,242,162,20,208,184,16,154,29,0,128,220,89,137,98,229,93,207,164,66,45,221,34,143,42,209,87,157,148,156,56,220,144,54,63,70,209,247,31,123,1,89,151,195,133,31,119,17,189,46,131,65,63,94,49,31,63,225,2,178,132,243,114,178,207,175,242,36,27,10,209,72,84,166,101,42,21,104,133,79,188,72,172,82,253,108,179,133,112,106,158,10,111,134,8,157,136,170,39,110,119,185,79,82,196,152,159,172,136,49,63,69,49,190,62,85,81,214,167,41,202,250,244,131,172,203,213,129,119,87,115,246,227,51,20,245,250,76,69,89,159,117,18,95,49,68,51,122,10,102,186,74,33,89,173,110,236,197,225,139,189,20,122,224,138,68,225,169,212,166,156,29,224,7,16,92,136,44,107,124,171,203,40,234,101,79,241,125,163,126,130,164,152,205,0,208,196,172,165,246,129,161,61,96,139,254,15,6,12,28,11,64,212,111,8,80,86,48,195,186,144,172,15,221,248,228,20,245,242,199,122,15,152,1,22,213,104,24,22,75,4,81,205,141,20,154,5,121,136,167,176,131,122,114,240,20,136,4,2,90,158,164,94,134,124,51,27,239,116,95,131,162,94,114,212,107,0,43,115,9,190,1,210,60,81,216,44,67,145,77,158,99,170,209,111,108,9,210,21,116,46,54,197,75,147,76,73,104,45,198,38,192,177,68,69,189,146,162,172,124,140,213,89,1,129,204,111,76,28,163,98,89,236,37,59,12,32,42,36,245,89,60,40,223,5,233,192,230,22,93,116,195,181,218,253,0,221,45,15,82,44,71,127,45,239,106,225,240,104,55,151,0,114,224,12,153,252,39,173,166,134,233,24,20,70,198,107,4,218,240,124,152,105,210,25,83,157,207,206,49,197,206,207,86,180,241,115,20,101,125,174,162,172,207,83,172,133,159,175,168,215,23,40,202,186,238,81,86,147,9,11,17,109,195,152,149,233,121,151,230,168,68,45,138,145,98,4,223,16,5,70,192,229,76,87,180,25,172,103,10,79,214,96,78,129,191,248,194,99,124,25,178,145,230,25,92,200,189,206,61,36,227,55,144,140,164,145,139,101,86,138,35,175,50,233,225,85,24,252,189,55,54,164,21,123,128,118,234,34,95,164,104,227,23,159,204,67,59,138,129,82,165,85,203,96,222,168,170,228,137,201,41,173,202,192,198,176,148,32,57,86,29,38,80,249,93,236,62,25,154,127,97,226,99,144,179,95,114,98,99,101,198,102,26,79,112,43,120,109,57,222,193,80,107,215,102,73,44,179,164,169,149,249,190,204,94,22,112,132,158,2,90,130,59,129,209,97,90,108,95,170,104,227,151,41,242,76,95,126,50,139,18,239,80,25,197,51,239,151,97,67,48,226,205,26,37,65,125,64,131,180,102,163,140,29,8,27,158,131,245,115,150,72,251,108,137,121,160,45,255,21,138,179,194,87,42,206,10,95,165,232,251,175,86,148,245,53,71,127,193,6,1,74,4,103,192,211,50,93,228,206,192,79,35,13,176,116,221,56,2,151,33,1,222,4,28,11,119,139,59,2,8,56,140,25,34,81,45,229,107,79,244,130,189,112,169,73,132,22,36,149,237,128,169,225,4,107,146,213,51,212,192,220,20,96,27,59,19,115,245,157,19,132,215,137,126,248,6,77,80,195,215,41,218,248,245,138,178,190,65,113,30,250,70,69,89,223,164,24,247,223,172,24,247,223,162,104,227,183,42,218,248,109,138,54,126,187,34,207,244,29,138,178,190,83,49,238,191,75,81,214,119,43,241,76,236,154,228,123,20,121,166,239,61,98,223,104,193,176,149,143,50,80,168,61,214,0,170,160,67,167,37,54,142,94,104,205,110,217,218,250,12,208,194,14,206,90,152,3,208,141,125,132,135,10,255,190,19,236,11,103,205,68,229,197,178,58,41,66,147,134,79,165,107,49,253,65,139,194,143,251,68,187,163,232,246,34,221,192,59,128,122,22,228,54,246,182,108,202,247,43,250,254,7,20,101,85,69,89,77,17,251,118,69,189,134,162,172,121,1,89,151,219,139,174,139,232,117,153,29,236,15,42,214,232,31,186,72,62,146,95,100,0,176,96,142,5,67,22,44,96,46,165,138,157,9,140,49,127,248,34,117,130,245,84,152,32,8,19,147,144,148,195,27,103,92,136,173,77,104,184,20,126,68,113,111,245,163,138,123,171,31,83,140,175,31,87,148,245,19,138,178,126,82,49,183,127,74,81,175,159,86,148,245,51,138,188,201,207,42,242,38,63,167,104,227,207,43,202,250,5,69,89,191,168,24,95,191,164,168,215,47,43,202,250,149,99,76,176,112,72,147,114,21,41,108,236,181,37,138,173,153,237,125,195,208,201,178,132,125,242,132,168,197,220,65,187,128,161,220,203,12,143,213,240,2,209,133,95,61,217,35,83,219,66,140,219,91,133,173,115,13,245,18,165,89,87,30,155,122,89,197,236,96,154,105,177,128,38,166,123,195,177,123,5,60,189,204,46,249,215,20,109,252,245,147,115,164,158,67,248,246,204,145,161,223,156,66,134,200,130,61,207,214,214,109,205,128,36,97,239,98,247,86,168,90,195,162,154,129,117,237,237,183,95,253,55,142,254,146,197,233,251,148,195,154,187,164,207,18,25,71,217,71,103,22,219,36,14,125,195,77,178,213,39,156,209,28,171,52,58,6,158,160,240,167,2,244,251,77,69,27,127,75,17,99,254,246,153,222,157,135,223,57,211,187,243,240,187,138,254,250,189,163,141,180,115,71,1,21,129,83,2,40,179,148,131,12,196,8,226,149,173,232,144,152,225,14,10,120,169,37,22,237,49,218,178,160,210,34,135,90,97,155,204,239,159,240,247,177,179,187,160,171,155,26,39,27,15,24,37,98,59,164,10,35,24,40,163,64,2,166,201,196,214,208,198,156,225,177,34,14,102,32,132,95,155,164,214,31,40,218,248,135,138,178,254,72,17,203,253,177,162,172,63,81,140,213,63,85,140,213,63,83,180,241,207,21,109,252,11,69,27,255,82,49,190,254,74,209,95,127,173,168,215,223,40,202,250,219,147,222,97,1,235,139,153,41,198,234,41,41,222,195,186,247,17,55,247,211,165,55,3,209,61,224,134,216,224,70,211,10,51,66,173,108,32,40,220,13,10,62,252,157,162,94,127,127,218,59,224,163,40,124,118,248,50,230,188,116,133,139,165,0,96,147,10,233,179,53,217,6,94,118,91,227,141,12,45,141,95,234,136,128,204,1,55,251,15,138,122,253,227,153,222,221,225,127,82,212,235,159,21,101,253,139,18,103,197,60,223,255,85,145,179,250,183,99,172,118,47,37,130,92,88,0,5,176,12,59,153,105,58,24,6,36,87,65,14,109,216,125,235,147,200,241,190,176,144,234,222,118,32,198,100,120,46,12,204,238,223,143,178,28,205,145,72,15,217,46,211,172,205,140,193,141,176,118,172,253,13,202,36,223,217,250,116,89,66,54,136,39,33,92,94,21,13,24,191,41,70,235,63,20,125,255,159,138,178,254,75,81,214,127,43,206,29,255,163,168,215,255,42,202,250,63,69,89,255,127,210,31,217,198,122,22,151,182,7,138,22,222,202,27,249,66,163,192,220,140,74,101,221,23,76,198,74,190,10,235,92,0,157,79,251,11,17,21,111,90,31,226,245,142,122,237,27,209,212,183,14,63,198,90,177,250,180,39,157,58,54,222,7,90,59,80,182,5,255,209,112,119,143,116,48,56,96,57,169,136,177,139,210,185,174,175,104,227,13,20,101,221,80,81,214,141,20,99,245,198,138,122,221,68,81,214,77,143,241,5,73,202,254,145,118,140,53,49,176,54,118,216,194,206,136,205,121,113,252,224,69,88,23,102,174,60,102,155,70,28,219,164,192,156,181,39,69,162,232,102,71,189,186,152,125,53,154,168,201,112,166,204,222,192,175,186,191,79,96,129,101,178,191,112,224,246,60,233,233,248,172,151,40,166,123,110,132,200,103,206,52,165,202,205,21,109,188,197,41,207,84,43,77,51,85,3,45,204,102,149,10,13,161,202,238,128,93,214,240,140,246,133,97,197,181,212,205,190,251,200,182,181,199,205,182,194,37,11,73,97,110,121,148,101,32,134,3,36,102,153,185,176,92,19,33,57,106,45,163,145,125,131,72,153,198,50,73,133,26,199,254,82,70,202,115,223,165,128,163,134,214,42,181,217,91,41,218,120,107,197,158,118,155,19,222,55,133,149,242,96,103,231,214,48,155,17,200,201,46,204,218,95,6,233,166,67,216,18,2,80,226,38,179,119,129,42,153,3,130,152,249,208,36,78,223,222,246,100,87,206,2,112,241,98,130,202,155,99,194,40,44,208,252,190,9,6,246,38,103,80,26,159,133,125,105,205,181,185,4,151,165,230,160,135,55,213,215,243,237,20,253,117,251,19,27,247,197,194,108,162,99,255,30,130,72,106,117,7,168,109,172,48,33,109,122,163,103,115,120,142,200,9,123,14,241,88,104,216,8,68,235,76,172,249,14,39,49,49,88,210,195,126,15,75,45,96,213,202,73,80,163,89,182,82,4,26,116,61,172,119,159,11,210,104,64,49,1,148,161,42,211,0,33,172,220,25,121,252,29,21,109,188,147,162,172,59,43,206,48,119,81,148,117,87,197,88,189,155,98,172,222,93,209,198,123,40,218,120,79,69,27,239,165,24,95,247,86,244,215,125,20,245,186,175,162,172,251,157,233,221,105,190,191,162,94,15,56,211,187,211,252,64,69,189,30,116,148,37,13,171,179,223,183,18,45,8,164,80,170,217,15,241,233,117,12,160,108,219,43,223,10,118,93,172,135,88,35,214,125,101,177,175,198,160,69,64,231,244,96,69,189,30,114,148,213,24,242,98,220,12,6,141,223,83,218,233,25,115,64,144,174,66,102,213,220,70,11,116,225,196,226,33,111,36,205,114,0,148,1,183,90,55,73,82,30,170,168,215,195,20,101,61,92,81,214,35,20,115,251,145,138,122,61,74,81,214,163,21,109,124,140,222,222,189,60,86,209,198,199,41,222,7,120,188,226,125,128,39,40,218,248,196,51,189,239,158,62,233,76,239,187,167,79,86,180,241,41,138,177,250,84,69,189,158,166,168,215,211,21,207,241,25,138,231,248,76,69,27,159,165,104,227,179,21,109,124,142,98,76,60,87,209,95,207,83,212,235,249,138,178,94,112,114,142,213,22,182,92,9,168,99,109,74,56,220,3,191,77,75,139,186,10,180,217,85,116,88,104,59,103,210,2,111,148,212,86,101,20,5,220,7,80,217,11,143,248,222,7,160,34,180,195,26,62,48,34,72,103,133,191,246,21,114,1,174,172,50,129,80,165,68,207,210,109,10,148,223,62,198,201,188,202,0,224,3,91,153,23,41,218,248,226,211,157,180,1,243,214,222,22,145,6,150,179,169,103,118,124,140,214,108,147,141,219,156,145,45,174,8,140,26,150,22,39,240,155,130,122,168,25,196,245,151,156,240,76,53,143,224,114,69,107,2,49,48,166,243,214,117,105,10,159,14,224,103,8,117,252,100,214,244,76,67,193,141,100,33,122,196,192,143,68,218,215,75,21,109,124,153,226,156,246,114,197,57,237,21,138,54,190,242,76,239,119,32,188,234,76,239,119,32,188,90,209,198,215,40,158,227,107,21,245,122,221,81,214,104,11,134,146,117,53,100,99,52,61,49,136,204,18,86,111,109,121,170,49,212,126,36,27,202,48,151,22,172,208,147,16,91,115,38,70,186,201,170,160,191,254,24,95,205,174,108,60,61,163,249,26,33,179,193,109,84,26,88,65,198,58,152,174,144,22,63,134,99,69,197,65,11,60,21,189,3,86,212,36,128,153,25,242,6,69,27,223,168,40,235,77,138,189,227,205,138,178,222,162,152,67,111,85,204,161,183,41,218,248,118,69,27,207,206,245,108,60,63,215,139,175,43,232,201,178,87,84,212,235,74,138,178,174,172,104,227,85,206,245,238,250,92,245,92,239,174,207,213,20,109,188,250,185,30,38,191,198,185,30,38,191,166,162,141,215,58,215,203,237,107,43,230,182,83,140,123,127,174,135,1,130,162,94,114,174,135,11,223,1,136,160,231,105,108,81,0,0
]);

export const transferVK = new Uint8Array([
0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,1,21,222,4,6,158,158,187,47,99,51,68,108,33,164,88,197,210,111,97,3,59,1,125,139,93,220,15,213,89,85,235,107,15,208,80,215,222,92,67,50,115,134,94,22,92,92,202,245,123,18,21,5,121,100,181,42,113,100,1,62,233,207,121,196,13,84,149,78,155,218,214,191,42,64,163,184,187,101,44,86,91,217,77,30,203,96,185,191,115,55,96,43,72,23,63,183,37,48,40,99,88,78,105,173,208,73,46,227,12,30,178,28,53,163,16,125,131,220,6,189,25,83,179,202,223,167,189,1,5,3,230,92,113,109,189,217,48,142,195,90,236,188,170,98,139,178,40,170,20,183,135,125,23,231,63,243,67,175,82,196,31,170,125,9,161,32,61,194,115,114,41,234,140,186,243,251,122,226,181,45,137,142,251,160,44,126,189,153,90,28,153,225,25,173,12,118,188,172,10,178,81,249,162,116,224,210,95,90,74,21,202,114,24,101,252,47,211,67,77,148,255,244,39,251,0,214,20,81,75,79,10,47,24,232,9,188,202,214,17,43,9,112,158,134,144,169,234,135,38,252,134,83,54,198,69,142,1,49,16,72,101,214,144,168,74,204,49,176,96,129,38,212,33,66,64,54,137,164,128,8,143,180,160,60,246,22,149,16,22,35,9,4,79,211,223,72,53,210,164,6,50,44,62,192,135,32,160,73,3,224,133,123,45,10,187,11,193,26,93,94,22,31,36,53,189,250,37,84,75,143,193,137,74,46,103,150,79,143,176,171,163,212,116,100,249,132,188,206,93,89,34,247,0,43,3,81,127,212,16,174,94,209,33,13,101,89,45,131,66,47,200,208,114,221,125,31,219,170,19,118,3,118,97,125,10,45,140,5,20,213,117,19,44,59,19,103,59,36,224,223,219,159,12,100,92,18,132,204,23,88,16,209,209,64,169,121,0,42,149,130,213,231,122,238,176,80,61,62,83,59,136,106,192,56,164,46,17,137,41,2,24,182,255,101,206,215,88,123,17,106,183,102,109,95,158,48,245,42,251,14,98,20,192,112,97,122,192,145,199,204,64,244,68,179,198,233,185,208,48,99,19,160,131,192,163,61,71,143,209,230,116,61,219,48,33,215,31,102,223,71,188,168,109,110,44,18,18,14,124,130,93,63,47,84,37,111,255,58,179,143,233,205,92,33,204,76,184,244,190,159,35,177,35,126,247,55,42,28,253,78,176,194,117,201,32,158,174,66,82,144,221,123,45,158,214,113,217,166,158,8,105,51,7,98,153,36,6,14,244,19,212,248,19,248,23,3,42,116,141,79,150,77,165,219,43,46,211,165,134,212,198,138,195,80,55,67,236,114,155,36,213,80,150,13,52,110,232,125,1,66,118,186,117,121,197,238,204,28,255,180,101,53,84,142,52,231,98,221,29,255,192,165,58,64,136,171,42,94,98,84,26,122,248,71,63,3,110,252,175,147,119,143,102,110,30,249,82,15,162,26,247,159,240,34,121,42,203,82,126,10,232,11,39,123,16,2,155,173,227,191,24,198,88,26,155,81,134,153,200,220,75,149,40,113,176,221,254,234,142,64,46,61,99,144,2,85,153,31,250,97,84,239,53,172,53,34,106,81,205,105,161,213,167,170,231,207,45,88,41,78,139,68,106,188,214,9,9,8,185,236,195,213,123,116,194,34,38,129,56,192,216,32,83,66,230,170,174,182,49,165,0,27,100,81,159,145,149,226,20,215,128,221,17,130,181,80,220,158,30,123,139,66,164,241,41,212,119,124,102,63,206,10,101,14,78,134,28,4,4,87,31,34,77,200,4,15,19,219,149,191,169,165,112,29,159,19,131,98,185,209,5,11,214,40,144,1,160,252,241,68,211,193,16,83,235,92,232,201,105,198,69,22,112,177,120,154,106,132,204,50,104,75,13,30,36,156,238,3,228,243,202,151,37,113,20,137,44,236,153,60,62,54,111,135,205,24,76,123,178,217,231,49,5,191,45,206,134,44,54,97,234,251,154,83,80,229,32,153,214,100,182,89,108,141,56,104,58,117,196,98,5,11,71,121,254,223,132,214,90,74,177,187,9,249,156,29,231,155,16,252,120,252,17,96,41,39,110,105,128,28,208,232,156,160,24,168,2,48,90,254,233,209,241,119,170,81,30,20,221,25,45,225,111,200,68,215,75,234,177,15,22,56,44,202,68,50,24,219,102,17,57,204,42,81,229,225,174,247,206,169,101,202,44,207,178,67,224,77,175,253,77,105,51,135,123,101,58,127,70,41,0,24,182,110,94,232,66,43,247,238,70,135,37,124,1,161,58,12,44,242,164,39,30,160,73,112,42,125,223,155,77,238,45,58,68,121,233,56,189,102,86,90,241,124,57,241,32,167,195,174,237,21,2,21,158,151,118,125,225,165,170,73,189,107,159,191,153,207,82,89,26,83,137,211,26,223,243,79,17,181,248,122,188,189,171,91,78,201,103,128,254,61,75,65,87,78,194,31,49,48,228,33,239,76,198,188,123,137,64,166,4,199,191,96,136,92,26,153,151,211,87,145,80,6,105,88,252,38,201,201,233,154,79,106,48,151,82,65,76,219,149,131,39,188,67,15,89,253,61,62,143,45,252,51,203,251,181,196,177,47,41,199,89,147,119,125,241,227,170,132,159,96,72,91,36,176,13,198,20,36,239,130,86,215,195,203,230,115,154,196,61,242,111,15,219,29,251,140,73,55,140,196,126,54,189,188,23,101,200,90,94,245,89,208,24,155,154,206,226,139,162,11,113,63,247,73,78,61,163,222,211,140,124,34,233,148,251,229,37,0,203,232,231,236,203,106,255,129,186,219,97,255,16,110,4,163,75,245,28,34,62,247,75,147,165,88,226,92,239,38,4,106,184,43,120,133,60,198,112,113,47,72,244,155,46,42,142,13,232,207,54,111,211,160,68,178,231,118,213,83,82,224,11,116,251,24,180,245,67,199,3,251,136,183,53,54,48,53,230,240,177,26,228,6,26,252,35,139,250,203,105,244,126,67,43,20,243,56,114,154,51,6,141,244,152,12,174,87,71,61,59,33,78,13,56,75,222,191,174,214,238,162,191,211,141,108,38,87,119,247,160,206,195,220,163,79,75,178,170,101,133,56,143,47,170,117,26,110,223,20,3,238,129,161,100,252,243,6,30,154,81,194,98,135,41,26,201,120,177,188,166,229,58,39,31,67,109,216,189,129,163,211,174,206,130,217,225,93,231,245,20,242,104,153,196,165,46,223,5,209,56,60,13,112,79,211,156,28,150,123,141,56,230,32,12,63,103,191,241,85,27,69,40,106,217,10,117,219,209,77,28,226,147,240,148,67,185,164,148,30,10,254,76,31,122,198,71,37,43,170,217,89,169,110,34,195,94,169,76,26,94,32,240,65,35,120,242,91,85,212,157,199,71,41,230,233,157,99,117,64,152,137,90,224,143,109,34,251,121,231,108,202,143,223,55,227,224,105,89,93,92,94,178,89,109,89,237,155,53,240,133,122,96,232,235,221,196,201,11,251,4,145,101,29,19,14,248,197,8,158,217,22,78,75,190,81,83,81,252,20,134,64,170,160,65,23,149,183,201,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,18,108,12,205,130,118,213,120,197,249,131,101,162,162,148,224,175,137,157,204,4,7,1,9,50,85,11,74,116,74,55,195,39,79,245,78,119,10,177,130,178,231,32,49,111,210,172,44,129,50,192,65,103,227,244,28,190,41,135,66,202,130,43,215
]);

export const transferProof = {
	publicInputs: ["0x1c0c2cd4806bd818498f4ef58836794d4ab61417de6e61ee198f7de25898e50e","0x11da5b03a2d88adb959d5f04f8e03455e59e36b68feabd6170930cd7d473ee92","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x2a0401ac9eec19b4f5472f48793db9f20b3946e3eaab8d3ecbbc3ec69bcbe9e5","0x03c577df3d7845a6f5875e1e1eb8604871ae24a8b650cfd0a4bc70ab55a682e4","0x0257eb9d702cfdf9ad18ce614cc49eb6ee4a2260f78c6ba88eb0e72789d456a7","0x1729aef9320951bfdb39ad3c520577666fdabe318ce1c545e081f2be92573342","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x2837ae6b3eb38bb368e52e4f2db26967710d7f4f46a1a963bd53ad59f1617fe8","0x1583f4b6db398339d0632fd7211c518ee6bf24db94ae0f0635a5760515d57e9c","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x112a1ff350478488e3a0b8bf9a7cbd47cba795ba5ff1901f160658ead721e0de","0x06b6fb5d211126493951c7e0df9ced3f15500d7dad4e9a6b67876587e8c39867","0x1bed9aacd69a2c1f4f769142c3e39ddb12593e789028b0b42f07b9a66bddc84a","0x15ab7915cc5dd8269868ccd05f386fbc60fc97a2e823dbab8d6074734500631d","0x01fcd442136cac858e278b50f3e5ada064470c04118ff33d74a5cb2cc0fbb9d6","0x02eb69c38a7b90863944938ef5e3b63ed0cd119e56271ba665e64ff8645d40cf"],
	proof: new Uint8Array([

]),
};

export const transferCircuit = {"program":{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":7310477518447938000,"abi":{"parameters":[{"name":"_s","type":{"kind":"struct","path":"Sender","fields":[{"name":"priv_key","type":{"kind":"field"}},{"name":"bal","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amt","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"rnd","type":{"kind":"field"}}]},"visibility":"private"},{"name":"s","type":{"kind":"struct","path":"UserPubParams","fields":[{"name":"pub_key","type":{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}}]},"visibility":"public"},{"name":"r","type":{"kind":"struct","path":"UserPubParams","fields":[{"name":"pub_key","type":{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}}]},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]},{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1dCZgcRRV+M7ubZJNsFkmAHBhCErnC0T3H7iyEEI4QEREFgSSSkNljkAQCJBBAEFYUUC65CRJguQLhCqAoolwiNwiCEUXkPgRBEImIkmC/3a7Mm945dtP/m60Jqe+rr3u7Jv+899c7qqqrMhHqKskIkRPpuudLlX/lOibwLOo/q/bvo9S9mGeT/asTrrgRgRV3GhKJtsZYmxt3006sqTmVdBLJ5oaUm3KTqWRrLBWPt6USqcam5qZGp8lNxNvcTLIpnvHBouHlcs1NHtVh2JLX4f51RLCDRvidIUs1RpDVAmmRv4ZYMR/LHQ6Ua4SSUUQCfRFWzuHAfq0OyFhMbidcybEhJ2SRjjHSv44yQhvH4Ib2wLNR/jNZqhQVDdvZI3uO1VICyx2F09GppmwmKFR6+l2l5JaYaKMcCeREOtHGFDC8jam7lwUND2ksJWR1SymzMVCuL+KMwZGcMm67MqejgFhITkf3gtNS3yU5HU3ZoDlA8EmEc7pVxfFiLRk3nmxrTDoN6USytSEea401Oq2JZMb1BI41JTxqMi2JVGsqFs/EGmMtq7DyOTKwmUSyirIJhO83oa5R16aUHW2VI4si9ZTBe6x/HWeENgYxlrpn0XGkn0UlVlhnGUu4LDqO1mXRQHHHkk4WHU8BwxtP+lm0F8qUzKLjgXJ9iXSyKOO2K3M6DoiF5HQz0smim9G6LBrMouxXJouO8+839+oWXt2Sii8moQPWlkA984iLwo5JLrbyrxMMIcbYuGFl4NkEKh0onXAlh8Q1dcS2TFfZinBOPYGwGbqKeja0Cyu35MBNxWOxxjh/LtXquIlWb1wSi7U2J5wWJ90Sa2tKuE2ZRCwRb2ltafYw027GyaRbmjKpLiwp79aaAjN4cKk3rPBbA410G6C+Whxukwc3LIfbEDbCofWeUEDvsLjbEjaDGefflrpnJvQrjmogD5uTToZD61wD1HkL6pvA74Qrbj/C2qwp22kKvJ0CrkO6wdoJVzr1lt4Awi2rsfUnHWNzNQV2FXBjlhsb6x2jyja2AaRjbHFNgeMKuAnLjY31TlBlG1st6RhbUlPgpAJug+XGxno3EN7YNGRl0Bjh5ymNYGOVq4z8Nw9VzGpbf3HfSLmvHAqtzKW82uTV7am8K3PbE9YeggWEnbMyt4N/nWgIMRGPG4IrcxNJf2VOkhh2ZW4Hwhn9ROqbzBJWbskBcmVuR02BGRy9Mrcj0EgnkW6WQnA4ifArc5NIN+MhnHSSAu5OhM14xvl3ou6ZCR1QBwB5SAGxJlPfBFQnXHGRckt5d9YUeGcF3F1INwg64Uqn3rsIgkG4OUMztLMC54FuE7B/dqXKdFak3FLe3TQF3k0BdwrZ7ays9xRBMAhX1VmBK4TQYLq7En/BEXlYOZEBaiphHb3Wt3Hm0qwv1Ir7XSh7xCwlnk8V92a6/GWv7uHVr/jyaSzQNhB+1LunEqcDCnC6p+C01Ge+6tW9vPo1JU65f6cocLo3YX0TLZ+W3l8H9g2Jgo5JewKxvgHWGb1/geMSsl/YJ/dWsJ19COszaB73APO4lxKP+1JljAsmArG+abkP8tgBmGddjjn7KNjOfmS3D05V4HFfBR73t5xHHncBX3W47H/7KfC4ieU81irwuL8Cj2NIJyfYfDA9CsQ6AMiffDPAuGOovOczkbpEhZzT/Ot0I7RRkhvaA8+mk/75zAOABjCt51glz2dOx+m41pzPnEZYBzNlBgUMbwbpn8/shTIlz2fOAMr1LZwx5EQxxm1X5nQ6EAvJ6YG94LQ35zMPpHXnM4O7wNivzArhdP9+pldnefUgKu8usINIZ0QF7uOcXWCz/WvaEGKMjRuCu8DSpL8LTJIYdhfYbMI5dZqwGbpcu8Bmk84usGZNgRk8OC8LK3wz0EhbgPpqcdhC+F1gLYSNcGi90wX0DovbStgMZpy/1bfzcs71qoC6yEzS5l8zRmijJDe0B55lSH+uVwU0gLaeY5Wc62UIm0nWhrleG2EdzJSDKWB4B5P+XK8XypSc6x0MlOvbOGPIiWKM267MaQaIheT0kF5w2pu53iG0bq4XnOuxX5m5Xsa/n+PVuV49lMo71zuUsCOhYAFh58z1DvOv8wwhxti4ITjXm0f6cz1JYti53mGEc+p5hM3Q5ZrrSQ6Qc73DNQVmcPRc73CgkR4B1FeLwyMIP9c7grARDq33vAJ6h8U9krAZzDj/kb6dBzM6/81BwmS2GnFv/kO0UllwvlcXePUoKm8WPIoqLwse7V8XGkJMB3FDMAsuJP0sKEkMmwWPJpwjLKTKzIKSA2QWPEZTYAZHZ8FjgEZ6LNmdBZnDYwmfBY8lu7PgwgJ6h8U9jnSy4HGkf+51JpCH+UCs71DfBFQnXHGRckt5j9cU+HgF3BNINwg64Uqn3icIgkG4qtv7ZgE5XQDE+i5VprMi5Zbynqgp8IkKuCeR3c7Kep8kCAbhqjrrTLIzmLYT1ujNeUXGNXPtWeL+BMqeV5wvni8Q92bq+D2vnuzV71P2TCNfZxbATgvsUp/5gVdP8eqpvu4aCe8kwo8uTyOsvaPl09L7h8C+IVGiYDnTQKwfgXUO6uqEKy77J7Jf2CdPU7Cd0wnrM2geTwbzeIoSj2eQTq5F++BCINaZlvsgx5v5QDyOOacr2M5ZZLcPMo8LwDyeocDj2VQZ+R/dP8gx74+VOXTClU7bOVOhb86xXG/ul3MU9D7Xcr059ixU0Ps8oN7lXIgZCJRbynu+psDnK+BeADQGLb0vEASDcMtqbINIx9gu1BT4QgXciyw3Ntb7ItIxNimvprFFgXJHhZwX+9dFRmjjPdzQHni2iPRPEESBxnRxz7FKniBYRFjDkVuM8pWefldfniC4mHQi4CUUMLxLSP8EQS+UKXmC4BKgXD/BGUPOrgDGbVfmdBEQC8nppb3gtDcnCC6ldScIgnsn2a/MO5RF/v1ir17m1cupvHsnLwfqmUdcFHbO3skr/GuHIcQYGzcE9052kP7eSUli2L2TVxDOqTsIm6HLtXdScoDcO3mlpsAMHlypCyv8lUAjvQqorxaHVxF+7+RVhI1waL07CugdFvdqwmYw4/xXU242I6CN8gLIRQpcXAPmInhyghdvTEYfJO6voZ6dnLjWq0u8eh2VN/tfR5WX/a/3r0sNIcYwuSGY/ZeSfvaXJIbN/tcTzuiXUmVmf8kBMvvfoCkwg6Oz/w1AI72R7M7+zOGNhM/+N5Ld2X9pAb3D4t5EOtn/JtI/ObEYyMO1QKybqW8CqhOuuEi5pby3aAp8iwLuMtINgk640qn3MkEwCFd1M/ZlQE6XALFupcp0VqTcUt7bNAW+TQH3drLbWVnv2wXBIFxVZ11MdgbTnxLW6M3pBsY1c+3LxP0yyp5uuFY8XyLuzdTxZ169w6s/p9yTE4sLYHcI7FKf+YVX7/TqL33dNRLe7YQfXd5FWHtHy6el96+AfUOiRMFydgCxfg3WOairE6647J/IfmGfvEvBdu4mrM+gebwDzOOdSjzeQzq5Fu2DS4FY91rugx3UlUdReBxz7lawnfvIbh9kHpeAebxHgcf7qTLyP7p/kGPe3yhz6IQrnbZzr0LfPGC53twvDyjo/VvL9e6g3NdlKL0fBOpdzoWYwUC5pbwPaQr8kALuw0Bj0NL7YUEwCLesxlZHOsb2iKbAjyjgPmq5sbHej1JlG9sQ0jG2xzQFfkwB93HLjY31fpwq29jqScfYntAU+AkF3CctNzbW+0nCG5uAhJ+mAI7R3DlAuX5HlemsSLmlvE9pCvyUAu7TZLezst5PC4JBuKrOChzjunOBcv2eKtNZkXJLeZ/RFPgZBdxnyW5nZb2fFQSDcFV3CswhO4PpH8D8aSyWPEr4VbTlhHV2s4uB+TS7EuaK+6cpu4thsHheJ+6X+9c/evU5r/6JcndIzCmAPU9gl/rMn736vFf/4uuukeifVeivF0jXTsPKp6X3X4F9Q6Kg387OA2K9CNYZ/daK/RPZL+yTLyjYzkuE9Rk0j8+BeXxeiceXSWeMgfbB5UCsVyz3Qc6hwB90cznmvKRgO6+S3T5Yp8Djywo8vkaVkf/R/YMc67+uzKETrnTazisKffOG5Xpzv7yhoPebluvNcWe5gt5vWa4372LX2BkSi9itN+9+uk9B7zhYb1OqwXIOAWL9DdgvQLtxkX1RzsVfIJ85i79vawr8tgLuO0Aj1dL7HUEwCFdFVj6ipBHoExUQ6O9X0DtZIYG+Hoj1d2C/AO3GTVZooAfymRPo39UU+F0F3PfI7kDPer8nCAbhFnV8J1yBJs9/0No/wpN9gd4e8T6t/YFTw+94g+SThE/eHxA28Jq3ouwn5i3n++L+Hcq+FR0inteL+w/86z+9+qFX/0W5BW2TH9Hnw6c1zvo8SPhdGcAzRO6DQH1XkI6vfFTAV1YIXyn1mX979WOv/seXT2MC+p6CDX1Cdtu4lt7/BfYNiYJ+e7kCiPU/sM7otzqcb5D9wj75iYLtfEpYn0Hz+CGYx4+VeFwJ5lHLBz8AYq2y3Ad5TAjMsy7HnE8VbOczstsH6xV4XKnAI1k+xjX5H90/yDWJiOVzV7adVQp9E7Vcb+4XlhGtd5XlenO+WqHQ39WW682/Gsq/oIlenzgXiHUeEKsmYvdYYiZ1/UoqCo9/YfcsBbvuF7F7LDFLgcezFXjsb3l84J1fbynEhzeBWG8BsQZYHh/4VA7wxJH7iofxqoJd11oeH+Yq8PiaAo8DLY8PPK7jMQ46PsjxInIMFhZrkOXxgcexyHdDPAf6TMGuB1seH/h9BfA9Y9cvYSrMq+osX4vgfPUi4ePOemS33nOV9P6C5Xrz/KpfBK/3+hWgd38FvYdarjePl2sV9B5WAXoPVNB7A8v15vHPYAW9N6wAvesU9N4IqDfLZvYhmqvhgsdHPEYfLNprvNrPq/2p63czeW8H/17mIP9zfKKT323V++1cOO9yDuJ4zLGJ/ZRtlvtvI//elP7+9Yqlo+8Y9Xp0hmhajZevra5IW32RtvWLtA0t0ja8SNvIIm37+9ddV74w9dbzTt1Ctk0r8u+mF2mbVaRtdpG2Q4u0HVakbX6RtqOKtF1XpO36Im03F2lbVqDN2PJ4/1rrX82Yn+2bbXuy/7cTrri1AheNn3ISjbWUW8Dyx80eLU1+DKYCvmPixm7tWfygLlzqKLvXjAL/huPLEMreryf+DZcpAjsSaNs9z/dq6uzZRNLgVyvgeyU2NI/81UI3Lru20+qyht/rBh8M8vkf7eNV5ZEjEpCpigr3OeV5FsmDEw18NlLg+6XeVdS9DwrJlo9HyvMsn2xVJWSrziNbEDdaRI9C3yNlMvzUUXeuI4G2fLJzvxq7qW7PbZ/sP3dClMZU9lBMlY9fQ93tQH5/TeDz4/y/Bwr5JReT11DOTGPazcTTmXQy3dqaaEmvH8AnwSfztKl/vy5vFS1x5bwSU46xefNWvjhRLG8F/ZGLyVXBnFYv8LjIvGWwNccCnk00KPeZO5QK5wKTW0ZRtkiea6hwXqgJfHZD/8rzoaEF8PoVwaujwv3N/26Ef1+bB4OAfOWTI5JHjkqP7WP8v/s6tpt5bG0eedCxy3ynAv7q2CXLQHE/KNBmOKjO8+8iBf6OBq7FPht8Lp/V5WkzmMZ3pbxGj9rAdQOBq5GHh+ng5+0rue4yLKCn5HsySAaDZ3y2hrqXaKDNfDboMxG8fG5Qlqo832WKsZlh4pnh8//O+l/bSRgBAA==","debug_symbols":"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","file_map":{"16":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"use elgamal::{add_ciphertexts, decrypt, embed_message, encrypt, field_to_point, public_key};\nuse std::embedded_curve_ops::EmbeddedCurvePoint;\n\ntype CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\npub struct PtXY {\n    x: Field,\n    y: Field,\n}\n\ntype CipherTextXY = (PtXY, PtXY);\n\npub fn xy_to_pt(pt: PtXY) -> EmbeddedCurvePoint {\n    let PtXY { x, y } = pt;\n    let is_infinite = (x == 0) & (y == 0);\n    EmbeddedCurvePoint { x, y, is_infinite }\n}\n\npub fn pt_to_xy(pt: EmbeddedCurvePoint) -> PtXY {\n    let EmbeddedCurvePoint { x, y, is_infinite } = pt;\n    if is_infinite {\n        PtXY { x: 0, y: 0 }\n    } else {\n        PtXY { x, y }\n    }\n}\n\npub fn ctxy_to_ct(ct: CipherTextXY) -> CipherText {\n    (xy_to_pt(ct.0), xy_to_pt(ct.1))\n}\n\npub fn ct_to_ctxy(ct: CipherText) -> CipherTextXY {\n    (pt_to_xy(ct.0), pt_to_xy(ct.1))\n}\n\npub struct Sender {\n    priv_key: Field,\n    bal: u32,\n    amt: u32,\n    rnd: Field,\n}\n\npub struct UserPubParams {\n    pub_key: PtXY,\n    bal_ct: CipherTextXY,\n}\n\nfn main(\n    _s: Sender,\n    s: pub UserPubParams,\n    r: pub UserPubParams,\n) -> pub (CipherTextXY, CipherTextXY) {\n    // Check balance is sufficient\n    assert(_s.bal >= _s.amt);\n    let bal_pt = embed_message(_s.bal as Field);\n\n    // Set up keys\n    let pub_key = public_key(_s.priv_key);\n\n    assert((s.pub_key.x == pub_key.x) & (s.pub_key.y == pub_key.y));\n\n    // check balance matches the ciphertext\n    let s_bal_ct = ctxy_to_ct(s.bal_ct);\n    let balance_pt = decrypt(s_bal_ct, _s.priv_key);\n    assert((balance_pt.x == bal_pt.x) & (balance_pt.y == bal_pt.y));\n\n    // remove amount from balance\n    let sender_balance = encrypt(pub_key, (_s.bal - _s.amt) as Field, _s.rnd);\n\n    let r_pk = xy_to_pt(r.pub_key);\n    let rec_amt = encrypt(r_pk, (_s.amt) as Field, _s.rnd);\n\n    let r_bal_ct = ctxy_to_ct(r.bal_ct);\n    let new_rec_bal_ct = add_ciphertexts(rec_amt, r_bal_ct);\n\n    (ct_to_ctxy(sender_balance), ct_to_ctxy(new_rec_bal_ct))\n}\n\n#[test]\nfn test_main() {\n    let _s = Sender {\n        priv_key: 0x04d73359c9166e49aafaf9a4852eaa4dceb2c26878196b10e9048004ff5cc20c,\n        bal: 0xffff,\n        amt: 0x1234,\n        rnd: 0x030cffca80ca4344e54e436fc5a03ae8e884b8f3edcb780702599e1951e8aa62,\n    };\n    let s_pk = public_key(_s.priv_key);\n    let sender_bal_ct = encrypt(s_pk, _s.bal as Field, _s.rnd);\n\n    let s = UserPubParams { pub_key: pt_to_xy(s_pk), bal_ct: ct_to_ctxy(sender_bal_ct) };\n\n    let _r_priv_key = 0x208196b10e9048004ff5cc204d73359c9166e49aafaf9a4852eaa4dceb2c2687;\n    let _r_bal: u32 = 0x1000;\n    let r_pk = public_key(_r_priv_key);\n    let r_bal_ct = ct_to_ctxy(encrypt(r_pk, _r_bal as Field, _s.rnd));\n    let r = UserPubParams { pub_key: pt_to_xy(r_pk), bal_ct: r_bal_ct };\n\n    let (s_bal, r_bal) = main(_s, s, r);\n\n    let s_expected_bal = field_to_point((_s.bal - _s.amt) as Field);\n    let s_updated_bal = decrypt(ctxy_to_ct(s_bal), _s.priv_key);\n\n    assert(s_expected_bal.x == s_updated_bal.x);\n    assert(s_expected_bal.y == s_updated_bal.y);\n\n    let r_expected_bal = field_to_point((_r_bal + _s.amt) as Field);\n    let r_updated_bal = decrypt(ctxy_to_ct(r_bal), _r_priv_key);\n\n    assert(r_expected_bal.x == r_updated_bal.x);\n    assert(r_expected_bal.y == r_updated_bal.y);\n}\n","path":"/Users/shramee/www/starknet/confidential-erc20/circuits/transfer/src/main.nr"},"62":{"source":"// ElGamal Cryptosystem Implementation\n//\n// This library implements the elliptic curve variant of the ElGamal cryptosystem as described\n// in the accompanying documentation. It provides functions for key generation, message embedding,\n// encryption and decryption with the following features:\n//\n// - Curve-agnostic implementation: No elliptic curve parameters are hardcoded in this library\n// - Works with any curve supported by the underlying proving system\n// - Preserves the additive homomorphic property described in Section 2.4\n// - Implements the message embedding approach from Section 2.5\n//\n// The implementation follows the mathematical formulation in the documentation with\n// function signatures designed to be simple and composable.\n\npub mod tests;\n\nuse std::embedded_curve_ops::{\n    embedded_curve_add, EmbeddedCurvePoint, EmbeddedCurveScalar, fixed_base_scalar_mul,\n    multi_scalar_mul,\n};\n\n// #region utils\n\npub type CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\n/// Field to point, x . G\npub fn field_to_point(x: Field) -> EmbeddedCurvePoint {\n    fixed_base_scalar_mul(EmbeddedCurveScalar::from_field(x))\n}\n\n// #endregion utils\n\n/// Implements key generation as in Section 2.1\n/// Computes H = x . G (Equation 2.1)\npub fn public_key(priv_key: Field) -> EmbeddedCurvePoint {\n    field_to_point(priv_key)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt(pub_key: EmbeddedCurvePoint, message: Field, randomness: Field) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    encrypt_pt(pub_key, field_to_point(message), randomness)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt_pt(\n    pub_key: EmbeddedCurvePoint,\n    embedded_message: EmbeddedCurvePoint,\n    randomness: Field,\n) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    let c1 = field_to_point(randomness);\n    let c2 = embedded_curve_add(\n        embedded_message,\n        multi_scalar_mul([pub_key], [EmbeddedCurveScalar::from_field(randomness)]),\n    );\n    (c1, c2)\n}\n\n/// Decryption as per Section 2.3\n/// Computes C_2 - x . C_1 = P_m\npub fn decrypt(ct: CipherText, priv_key: Field) -> EmbeddedCurvePoint {\n    let x = EmbeddedCurveScalar::from_field(priv_key);\n    let diff = multi_scalar_mul([ct.0], [x]);\n    embedded_curve_add(ct.1, -diff)\n}\n\n/// Additively homomorphic property as in Section 2.4\n/// Computes (A_1 + B_1, A_2 + B_2)\npub fn add_ciphertexts(a: CipherText, b: CipherText) -> CipherText {\n    (embedded_curve_add(a.0, b.0), embedded_curve_add(a.1, b.1))\n}\n\n/// Message embedding function f(m) = m . G from Section 2.5\n/// Fails if message is over 40 bits\npub fn embed_message(m: Field) -> EmbeddedCurvePoint {\n    m.assert_max_bit_size::<40>();\n    field_to_point(m)\n}\n\n/// Verifies that a point is the correct embedding of a message\n/// Implements the verification function from Section 2.5\npub fn verify_embedding(embedding: EmbeddedCurvePoint, m: Field) {\n    assert(embedding == field_to_point(m));\n}\n","path":"elgamal/lib.nr"}},"names":["main"],"brillig_names":["decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]},"warnings":[]};