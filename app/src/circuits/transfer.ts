// Auto-generated file
export const transferWitness = new Uint8Array([
31,139,8,0,0,0,0,0,2,255,173,156,115,148,110,75,146,197,171,218,182,109,35,21,137,97,143,237,153,198,56,57,182,109,219,182,109,155,109,219,182,109,252,242,118,175,213,231,251,235,173,90,29,245,222,122,239,222,117,235,198,23,145,25,177,99,199,142,115,234,252,236,189,95,241,252,189,191,190,207,123,254,111,194,72,222,75,233,197,198,56,67,169,117,213,85,106,200,226,102,173,97,244,217,92,119,49,167,108,75,108,214,204,98,66,54,38,172,37,189,59,211,207,143,182,222,135,175,197,215,229,148,108,89,231,195,229,143,182,188,233,107,245,154,77,175,193,135,48,37,204,224,227,234,82,141,175,51,207,156,67,203,203,207,209,91,202,38,25,39,165,76,91,196,206,92,107,116,87,56,216,178,221,116,215,7,103,16,219,200,54,135,146,87,152,75,114,246,49,149,48,66,109,209,6,155,198,140,51,218,137,149,188,248,141,147,92,242,20,51,175,120,180,101,71,149,134,11,110,228,92,71,43,82,134,44,206,54,79,227,131,200,148,50,125,108,49,175,89,219,136,54,153,66,36,35,141,144,252,156,197,93,233,104,203,79,43,173,199,52,90,115,54,218,184,90,233,45,164,214,66,136,110,249,210,125,28,54,185,52,86,88,118,24,153,161,219,92,103,89,121,69,111,243,149,143,182,8,176,219,25,83,51,102,148,28,29,201,144,202,72,101,165,22,150,75,177,182,233,220,236,163,58,169,217,119,153,222,90,62,204,154,32,35,86,185,202,193,150,171,38,24,91,123,153,179,219,194,95,151,144,220,10,57,21,79,192,203,153,230,75,136,211,147,108,45,15,63,123,107,157,255,198,210,122,155,101,202,85,79,238,177,75,34,0,63,82,14,82,35,167,158,100,90,254,105,57,146,150,201,214,233,66,205,45,10,23,62,76,13,173,39,83,155,240,189,217,205,112,181,163,45,39,105,54,130,50,142,111,37,227,135,205,157,27,11,189,135,50,91,156,51,84,231,162,89,41,247,216,106,206,179,153,201,241,229,50,130,196,154,174,126,60,175,228,74,157,171,120,103,200,153,182,6,49,213,129,179,206,224,111,140,113,13,78,204,239,15,176,93,130,76,147,237,114,132,135,15,222,7,119,13,197,123,188,166,226,61,94,235,120,143,217,167,58,99,243,179,249,220,154,143,100,51,71,186,220,104,46,150,152,146,53,35,225,82,136,213,214,18,125,27,226,235,144,178,136,33,173,153,175,125,244,75,178,95,161,197,125,78,217,251,50,76,244,110,141,228,248,116,177,121,242,49,203,5,210,35,212,105,22,127,40,85,82,52,98,101,112,105,165,95,71,241,188,174,171,120,94,215,59,169,109,87,237,90,94,76,32,89,73,31,95,77,203,141,68,75,189,81,192,189,213,84,164,85,89,203,22,99,57,38,19,37,207,186,79,97,154,49,175,127,204,85,48,96,53,25,156,143,117,49,20,79,150,245,196,119,173,210,231,240,203,138,224,112,26,117,132,89,42,223,156,114,194,88,154,185,115,192,49,221,224,232,87,155,3,144,239,35,150,234,186,229,80,82,44,54,56,138,142,139,24,205,130,125,126,146,230,198,229,102,90,112,203,164,134,81,208,110,244,28,234,13,79,238,177,182,84,44,141,64,198,200,164,65,142,185,119,206,120,249,140,195,157,234,233,37,85,55,179,163,216,119,125,71,147,192,174,128,187,156,253,184,209,49,70,187,64,213,224,172,143,189,246,204,81,80,107,77,12,168,44,117,84,19,67,72,166,155,96,109,230,84,65,128,80,165,211,154,186,89,141,50,142,55,62,169,109,10,152,139,207,21,215,77,142,32,12,135,150,65,233,233,91,4,230,1,81,107,1,151,232,146,109,196,38,51,210,208,114,228,26,3,200,113,19,165,62,180,91,209,77,149,108,237,222,116,51,197,94,123,115,189,24,205,45,20,109,221,242,2,182,192,36,63,243,238,37,173,208,27,109,0,11,214,78,95,226,219,103,127,171,11,216,242,59,195,0,248,105,189,173,198,149,150,169,92,161,247,218,12,92,201,184,245,17,11,225,14,115,147,131,53,198,130,13,148,89,104,27,176,39,105,226,28,93,0,8,131,83,69,131,45,210,12,79,132,146,95,145,2,177,226,135,220,230,232,87,162,150,7,173,37,47,160,128,198,133,209,236,32,0,212,206,74,128,149,119,61,83,10,181,116,139,61,80,162,175,58,129,156,56,220,144,54,111,171,120,246,183,187,128,173,203,226,133,183,191,136,95,151,193,65,239,160,88,143,119,188,128,45,225,190,156,236,251,171,252,38,27,128,104,36,144,105,153,10,2,173,112,167,139,228,42,232,103,155,45,164,83,243,32,188,25,34,116,34,80,79,220,238,114,119,86,228,152,119,81,228,152,119,85,204,175,187,41,218,186,187,162,173,123,28,207,43,123,231,146,223,120,146,135,177,12,64,46,59,72,14,125,193,212,238,168,116,91,86,112,193,67,21,26,216,67,147,55,11,122,187,242,187,243,235,158,122,126,185,123,41,198,120,111,69,91,230,36,87,99,136,102,244,20,204,116,21,80,90,173,110,30,71,34,137,189,148,198,112,148,4,136,85,112,46,103,7,145,130,80,23,178,212,26,223,234,178,138,126,185,211,89,161,129,197,176,50,230,60,200,56,249,111,193,81,248,184,135,184,193,37,224,147,1,168,135,212,250,77,39,184,84,51,172,11,201,250,208,141,79,94,209,175,112,236,29,16,35,40,86,141,134,193,179,68,216,217,220,172,163,89,88,140,120,154,4,12,42,7,15,216,36,216,212,242,0,196,50,212,174,217,220,169,251,42,138,126,197,163,95,3,138,154,75,240,13,194,231,233,162,205,50,96,217,228,185,166,26,253,230,169,176,102,193,231,98,83,188,52,21,149,132,215,98,108,130,104,75,82,244,43,43,246,161,162,216,135,222,79,177,15,189,191,98,31,250,0,197,62,244,129,138,247,248,65,71,156,152,21,50,207,28,206,228,56,42,89,21,123,201,142,228,161,34,37,245,89,60,211,154,11,210,25,127,90,116,209,13,215,106,247,3,150,190,60,140,255,131,143,185,186,188,171,133,194,225,186,46,13,58,129,250,65,193,153,92,85,13,211,49,240,141,76,198,82,228,195,243,97,166,73,71,110,112,30,36,71,141,152,247,81,140,241,67,20,109,125,168,162,173,15,83,236,105,31,174,216,211,62,66,49,198,143,84,180,245,81,199,252,18,35,210,35,99,45,138,135,97,206,44,195,49,219,194,177,104,88,76,147,205,200,40,190,210,209,224,254,5,110,46,98,163,55,117,185,178,89,255,250,232,227,217,83,113,13,10,134,254,149,145,68,102,182,125,110,93,106,208,100,250,10,40,86,157,12,174,20,54,104,59,100,128,96,166,14,62,176,49,215,248,218,63,70,49,198,143,61,193,251,193,96,15,163,76,105,139,105,129,122,156,54,23,89,21,148,65,12,77,182,80,138,153,110,212,2,221,115,142,84,57,12,98,118,252,141,98,205,199,29,253,98,8,26,147,249,189,36,64,4,50,192,137,209,68,87,116,12,62,38,208,40,92,65,97,8,3,145,44,37,3,25,64,179,177,211,155,194,196,29,114,252,120,197,24,63,65,81,123,252,196,19,125,2,178,128,188,85,60,26,80,25,54,4,35,222,44,66,70,14,67,26,107,205,70,25,116,159,178,71,54,230,191,156,37,66,131,90,98,70,108,203,127,146,226,252,248,201,138,243,227,167,40,158,253,167,42,218,250,180,227,121,161,16,66,46,133,195,64,187,167,211,231,142,8,4,33,10,40,183,221,56,176,140,134,141,150,198,108,67,170,114,28,129,169,40,140,25,34,156,79,202,167,159,248,133,162,229,82,147,136,84,76,46,91,42,46,112,131,53,201,234,25,185,104,110,89,184,13,31,60,250,145,239,220,32,90,95,244,195,55,164,163,26,62,67,49,198,251,42,218,186,159,34,55,185,191,162,173,7,40,230,253,103,42,230,253,103,41,198,248,217,138,49,126,142,98,140,159,171,168,61,126,158,162,173,207,87,204,251,170,104,171,41,105,143,236,31,165,43,106,143,227,200,39,162,133,15,87,62,202,32,171,247,88,67,231,202,75,79,11,14,50,122,129,69,184,69,7,239,51,176,42,112,236,49,132,121,14,223,232,193,158,245,200,60,225,209,236,49,152,140,189,88,214,105,69,232,238,104,236,116,45,166,120,164,114,118,38,204,193,116,194,48,123,145,110,208,162,36,148,5,33,32,222,150,77,89,138,103,255,5,138,182,190,80,209,214,23,41,242,232,47,86,228,209,95,162,24,227,151,42,218,250,178,11,216,186,172,189,251,151,95,196,175,203,216,241,127,133,34,222,127,229,69,106,155,90,165,154,160,24,115,44,20,216,0,167,102,228,173,196,153,224,43,243,171,46,130,57,172,63,195,132,141,152,152,132,2,31,222,56,227,66,108,109,34,243,166,240,213,138,123,209,175,81,220,139,126,173,98,126,125,157,162,173,175,87,180,245,13,138,56,241,141,138,56,241,77,138,49,126,179,162,173,111,81,196,137,111,85,196,137,111,83,196,137,111,87,196,137,239,80,196,137,239,84,212,229,190,75,81,151,251,110,197,252,250,30,69,91,223,171,104,235,251,20,113,226,251,21,113,226,7,20,99,252,65,69,91,63,116,180,69,73,80,188,9,41,96,63,16,84,161,194,179,140,200,244,132,58,94,141,184,253,96,137,41,101,249,113,233,217,43,230,169,230,179,180,154,152,141,202,24,63,124,60,251,198,233,87,64,96,33,102,109,69,11,173,45,71,116,46,203,34,104,166,74,210,199,30,80,137,234,222,7,205,202,194,131,69,107,235,213,242,175,175,229,71,20,99,252,209,83,91,52,99,218,109,150,197,199,49,64,226,15,72,128,78,129,86,85,215,92,51,50,43,32,173,85,58,60,234,147,55,137,239,64,156,100,241,209,141,252,216,209,86,77,116,110,79,149,49,40,154,189,136,155,172,226,6,54,253,86,224,226,96,151,99,246,19,105,76,10,236,201,88,254,244,144,89,52,207,106,247,67,51,233,199,21,99,252,9,197,25,230,39,207,244,158,179,250,169,51,189,231,172,126,90,241,188,126,230,24,35,208,205,134,173,139,160,89,50,136,73,230,139,5,126,101,85,199,6,108,72,204,109,203,210,41,183,100,16,10,34,176,193,238,62,6,130,71,205,52,63,123,162,251,198,206,142,19,166,103,106,156,108,70,81,44,59,40,157,42,217,30,128,100,104,34,106,5,242,175,181,49,103,116,210,200,1,35,56,72,70,39,157,249,231,20,99,252,121,69,91,191,160,216,183,127,81,209,214,47,41,230,234,47,43,230,234,175,40,198,248,171,138,49,254,154,98,140,191,174,152,95,191,161,120,94,191,169,232,215,111,41,218,250,237,147,29,152,101,128,91,240,227,24,171,7,82,188,119,57,246,17,183,182,200,130,167,25,22,41,3,237,177,219,20,77,163,233,66,197,115,167,111,218,86,242,12,191,163,232,215,239,158,246,14,244,78,128,207,14,95,6,45,121,63,54,154,162,133,184,130,144,62,91,147,109,224,143,221,246,120,179,76,27,161,5,117,68,8,235,64,251,255,61,69,191,126,255,76,239,125,133,63,80,244,235,15,21,109,253,145,146,38,202,236,214,255,88,81,19,253,147,99,174,118,47,37,38,195,176,212,67,146,189,243,155,166,79,36,138,80,42,204,161,13,187,159,52,39,115,188,47,149,237,158,183,29,138,49,25,148,10,195,145,251,211,163,45,71,115,36,211,67,134,108,55,107,33,230,200,40,213,185,0,47,195,153,228,59,91,197,46,75,168,6,129,153,163,134,172,138,7,140,90,128,209,250,51,197,179,255,115,69,91,127,161,104,235,47,21,103,152,191,82,156,97,254,90,49,198,191,81,180,245,183,138,90,199,223,41,106,29,127,175,216,211,254,65,81,235,248,71,69,173,227,159,20,53,209,127,86,212,68,255,69,49,191,254,85,209,214,191,41,218,250,119,69,156,248,15,69,156,248,79,197,24,255,75,209,214,127,43,226,196,255,40,226,196,255,42,226,196,255,41,226,196,255,43,226,196,3,21,239,241,65,39,243,80,94,197,175,216,108,15,144,84,88,76,222,74,7,176,129,7,163,194,164,247,131,199,99,37,143,168,53,27,3,188,79,251,165,219,10,203,177,62,196,7,31,253,218,111,221,193,103,17,111,96,58,208,242,20,114,47,117,228,128,14,102,166,67,85,177,204,251,12,88,123,38,114,32,86,220,82,25,102,236,130,42,175,135,40,198,248,80,69,91,15,83,180,245,112,69,204,121,132,34,230,60,82,49,198,71,41,218,122,244,241,188,164,205,208,16,150,208,132,34,195,213,158,162,134,132,253,180,62,137,90,164,3,16,91,1,29,226,56,46,38,64,100,161,253,36,95,158,137,116,180,242,152,35,143,14,251,13,149,186,135,113,246,10,169,249,234,97,206,35,208,126,81,46,247,133,48,179,197,40,126,162,239,237,39,29,231,170,146,135,247,12,106,43,74,127,172,98,140,143,59,169,199,70,197,32,25,35,141,50,75,176,208,40,94,28,157,220,165,253,42,107,99,170,108,21,145,119,141,134,206,150,18,83,3,181,104,242,28,181,14,160,226,241,199,24,1,78,212,51,7,124,20,168,191,143,222,112,126,128,40,146,5,85,216,102,245,14,29,26,197,21,177,173,140,210,36,248,212,13,218,231,204,17,237,226,9,138,49,62,81,113,30,122,210,9,103,74,97,165,60,134,52,183,40,34,159,114,78,118,33,46,238,151,151,187,233,144,157,16,28,247,103,114,203,251,153,207,201,49,90,180,69,147,58,10,253,147,143,126,149,9,18,241,135,9,117,125,142,25,237,88,40,65,251,109,3,116,27,230,69,156,246,211,132,253,98,132,107,115,9,157,45,53,231,182,132,223,125,207,79,81,60,175,167,158,196,184,95,94,201,38,58,183,76,8,34,169,213,253,6,55,250,123,118,97,122,146,94,118,85,56,18,35,108,13,203,19,161,161,75,70,235,76,172,249,105,71,91,8,82,179,193,28,135,101,14,158,153,216,34,120,191,117,252,69,176,193,194,24,251,92,205,212,177,140,65,100,97,101,150,6,211,229,202,136,239,217,63,93,49,198,103,40,218,122,166,34,7,120,150,162,173,103,43,230,234,115,20,115,245,185,138,49,62,79,49,198,231,43,198,248,2,197,252,122,161,226,121,189,72,209,175,23,43,218,122,201,153,222,123,115,47,85,244,235,101,103,122,239,205,189,92,209,175,87,28,109,73,35,234,236,237,254,137,3,108,12,11,80,157,29,34,52,64,58,160,197,109,143,65,172,71,217,124,177,7,104,161,178,209,244,125,53,68,58,18,58,167,87,42,250,245,170,163,173,134,78,16,227,86,191,105,241,236,85,23,61,99,14,150,107,171,80,89,53,55,248,38,93,56,181,56,242,102,229,171,24,111,133,189,92,221,2,123,121,181,162,95,175,81,180,245,90,69,91,175,83,172,237,215,43,250,245,6,69,91,111,84,140,241,77,122,154,85,121,179,98,140,111,81,212,210,222,170,168,165,189,77,49,198,183,159,233,253,172,148,119,156,233,253,172,148,119,42,198,120,118,174,151,171,231,122,182,204,229,20,253,186,252,185,222,61,94,225,92,239,30,175,168,24,227,149,20,99,188,178,98,140,87,81,204,137,171,42,158,215,213,20,253,186,186,162,173,107,28,207,62,116,7,85,224,26,13,162,67,67,196,147,61,126,74,47,185,47,169,145,125,123,99,252,100,199,94,242,178,178,127,12,154,172,6,195,97,228,111,8,22,215,60,250,53,156,65,123,44,124,223,20,126,37,157,37,190,244,58,65,88,54,226,12,255,208,202,253,162,28,168,109,93,92,124,108,53,107,43,31,181,183,24,221,181,20,99,188,246,249,201,207,55,65,117,51,251,133,167,182,246,219,245,113,191,93,183,39,238,189,244,133,27,73,110,8,18,203,201,224,91,106,182,211,76,210,53,230,253,106,106,29,114,157,243,227,251,86,104,166,144,61,95,151,157,168,194,108,138,215,162,69,212,82,36,73,12,45,173,253,51,1,160,206,35,50,174,15,230,111,154,76,155,179,108,93,182,212,235,42,198,120,189,115,189,57,237,250,231,122,115,218,13,20,99,188,225,185,222,207,236,186,209,185,222,207,236,186,177,98,140,55,81,188,199,155,42,250,117,179,147,218,110,203,20,150,61,189,237,151,212,123,98,16,65,208,94,189,181,229,65,99,214,4,113,132,92,134,185,244,112,78,113,236,117,100,206,196,72,135,148,217,251,205,143,249,213,44,146,183,167,103,32,211,198,44,155,183,49,68,161,10,50,214,161,116,133,180,248,15,96,50,22,23,45,232,84,244,142,136,174,152,32,102,102,200,45,20,99,188,165,162,173,91,41,246,142,91,43,218,186,141,98,13,221,86,177,134,110,167,24,227,237,21,99,188,131,98,140,119,84,204,175,59,41,158,215,157,21,253,186,139,162,173,187,42,198,120,183,115,189,231,68,239,126,174,247,156,232,61,20,99,188,167,34,39,191,151,34,39,191,183,98,140,70,177,182,173,98,109,223,87,49,239,239,119,194,87,113,33,66,161,91,218,43,189,204,26,52,141,189,69,219,47,217,179,205,143,44,216,43,140,150,222,75,14,111,186,186,2,155,190,146,237,166,229,213,220,95,209,175,7,156,228,125,54,110,137,165,116,56,144,208,4,110,155,27,228,190,33,179,56,202,104,246,94,107,240,101,63,96,26,42,100,33,146,34,105,203,167,104,163,190,188,11,72,228,62,125,28,92,0,0
]);

export const transferVK = new Uint8Array([
0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,37,4,21,189,122,28,174,113,158,205,73,176,138,52,76,249,170,243,55,126,123,33,204,218,242,200,78,29,130,0,197,197,28,178,119,234,223,142,233,23,133,189,22,212,107,21,150,44,81,155,251,252,126,153,171,97,175,234,192,60,86,101,93,165,33,39,233,9,4,33,105,69,242,100,195,127,15,189,28,22,229,230,191,0,225,7,230,29,27,135,138,107,61,117,35,175,26,10,53,23,151,110,133,163,211,33,150,244,215,212,76,130,18,249,192,8,67,255,119,75,234,68,133,75,230,8,143,36,27,59,109,179,18,56,159,16,97,61,141,213,128,22,180,165,42,248,14,218,48,177,139,28,29,21,96,58,140,199,204,252,31,76,109,231,250,64,98,123,8,54,99,89,107,172,138,146,26,101,239,199,217,111,230,74,157,41,225,30,168,214,87,184,24,73,47,85,100,59,93,233,197,146,85,90,121,207,136,135,196,76,148,66,189,4,204,133,6,179,208,107,2,30,191,145,15,255,179,102,128,154,244,125,85,88,72,226,50,38,181,53,113,202,86,206,97,234,166,64,246,83,12,26,60,63,39,54,40,22,55,207,0,76,2,137,92,28,165,64,42,139,28,154,236,169,115,215,104,199,100,206,154,200,63,52,35,3,65,193,8,110,206,223,211,11,42,49,42,52,189,219,47,143,98,12,198,199,106,170,177,69,20,252,228,224,38,229,79,167,68,104,12,182,127,210,196,240,75,157,142,190,219,23,71,65,91,11,135,78,255,200,236,222,1,81,254,182,39,247,167,244,241,4,8,96,180,175,254,40,21,124,99,140,112,230,235,137,210,50,61,139,152,177,238,188,77,126,211,243,134,45,123,96,0,102,13,57,46,150,169,75,145,73,94,42,105,92,63,221,154,1,24,171,74,67,241,245,201,93,219,85,65,229,206,76,10,194,20,27,21,219,7,200,102,100,28,188,23,215,130,242,39,215,238,231,176,177,123,49,151,17,65,204,188,181,37,165,179,238,17,124,125,202,32,82,111,62,127,151,109,210,67,96,206,214,41,75,28,160,184,225,205,200,193,41,180,230,153,99,132,170,4,17,25,33,145,137,171,14,195,145,216,86,176,69,10,125,245,206,145,238,64,232,42,52,239,111,146,42,214,102,249,73,48,31,13,19,243,229,186,106,64,181,232,222,112,181,126,18,240,8,0,39,7,166,247,201,9,168,72,202,229,167,156,126,20,44,252,174,45,78,168,216,224,128,122,13,16,126,179,169,27,193,222,47,229,179,170,28,226,146,151,17,208,116,42,104,37,125,80,221,216,245,66,212,48,20,39,63,105,175,226,40,147,151,178,98,69,98,105,196,169,212,142,28,228,244,105,174,7,200,163,24,110,244,59,143,197,85,22,81,37,220,251,38,254,73,72,168,126,143,70,14,48,255,193,95,217,204,206,190,17,215,107,123,215,178,112,201,236,30,250,62,188,56,120,140,62,89,24,201,104,82,185,247,169,208,70,155,162,68,224,166,14,76,141,101,145,234,10,36,123,1,8,155,75,81,180,9,180,55,108,127,56,123,205,2,183,108,246,197,138,94,199,21,13,53,43,189,29,36,233,250,218,154,2,212,124,170,213,87,99,183,206,7,23,143,17,151,237,186,228,4,105,203,13,207,30,68,149,234,67,2,46,110,22,95,139,245,168,76,155,25,53,115,95,97,9,4,147,83,138,251,51,229,118,89,208,74,29,46,79,207,48,2,156,85,187,211,107,110,179,146,88,174,108,41,20,105,63,0,97,245,191,138,219,8,180,64,188,82,8,103,34,219,215,40,113,56,219,5,101,227,9,150,115,49,82,149,184,190,169,252,54,66,175,186,76,24,89,52,125,255,10,223,101,18,254,164,164,56,219,146,133,101,240,140,172,188,68,227,101,82,55,61,10,128,113,194,245,241,59,186,180,230,22,132,15,202,243,30,46,118,211,253,56,66,77,234,38,245,208,55,89,47,167,192,252,40,34,132,45,215,11,240,231,112,28,136,124,1,204,150,231,219,211,253,100,118,179,203,249,104,30,163,179,121,23,168,67,144,118,152,152,111,147,100,20,174,17,0,212,143,32,100,239,196,229,211,60,64,141,238,66,215,85,140,249,72,223,170,220,245,63,78,122,196,44,69,134,81,40,202,88,51,15,103,142,147,217,247,136,174,219,87,146,157,252,61,125,160,12,127,77,2,128,61,22,239,195,159,182,94,36,66,164,165,130,10,134,133,0,122,85,32,71,117,86,20,1,74,123,147,24,252,9,145,237,153,7,140,20,179,12,61,8,127,220,40,65,25,140,58,75,203,130,138,249,109,77,18,81,135,83,103,23,153,88,119,124,250,196,81,155,242,235,28,35,145,58,2,88,170,183,195,51,139,214,140,116,51,31,217,178,163,181,127,67,139,184,70,0,180,30,19,17,135,28,105,14,23,9,36,140,138,44,120,94,253,6,69,0,198,118,156,59,48,178,174,229,183,58,63,82,252,86,32,111,232,101,82,14,154,19,139,79,165,54,213,246,241,162,87,252,239,212,143,192,160,171,89,93,78,122,219,211,116,170,200,232,243,24,128,39,227,40,81,16,129,139,249,2,105,146,248,36,119,181,81,254,13,69,142,45,199,228,126,200,128,244,39,181,54,249,114,10,21,128,96,252,236,80,55,230,180,186,16,211,199,116,240,126,250,246,69,230,145,38,78,222,38,30,117,119,98,17,249,10,138,156,4,145,225,3,36,64,48,206,129,8,65,124,26,122,30,103,137,103,224,114,13,81,41,17,167,132,101,55,185,48,37,201,32,28,43,101,11,155,123,16,100,2,32,252,89,144,150,38,25,20,13,57,126,146,86,161,156,79,144,110,63,21,67,111,76,34,45,93,126,224,133,121,112,103,203,81,196,163,188,87,164,199,46,21,223,174,254,108,28,215,63,58,36,21,153,66,156,235,117,190,63,91,230,99,27,204,168,23,27,162,62,91,203,8,3,87,176,228,98,116,9,137,52,137,94,15,70,82,236,111,208,102,198,224,107,84,223,13,163,70,53,225,161,201,234,39,102,171,222,30,41,204,93,119,87,44,69,21,218,95,116,194,55,105,22,48,167,99,95,208,142,141,145,220,113,233,2,97,186,108,43,43,206,197,50,70,117,106,162,45,155,177,224,50,58,236,164,132,163,33,85,206,20,200,174,153,116,237,219,64,213,232,111,15,33,15,89,110,119,129,247,26,89,83,215,0,253,198,163,37,17,184,149,49,29,144,131,150,169,87,124,166,185,164,238,219,185,251,50,146,57,79,36,28,231,252,183,230,195,148,61,242,45,222,107,159,215,133,215,182,57,38,95,57,60,144,20,184,244,102,174,178,236,84,127,34,46,41,31,235,251,241,115,57,66,156,57,241,8,45,198,82,18,1,253,96,170,79,2,148,123,78,20,33,197,23,114,13,25,106,92,96,15,189,209,72,9,105,33,3,51,155,85,237,33,150,186,145,87,101,124,21,76,228,117,131,219,100,81,22,139,209,177,73,140,115,144,55,180,186,136,92,96,59,247,219,3,254,28,243,64,31,22,227,190,172,137,138,188,82,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,36,94,131,99,219,235,68,43,164,168,223,95,2,84,153,70,212,37,158,254,83,20,216,90,69,134,222,98,167,236,252,68,46,101,127,203,139,93,163,63,148,158,50,86,52,66,151,185,226,46,142,54,196,67,109,70,75,237,149,2,71,60,58,48
]);

export const transferRawProof = new Uint8Array([
0,0,1,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,28,12,44,212,128,107,216,24,73,143,78,245,136,54,121,77,74,182,20,23,222,110,97,238,25,143,125,226,88,152,229,14,17,218,91,3,162,216,138,219,149,157,95,4,248,224,52,85,229,158,54,182,143,234,189,97,112,147,12,215,212,115,238,146,19,225,91,198,125,187,33,97,111,185,203,71,187,68,98,243,156,54,209,114,125,244,241,208,94,76,24,174,159,143,99,24,18,205,193,230,123,0,217,134,40,82,121,215,159,123,79,39,106,190,34,236,218,37,168,60,94,49,28,180,16,69,214,165,42,4,1,172,158,236,25,180,245,71,47,72,121,61,185,242,11,57,70,227,234,171,141,62,203,188,62,198,155,203,233,229,3,197,119,223,61,120,69,166,245,135,94,30,30,184,96,72,113,174,36,168,182,80,207,208,164,188,112,171,85,166,130,228,2,87,235,157,112,44,253,249,173,24,206,97,76,196,158,182,238,74,34,96,247,140,107,168,142,176,231,39,137,212,86,167,23,41,174,249,50,9,81,191,219,57,173,60,82,5,119,102,111,218,190,49,140,225,197,69,224,129,242,190,146,87,51,66,19,225,91,198,125,187,33,97,111,185,203,71,187,68,98,243,156,54,209,114,125,244,241,208,94,76,24,174,159,143,99,24,18,205,193,230,123,0,217,134,40,82,121,215,159,123,79,39,106,190,34,236,218,37,168,60,94,49,28,180,16,69,214,165,40,55,174,107,62,179,139,179,104,229,46,79,45,178,105,103,113,13,127,79,70,161,169,99,189,83,173,89,241,97,127,232,21,131,244,182,219,57,131,57,208,99,47,215,33,28,81,142,230,191,36,219,148,174,15,6,53,165,118,5,21,213,126,156,19,225,91,198,125,187,33,97,111,185,203,71,187,68,98,243,156,54,209,114,125,244,241,208,94,76,24,174,159,143,99,24,18,205,193,230,123,0,217,134,40,82,121,215,159,123,79,39,106,190,34,236,218,37,168,60,94,49,28,180,16,69,214,165,17,42,31,243,80,71,132,136,227,160,184,191,154,124,189,71,203,167,149,186,95,241,144,31,22,6,88,234,215,33,224,222,6,182,251,93,33,17,38,73,57,81,199,224,223,156,237,63,21,80,13,125,173,78,154,107,103,135,101,135,232,195,152,103,27,237,154,172,214,154,44,31,79,118,145,66,195,227,157,219,18,89,62,120,144,40,176,180,47,7,185,166,107,221,200,74,21,171,121,21,204,93,216,38,152,104,204,208,95,56,111,188,96,252,151,162,232,35,219,171,141,96,116,115,69,0,99,29,1,252,212,66,19,108,172,133,142,39,139,80,243,229,173,160,100,71,12,4,17,143,243,61,116,165,203,44,192,251,185,214,2,235,105,195,138,123,144,134,57,68,147,142,245,227,182,62,208,205,17,158,86,39,27,166,101,230,79,248,100,93,64,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,8,199,235,42,207,237,58,96,7,22,149,171,46,76,125,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,130,40,57,101,150,160,166,190,120,76,146,147,241,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,237,112,64,211,174,246,187,192,127,210,253,65,188,133,202,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,59,103,247,255,178,92,220,204,154,77,14,154,173,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,84,184,128,40,210,205,210,120,125,130,176,219,93,121,45,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,99,170,131,83,69,123,2,6,66,213,48,101,39,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,75,69,26,86,229,196,144,62,137,231,123,147,62,66,144,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,47,170,86,41,102,56,115,174,86,5,220,41,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,74,103,171,6,33,64,114,128,209,9,125,68,228,203,213,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,100,84,15,95,31,57,216,219,1,24,127,70,227,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,120,227,245,182,208,247,26,50,14,70,75,131,30,112,150,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,243,97,179,122,8,240,127,59,131,230,59,140,134,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,204,93,190,233,78,216,25,216,170,241,240,93,178,139,139,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,49,25,104,213,99,108,121,167,186,59,152,251,80,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,66,20,175,240,31,90,155,168,63,230,75,249,224,230,238,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,176,201,243,54,80,139,232,244,38,47,61,249,118,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,204,93,190,233,78,216,25,216,170,241,240,93,178,139,139,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,49,25,104,213,99,108,121,167,186,59,152,251,80,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,66,20,175,240,31,90,155,168,63,230,75,249,224,230,238,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,176,201,243,54,80,139,232,244,38,47,61,249,118,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,3,189,5,187,165,26,249,29,78,199,245,164,53,98,103,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,185,40,222,225,148,152,231,14,198,166,215,201,219,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,118,130,162,131,125,156,76,196,81,15,218,248,176,49,133,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,36,86,93,198,33,63,179,85,138,254,54,161,159,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,165,0,109,91,114,143,4,117,167,235,232,148,73,225,231,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,138,150,213,234,1,246,18,16,170,70,140,248,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,34,220,240,7,160,160,72,123,223,89,43,56,25,179,184,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,153,110,246,215,65,230,224,37,174,8,20,244,245,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,171,245,233,142,163,39,250,36,242,238,252,158,75,15,24,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,42,221,10,154,250,158,2,91,170,244,108,222,159,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,251,67,167,89,26,254,110,64,53,147,159,134,244,31,90,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,186,0,31,231,195,83,148,3,219,230,130,109,175,35,31,44,219,223,111,220,203,46,179,85,92,80,108,72,162,209,211,187,181,63,175,197,188,232,81,240,13,217,58,101,216,175,17,55,114,147,113,84,212,251,4,250,233,102,21,56,181,139,84,120,51,8,201,243,179,168,241,241,231,186,181,154,39,82,6,53,214,163,221,174,35,158,130,35,235,13,208,223,20,164,119,170,105,77,62,138,98,59,53,146,104,45,251,52,105,116,1,82,177,68,81,59,155,132,176,216,201,230,29,250,149,229,249,245,148,152,12,220,105,118,35,7,236,217,15,163,53,106,43,227,10,250,45,165,162,8,99,107,13,198,142,190,26,209,98,5,114,66,117,124,42,174,100,167,14,98,196,247,238,61,16,70,200,4,247,163,52,210,177,5,245,119,182,32,194,156,180,39,182,165,154,231,193,140,148,254,152,147,4,38,118,246,17,128,13,59,74,40,87,160,104,160,99,197,210,63,128,7,156,176,19,236,236,103,199,186,30,37,196,198,158,115,24,42,38,92,147,64,183,212,73,246,76,76,143,139,34,208,23,78,141,254,164,84,139,219,25,237,182,26,255,101,125,41,49,27,26,23,83,200,23,153,119,18,172,113,215,46,23,217,173,12,12,217,76,240,182,28,118,106,183,130,11,158,196,123,153,78,4,31,248,97,149,204,235,79,45,8,169,15,209,148,96,68,239,71,242,14,157,10,6,173,130,184,134,1,117,117,38,153,35,15,228,56,138,13,55,46,222,204,175,33,183,83,74,94,14,98,220,177,183,119,172,47,175,21,132,64,79,61,18,81,32,95,125,170,109,131,33,227,176,244,231,238,68,144,73,222,62,173,60,119,100,118,38,35,59,149,164,179,197,43,130,142,12,58,147,180,33,123,217,238,171,139,34,236,226,132,223,107,13,3,175,230,205,31,53,2,34,130,10,142,231,112,83,5,37,81,195,85,200,214,207,254,219,127,47,163,247,104,217,229,117,215,1,200,71,13,211,176,151,73,101,81,237,98,228,87,12,140,250,180,97,188,43,238,148,209,192,64,120,115,254,88,186,111,57,79,93,225,116,97,152,201,111,154,200,253,190,53,13,215,190,186,111,51,143,235,57,242,140,37,181,45,77,251,92,219,111,6,143,54,141,210,60,46,155,149,121,154,251,154,19,24,243,31,78,93,121,114,236,12,73,51,229,104,111,131,225,113,26,216,38,227,220,163,174,171,57,64,34,201,44,153,43,221,5,5,153,35,183,112,138,124,137,61,214,248,90,92,65,243,206,165,203,67,254,209,114,221,71,199,25,75,22,83,29,136,114,109,51,90,56,28,114,149,125,149,99,82,5,239,115,81,90,25,224,124,107,131,145,64,169,247,34,108,170,229,30,224,102,138,156,17,237,34,45,209,66,245,240,161,132,254,72,84,64,118,139,34,251,216,231,49,195,187,143,29,140,60,23,120,32,243,66,198,213,42,95,93,70,39,78,88,50,185,169,60,191,44,185,146,244,197,199,34,228,176,254,183,154,82,30,90,120,156,145,21,140,150,2,75,226,124,36,202,229,223,255,152,151,21,136,77,226,99,78,110,29,217,250,132,176,54,29,129,152,250,14,201,221,158,149,245,233,145,116,156,174,216,66,228,26,167,116,5,62,189,133,55,97,199,200,51,243,1,28,46,248,105,109,42,203,13,230,175,138,75,148,202,26,90,226,93,31,13,226,230,115,197,220,142,250,43,190,56,231,123,3,18,88,194,109,92,51,5,48,84,7,140,44,218,216,252,118,228,13,230,231,140,239,94,227,129,222,104,245,0,248,118,44,219,241,246,206,243,202,166,153,49,167,181,254,123,166,139,200,168,163,70,33,141,55,74,20,85,166,190,40,243,98,32,33,148,152,113,75,161,177,83,223,208,223,69,78,174,174,61,85,67,45,116,45,58,140,74,181,103,135,90,208,154,109,94,27,121,8,42,88,110,64,229,105,60,171,206,1,109,126,50,107,207,174,76,97,40,15,250,255,148,119,61,57,50,40,71,27,60,53,223,203,36,121,71,233,116,131,174,70,199,180,164,234,29,30,252,203,241,4,249,70,234,71,4,33,5,32,152,6,195,123,35,216,130,156,81,104,33,23,209,10,29,10,121,35,57,10,0,4,208,117,199,28,203,62,138,243,218,45,175,22,139,0,64,94,164,6,28,230,61,30,11,213,96,58,166,92,141,192,236,247,15,98,149,235,86,93,13,6,7,15,151,5,38,179,186,58,227,94,229,154,44,217,22,92,28,224,144,13,114,43,189,151,96,189,227,131,188,94,42,105,85,95,104,19,55,124,170,18,197,142,131,7,137,180,234,151,152,16,10,88,242,163,13,163,217,190,229,136,75,131,101,25,21,42,156,4,44,157,98,99,196,127,149,34,172,175,209,150,88,64,174,248,115,115,162,8,243,134,249,63,215,62,142,114,65,100,73,44,14,2,31,252,21,33,17,234,58,201,135,227,178,20,57,125,85,26,109,207,42,114,36,174,44,38,198,142,105,55,14,16,172,68,241,186,14,231,113,16,94,58,236,58,124,89,162,161,7,150,68,174,146,134,60,185,203,159,73,100,51,83,47,32,134,224,33,76,158,75,174,138,65,37,2,62,96,226,59,123,221,4,131,213,186,227,172,172,163,193,33,106,107,77,188,7,115,122,64,220,144,99,252,132,191,223,5,223,248,13,145,199,241,3,27,189,81,176,141,74,86,86,29,167,166,142,249,16,112,167,221,27,22,31,96,71,62,156,10,60,88,117,166,135,32,242,209,218,246,249,174,17,57,66,244,163,177,133,204,34,188,49,71,232,214,189,181,178,181,179,11,146,0,130,225,146,170,45,247,126,130,142,217,89,4,10,14,187,20,216,3,0,46,112,160,171,50,193,147,183,31,156,81,81,196,210,34,212,204,161,100,46,35,53,43,96,121,44,50,196,196,6,2,41,70,206,8,211,100,9,78,160,245,17,201,20,60,243,140,88,34,132,50,185,19,187,196,249,25,205,163,66,164,0,158,9,141,208,38,172,42,156,178,138,92,202,240,238,87,217,193,224,200,17,143,132,53,17,209,116,57,170,79,12,92,143,208,43,18,67,79,157,224,254,72,27,82,224,47,115,179,42,220,132,124,123,187,13,96,196,30,101,186,77,17,31,217,194,89,5,115,240,18,232,187,38,66,152,225,122,123,208,159,0,131,15,45,147,82,241,16,57,66,15,226,196,77,214,221,55,166,26,40,73,100,209,211,227,213,130,19,132,85,138,229,236,75,232,122,161,67,43,217,43,34,195,163,199,93,125,160,46,143,41,175,62,190,111,28,120,220,255,141,164,19,83,150,11,36,14,146,224,153,25,74,49,168,193,4,15,20,87,179,70,228,0,56,249,193,2,5,172,84,116,131,217,165,19,149,220,40,37,155,204,90,193,171,94,5,191,236,152,42,142,85,128,119,31,44,71,226,199,167,243,207,107,68,34,67,129,199,83,1,159,123,148,202,20,176,36,112,205,132,163,38,177,172,208,48,34,187,248,35,246,49,151,68,183,168,82,52,53,8,233,124,216,22,192,49,213,20,48,152,219,241,103,1,226,18,95,85,47,51,100,102,126,66,216,105,37,91,17,244,80,14,73,208,188,77,242,132,193,186,41,186,168,154,167,94,37,198,16,132,39,205,202,116,247,134,236,97,197,249,247,172,161,1,48,32,149,90,43,1,202,8,59,56,177,67,206,7,28,91,214,233,7,158,237,228,238,225,233,215,76,179,229,251,193,164,65,85,185,90,124,232,110,228,46,25,101,159,37,174,179,250,79,0,18,81,18,23,81,97,22,33,91,178,144,119,31,143,211,153,86,138,159,180,78,33,239,238,242,124,37,67,64,212,112,49,37,234,187,10,171,63,202,63,186,203,23,116,248,163,79,175,68,26,135,192,4,152,45,125,95,219,49,222,5,215,161,138,43,141,211,77,208,202,94,96,86,146,46,15,93,25,207,25,59,41,154,193,70,246,131,18,203,37,5,245,109,103,221,188,5,117,187,71,23,6,9,201,228,34,118,138,41,118,20,23,64,106,95,122,218,157,4,30,242,93,235,189,160,216,179,128,9,202,192,1,208,238,42,10,187,241,241,74,145,165,40,14,0,160,230,181,152,186,60,172,249,185,11,130,77,116,26,74,21,174,154,118,229,15,24,87,12,190,212,134,250,129,14,201,19,21,192,55,23,62,184,126,52,67,57,109,92,214,56,201,32,66,202,23,114,200,242,9,215,134,227,224,111,183,195,229,48,50,143,254,97,133,106,198,194,56,197,113,172,80,69,105,22,26,58,163,93,71,199,78,5,60,4,244,136,70,33,24,56,15,150,92,192,34,202,227,162,41,227,231,70,49,170,242,46,190,192,154,29,16,51,191,170,42,122,180,226,74,158,172,233,81,191,119,68,247,118,63,81,172,68,218,229,70,58,107,40,84,28,178,66,252,84,12,139,103,249,26,40,29,218,32,40,12,185,227,27,170,217,113,194,200,149,161,224,171,191,152,31,160,243,57,97,238,203,186,142,50,89,183,235,144,68,139,99,158,104,140,35,54,96,176,4,98,11,34,101,224,95,248,38,120,244,202,180,32,135,105,146,62,109,181,26,116,214,52,229,133,44,238,175,117,95,25,236,121,168,182,62,45,225,100,4,45,223,148,208,141,223,94,126,187,118,174,194,248,84,110,119,7,252,67,55,218,74,13,8,238,103,8,198,147,32,156,42,155,34,160,68,56,125,20,58,162,120,221,159,85,18,100,19,153,127,60,203,205,193,89,84,185,42,23,48,94,36,42,43,140,223,13,149,134,32,9,148,236,212,84,222,240,218,240,157,14,254,100,144,41,224,12,209,205,169,92,226,217,30,217,16,135,200,222,9,38,36,138,50,244,180,69,202,16,254,238,121,206,157,105,125,198,254,136,209,205,166,10,28,201,239,176,24,126,110,206,32,147,238,97,122,4,244,106,105,69,183,187,66,84,2,147,131,95,169,155,73,249,14,173,143,47,218,244,6,143,132,229,27,12,172,167,243,170,75,52,196,168,131,103,227,45,149,39,191,222,185,164,200,102,249,14,199,132,5,124,33,6,150,77,252,189,245,149,233,189,159,141,8,66,43,189,166,199,42,130,116,171,105,52,100,211,1,99,24,189,71,120,21,233,45,141,173,174,11,83,167,45,169,109,86,54,223,74,144,206,3,93,121,3,64,222,26,254,111,107,32,197,8,196,23,190,242,105,236,8,84,161,179,136,119,5,137,144,4,184,161,0,60,124,231,181,234,170,20,52,52,157,65,241,191,166,10,182,213,86,250,27,186,174,33,171,17,71,146,88,12,183,23,39,224,208,112,175,84,77,113,176,42,30,165,210,51,54,42,203,200,167,90,104,126,122,31,245,47,88,150,98,160,223,43,119,20,115,231,24,157,199,67,71,208,51,239,234,33,153,26,192,63,174,132,108,183,118,159,154,124,228,243,6,101,206,148,119,8,62,33,165,94,104,47,182,66,96,183,201,127,124,6,88,31,88,153,193,57,49,209,74,175,202,194,65,158,53,45,82,245,154,90,47,107,27,24,57,237,220,144,45,68,144,46,178,255,97,255,125,139,41,111,194,83,18,69,117,132,221,187,83,112,139,234,231,25,93,22,141,53,5,185,205,250,20,16,52,75,28,87,216,35,242,182,198,175,62,191,8,8,230,31,37,70,232,178,192,213,198,45,99,72,172,37,104,137,47,2,39,204,150,119,48,101,82,163,91,196,110,20,86,201,201,51,180,99,188,216,148,95,41,227,140,158,71,174,213,172,61,10,67,34,1,220,208,7,111,35,124,100,143,180,145,253,2,54,152,208,178,64,255,113,227,13,207,103,168,99,174,172,198,11,130,153,126,28,169,83,178,19,15,86,201,155,92,34,201,64,235,113,107,67,109,100,205,223,133,67,175,193,57,100,65,41,159,100,179,80,120,97,224,199,3,120,191,34,23,99,187,140,158,53,116,214,17,103,51,163,145,225,90,68,141,174,131,31,210,125,150,29,128,122,86,243,237,237,95,211,112,50,78,87,114,170,112,218,103,149,216,131,150,27,221,255,61,125,18,9,13,106,239,142,42,154,55,177,137,229,196,171,85,133,235,93,143,0,121,168,168,185,33,77,128,198,130,97,112,228,226,29,52,160,17,75,132,149,138,122,14,231,114,59,84,76,48,163,154,2,148,213,218,10,34,36,102,32,189,157,227,38,63,25,135,240,198,105,0,211,67,120,189,184,241,254,95,104,182,28,194,146,192,216,75,128,240,154,47,254,30,108,104,5,210,33,155,77,27,91,16,155,175,89,150,139,18,158,200,40,181,163,235,89,76,249,195,252,63,150,224,34,172,80,86,103,185,35,14,123,133,116,90,228,66,202,46,153,70,169,63,122,28,45,85,161,79,156,171,89,176,177,194,76,223,6,2,226,242,20,241,105,23,107,208,192,220,30,60,230,66,202,168,219,54,33,33,149,46,112,163,248,0,247,146,177,241,238,254,181,89,9,57,81,33,254,113,85,151,21,224,247,34,105,108,163,182,117,99,160,134,81,219,195,158,157,205,176,44,81,206,244,96,32,224,145,244,91,76,179,127,152,130,196,68,249,93,198,177,91,106,253,148,29,27,249,29,112,62,134,180,168,78,138,163,27,8,227,110,107,21,46,80,192,207,180,31,13,211,177,195,120,20,43,134,154,249,223,24,151,210,187,31,242,21,107,229,6,15,183,96,18,165,211,237,252,70,56,157,84,134,122,152,169,168,41,240,86,252,42,131,129,45,178,114,162,84,97,203,9,154,39,212,230,2,225,158,255,41,103,124,0,154,234,13,53,134,127,148,165,142,212,231,5,129,170,183,98,12,168,251,41,81,78,112,70,49,109,32,72,107,147,170,177,121,35,136,116,95,151,123,179,10,86,113,187,54,47,150,211,215,41,191,39,255,239,74,113,37,0,166,42,177,151,188,215,245,25,195,68,249,231,209,33,2,115,36,109,47,128,40,161,161,76,76,6,232,192,208,159,133,109,224,128,228,66,147,133,14,190,36,218,244,131,127,242,104,41,17,213,186,125,223,164,99,135,205,11,171,158,122,171,174,170,215,210,23,100,142,151,216,23,239,20,142,237,184,93,151,203,213,190,237,82,0,119,94,168,249,45,168,142,206,72,68,81,40,131,200,245,96,81,179,82,198,237,124,230,186,22,194,198,138,196,242,122,50,73,119,195,13,16,44,159,44,236,166,225,87,68,236,164,209,14,92,108,183,121,183,109,129,74,189,225,9,239,78,165,111,171,117,32,130,1,254,154,237,241,191,64,214,250,159,173,30,46,166,179,154,193,141,118,108,2,33,84,246,100,118,85,50,89,145,67,127,37,44,224,21,23,228,208,144,27,215,27,30,65,134,118,165,41,236,173,98,119,199,212,183,78,227,205,161,92,231,87,61,28,122,155,231,218,71,56,242,63,51,197,104,122,80,158,75,70,73,197,88,60,97,149,157,78,243,113,36,41,143,213,111,22,97,205,191,212,82,2,178,245,65,14,24,223,184,187,49,8,26,6,7,232,99,132,108,195,29,204,215,159,221,155,75,19,107,240,101,44,79,182,225,36,241,93,131,174,78,89,129,217,13,2,130,185,63,159,245,195,82,37,84,94,246,81,220,45,223,246,19,97,237,165,182,66,66,194,128,197,88,110,174,225,244,215,253,248,224,77,114,243,219,149,93,35,29,248,211,25,109,19,157,249,123,68,9,86,236,251,139,189,220,81,253,204,167,182,151,81,28,129,141,40,117,126,112,17,199,109,156,8,177,117,172,22,100,254,143,170,162,252,120,120,141,186,244,5,3,113,139,228,147,97,235,16,21,140,176,69,113,11,82,9,98,116,149,7,72,14,171,249,190,46,126,24,199,170,72,30,251,255,64,198,175,41,74,206,4,83,36,106,232,128,253,25,10,233,206,113,110,75,96,143,93,30,184,172,54,131,55,163,0,101,150,199,69,189,32,203,61,61,38,197,24,62,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,92,190,109,162,64,108,111,185,254,199,217,71,34,113,78,8,217,35,57,178,94,85,251,152,197,2,238,54,89,9,191,4,150,6,108,101,163,173,240,96,102,19,114,3,172,208,68,187,87,153,56,12,213,6,42,126,124,185,254,30,62,70,190,17,101,44,66,136,62,218,99,240,144,16,140,129,67,233,193,207,128,18,56,4,157,167,164,19,239,136,189,2,120,97,54,27,78,224,79,91,17,163,70,55,169,230,132,34,188,117,0,251,104,227,74,145,202,217,156,1,149,61,51,248,210,116,252,39,78,146,109,184,177,100,213,60,233,77,13,163,242,98,143,38,236,191,228,154,159,58,149,202,154,52,247,86,77,7,210,10,226,133,117,209,2,25,215,240,176,193,0,30,145,205,40,114,135,36,22,231,121,158,10,0,113,1,42,208,164,51,251,24,205,38,122,21,230,128,59,217,38,161,242,210,171,161,253,111,176,92,83,227,52,13,125,253,97,253,218,113,83,194,76,36,11,134,55,52,190,148,218,219,179,19,151,224,143,207,29,242,9,130,89,205,242,36,172,191,62,110,2,95,180,31,182,18,93,155,159,14,124,3,101,121,224,222,182,58,228,228,253,125,249,219,1,87,161,92,231,10,88,102,124,143,75,212,239,18,174,239,39,150,203,202,2,218,74,54,167,155,116,201,57,119,176,112,142,183,69,63,129,246,176,173,50,209,111,175,52,20,214,243,54,2,41,162,236,115,2,183,165,215,175,182,51,161,244,125,107,171,114,79,109,38,235,185,68,67,40,67,193,34,44,206,93,117,212,47,146,211,33,201,207,205,30,3,16,179,40,137,115,251,48,182,115,140,185,167,90,209,133,41,92,42,226,192,45,97,180,41,191,45,43,45,174,24,74,9,232,199,226,231,78,41,207,224,216,246,210,218,2,189,48,130,176,17,33,2,178,152,212,78,144,181,65,50,245,10,244,212,149,175,208,122,215,237,19,70,219,117,194,64,210,58,239,189,69,21,125,169,163,136,50,65,153,192,216,16,139,164,215,192,10,231,25,167,14,174,173,85,40,124,60,24,247,171,153,107,125,3,53,39,17,217,86,101,132,59,207,133,164,29,175,65,132,129,187,107,247,151,105,167,198,93,190,118,228,46,116,64,104,18,138,79,63,154,65,166,237,11,143,85,171,147,233,39,138,26,107,247,236,248,69,244,190,224,187,75,140,4,145,127,104,12,244,138,153,40,122,62,131,125,112,30,61,6,163,199,151,34,159,222,139,140,208,174,154,124,196,110,80,20,43,110,253,43,231,124,154,28,6,99,90,251,226,24,80,98,115,229,89,81,227,173,136,217,130,211,148,137,177,31,0,195,73,210,234,45,174,73,131,203,168,77,240,241,184,173,250,95,24,80,11,161,165,166,64,10,121,234,172,88,176,146,234,180,104,6,239,28,179,250,196,214,136,9,223,138,133,183,61,24,10,219,175,171,173,242,156,234,246,19,97,78,82,161,165,161,92,87,248,27,75,151,152,213,95,103,54,105,189,237,193,207,222,160,144,155,229,125,238,147,238,90,254,118,147,74,255,212,191,33,209,36,211,137,76,133,103,16,56,11,59,143,86,236,214,92,237,230,111,7,113,96,3,179,208,162,240,15,144,119,236,53,232,39,209,180,161,192,164,6,25,247,101,36,171,176,100,26,125,117,218,37,252,208,134,203,194,252,84,143,229,16,194,111,177,12,221,222,78,115,208,212,126,131,221,159,66,212,165,143,166,57,116,216,137,73,10,37,195,137,153,110,80,235,105,95,116,1,251,85,186,116,148,59,174,250,51,190,15,200,11,41,235,136,174,174,183,78,96,232,186,208,132,47,121,106,131,150,116,20,57,196,193,247,236,155,101,58,197,92,124,72,247,85,81,2,58,36,103,2,217,131,32,87,195,155,227,32,218,239,71,32,118,187,197,133,31,206,112,88,243,168,46,199,97,130,102,231,102,9,82,134,94,121,240,182,14,157,16,245,157,21,15,10,52,33,146,86,83,132,60,109,126,8,34,202,29,164,253,103,31,244,84,189,77,215,112,7,59,195,43,121,63,39,48,21,197,188,1,50,120,188,101,48,72,159,69,54,178,183,207,231,157,33,75,183,249,229,208,76,187,56,134,13,156,245,226,7,229,18,71,161,167,147,161,71,246,191,195,116,156,97,41,193,246,129,184,222,151,255,84,13,199,174,54,151,15,112,182,29,119,33,90,123,140,252,175,228,181,152,170,233,186,83,149,205,234,133,84,65,127,153,222,131,3,230,11,122,137,47,195,44,177,64,199,34,195,100,245,226,213,244,60,16,240,36,156,2,33,18,66,157,27,186,8,120,117,76,43,93,149,147,0,31,44,154,134,194,116,120,59,241,131,27,12,225,57,124,187,198,192,176,237,74,169,50,196,244,10,219,196,113,223,4,186,31,44,154,134,194,116,120,59,241,131,27,12,225,57,124,187,198,192,176,237,74,169,50,196,244,10,219,196,113,223,4,186,1,197,235,215,213,221,134,246,145,243,70,254,250,66,4,6,244,211,35,133,94,159,169,69,49,109,163,7,104,237,78,69,31,158,73,57,117,161,97,242,142,254,137,11,156,72,243,124,250,8,231,61,195,202,122,132,35,28,206,51,66,15,128,2,21,37,108,105,124,65,18,106,21,152,106,73,185,106,119,20,211,24,224,84,137,63,253,70,53,179,97,207,102,73,227,176,45,132,210,219,48,129,205,215,145,249,159,98,77,217,36,89,47,40,216,233,63,214,59,14,60,210,49,124,242,49,88,208,25,12,148,107,114,85,246,140,90,214,86,168,62,234,51,207,98,193,206,240,250,121,69,178,67,11,72,22,11,173,130,184,43,242,242,33,91,112,195,127,31,148,20,223,195,217,167,109,35,215,129,67,80,12,80,145,171,115,24,41,1,206,134,171,34,20,46,235,145,247,45,47,198,0,32,78,208,63,231,164,141,182,79,205,245,91,217,123,187,181,69,121,255,120,250,31,23,58,108,254,19,37,176,26,40,240,15,184,86,21,209,63,11,100,91,170,46,75,25,124,84,206,220,59,156,217,66,89,1,19,240,16,24,154,21,231,171,87,178,185,67,59,243,31,123,185,119,98,58,63,244,103,123,147,93,7,76,141,229,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,137,95,115,247,52,48,186,51,33,225,67,70,100,31,176,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,53,69,97,120,192,244,148,103,219,57,106,128,224,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,85,227,55,191,136,120,224,202,76,252,158,15,90,9,104,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,90,107,71,167,47,30,148,182,40,117,82,159,196,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,21,5,66,98,104,197,220,83,89,203,220,116,181,121,123,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,228,131,169,171,200,48,213,165,204,134,148,180,38,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,27,47,142,168,37,105,14,179,42,2,45,150,9,178,221,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,201,225,151,24,24,41,120,210,54,131,165,255,166,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,166,246,31,70,1,190,117,68,3,233,250,153,191,247,25,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,233,96,51,21,231,209,48,229,228,139,15,11,12,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,102,182,57,253,210,226,158,135,114,117,66,20,51,199,133,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,157,223,161,214,176,173,94,10,223,241,3,66,165,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,120,140,179,68,183,140,172,87,128,75,108,101,132,120,194,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,4,110,78,29,181,42,152,152,41,44,206,245,2,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,30,7,251,153,91,225,229,23,93,41,111,227,136,126,184,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,94,93,22,156,58,72,251,211,97,102,204,216,61,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,47,86,229,76,152,235,35,150,14,179,25,188,100,248,116,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,56,204,116,184,110,167,80,121,131,120,187,27,41,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,138,121,222,200,222,128,230,204,137,92,150,29,93,167,193,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,104,210,155,169,142,94,196,38,181,134,192,53,212,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,229,69,97,247,177,253,163,30,186,225,187,31,105,203,193,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,40,236,170,71,171,80,212,198,162,179,5,188,66,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,16,183,22,219,132,195,88,132,32,70,1,239,168,90,82,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,23,255,47,215,189,75,165,85,103,159,116,10,81,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,113,245,121,188,165,24,208,175,200,235,4,8,223,94,40,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,144,220,177,217,144,136,79,8,24,16,177,103,209,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,136,108,148,95,61,65,40,149,183,246,2,83,52,50,230,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,137,5,223,165,38,74,175,150,16,108,31,174,221,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,76,237,87,128,56,175,158,81,111,229,203,0,31,175,59,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,129,190,120,166,77,45,220,22,12,249,16,8,136,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,111,165,78,138,67,159,188,174,216,109,235,82,63,133,222,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,237,32,156,106,8,119,29,114,205,206,196,72,33,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,151,198,152,196,146,10,167,219,79,234,92,186,35,44,93,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,105,41,96,181,99,44,28,1,84,16,54,251,51,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,158,38,69,202,39,33,72,193,152,115,247,4,168,126,132,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,90,169,183,77,113,16,222,63,82,43,140,65,174,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,116,202,251,174,203,123,185,107,150,118,29,245,143,134,137,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,117,64,122,67,84,50,207,178,35,215,230,110,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,2,6,168,56,185,84,100,102,234,222,120,157,115,62,63,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,255,93,218,243,120,0,165,78,134,174,18,21,254,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,179,248,89,202,67,241,59,92,28,8,10,172,92,249,244,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,228,100,169,168,94,34,106,27,9,125,141,255,146,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,64,174,16,11,33,42,152,183,249,199,130,150,195,36,81,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,193,34,131,156,2,113,30,69,47,235,60,124,231,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,46,194,32,123,68,76,87,243,161,252,154,73,80,2,171,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,102,204,26,93,163,25,87,19,14,123,28,117,19,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,166,114,87,168,154,179,101,157,55,58,25,116,114,91,61,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,231,236,211,127,228,159,89,227,227,77,242,161,163,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,23,254,42,16,45,189,229,149,240,123,158,225,28,65,195,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,125,213,252,205,251,230,56,150,34,59,189,164,86,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,185,218,80,165,96,121,161,90,87,25,242,143,59,189,71,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,147,13,14,159,157,133,15,44,16,134,2,113,18,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,89,193,211,46,109,97,213,223,119,162,122,162,225,208,252,124,45,246,245,196,39,20,27,162,204,35,249,138,75,199,216,36,174,13,244,84,154,61,246,22,105,7,10,153,51,201,70,209,121,8,10,14,35,225,94,50,185,70,25,122,118,194,2,6,192,33,2,13,241,164,181,16,100,236,102,53,212,234,30,225,166,244,149,79,180,161,252,208,33,18,96,144,202,8,53,27,167,89,100,247,146,178,138,91,190,188,250,208,19,8,124,75,238,202,21,114,222,207,162,78,108,77,122,120,83,249,60,39,186,144,41,173,104,148,126,71,203,214,223,249,66,183,52,124,170,210,116,202,180,194,177,102,108,149,8,1,71,161,243,31,162,50,32,78,254,99,185,250,130,252,55,132,229,24,226,187,11,117,9,198,26,1,227,172,37,97,97,112,47,145,202,40,52,21,164,219,5,100,80,42,61,56,218,57,51,139,159,53,117,136,241,36,4,41,202,21,175,20,151,240,169,215,170,8,77,113,79,195,74,16,58,102,92,198,251,209,119,37,27,77,244,66,87,237,255,0,45,185,163,68,236,177,131,13,4,3,73,7,14,155,223,90,201,217,140,19,26,123,199,73,235,238,119,253,219,81,177,205,228,46,29,162,160,174,75,3,161,11,73,194,213,13,55,243,64,26,143,10,153,15,185,69,211,96,167,75,121,249,208,112,33,139,95,40,250,95,199,213,165,44,252,190,81,223,61,243,163,172,230,153,189,22,80,155,23,167,153,211,241,211,12,155,35,13,134,185,9,243,6,51,254,4,219,190,240,245,175,100,10,63,244,172,24,113,183,62,222,172,243,10,63,204,21,63,249,144,118,160,82,143,128,250,103,15,213,104,183,246,130,27,132,21,21,187,78,163,189,253,252,18,254,174,61,41,231,86,14,160,208,168,192,65,196,98,123,34,65,193,59,245,22,7,158,91,77,179,232,65,249,245,106,27,106,250,71,254,19,196,103,176,174,170,44,111,183,133,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,72,6,184,148,50,144,57,131,209,199,198,118,183,117,224,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,40,246,42,163,140,10,94,239,35,105,201,99,179,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,167,57,159,82,252,60,121,22,193,244,224,167,35,85,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,182,175,54,225,194,55,202,10,52,247,131,182,99,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,177,254,171,186,167,223,210,161,58,142,166,89,245,143,205,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,230,197,46,77,124,182,143,171,183,94,77,247,41,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,112,75,163,16,66,0,178,206,75,184,156,69,82,128,61,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,37,187,94,230,108,211,210,241,233,175,181,174,119,179
]);

export const transferProof = {
	publicInputs: ["0x1c0c2cd4806bd818498f4ef58836794d4ab61417de6e61ee198f7de25898e50e","0x11da5b03a2d88adb959d5f04f8e03455e59e36b68feabd6170930cd7d473ee92","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x2a0401ac9eec19b4f5472f48793db9f20b3946e3eaab8d3ecbbc3ec69bcbe9e5","0x03c577df3d7845a6f5875e1e1eb8604871ae24a8b650cfd0a4bc70ab55a682e4","0x0257eb9d702cfdf9ad18ce614cc49eb6ee4a2260f78c6ba88eb0e72789d456a7","0x1729aef9320951bfdb39ad3c520577666fdabe318ce1c545e081f2be92573342","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x2837ae6b3eb38bb368e52e4f2db26967710d7f4f46a1a963bd53ad59f1617fe8","0x1583f4b6db398339d0632fd7211c518ee6bf24db94ae0f0635a5760515d57e9c","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x112a1ff350478488e3a0b8bf9a7cbd47cba795ba5ff1901f160658ead721e0de","0x06b6fb5d211126493951c7e0df9ced3f15500d7dad4e9a6b67876587e8c39867","0x1bed9aacd69a2c1f4f769142c3e39ddb12593e789028b0b42f07b9a66bddc84a","0x15ab7915cc5dd8269868ccd05f386fbc60fc97a2e823dbab8d6074734500631d","0x01fcd442136cac858e278b50f3e5ada064470c04118ff33d74a5cb2cc0fbb9d6","0x02eb69c38a7b90863944938ef5e3b63ed0cd119e56271ba665e64ff8645d40cf"],
	proof: new Uint8Array([

]),
};

export const transferCircuit = {"program":{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":9300014133557426000,"abi":{"parameters":[{"name":"_s","type":{"kind":"struct","path":"Sender","fields":[{"name":"priv_key","type":{"kind":"field"}},{"name":"bal","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amt","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"rnd","type":{"kind":"field"}}]},"visibility":"private"},{"name":"s","type":{"kind":"struct","path":"UserPubParams","fields":[{"name":"pub_key","type":{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}}]},"visibility":"public"},{"name":"r","type":{"kind":"struct","path":"UserPubParams","fields":[{"name":"pub_key","type":{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}}]},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]},{"kind":"tuple","fields":[{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]},{"kind":"struct","path":"PtXY","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}]}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1dCZgUxRV+M7sLLLCswKIsi9wCgpDumdndWU8EjBqNMcagGA+WnR0RFeOFBxgHRU00YjTGxCve4o0aMYLihVFQ1EQjifGIZ4z3GQ0xkPSTKremmO3ZYf436d5Q31dUb9fMP+/99d6rel01Q4TWl6kRopmR9dfclKmW6xDrXlTdK1fXUdqw6HsTVOsUV9yIgRV3GhKJ1sZYqxt3m51Y0/RkvZOon96QdJNufbI+FUvG463JRLKxaXpTo9PkJuKtbrq+KZ5WYNHi5XL1RQ7VYdgmr/1VW2sPUK0aDLOUYwT5WiAp8jcSK6aw3P5AuWqFjCJijUWxcvYHjmu5JaOf3E5xJcuGnCKL6RgDVFunhdaOwR0Z616dumeWMkFFix3sAR3HasmD5dbhdHTKqW0maK909LPyyW1ioo1yAJAT04kGkmV4A2lDL7MND2kseWR18ykzECjXljhjcExOGTcjzGkdEAvJ6aACOM33WSang6gtaHYz+CTCOd06f7xYS9qN17c21jsNzYn6VEM8loo1OqlEfdr1BI41JTxq0i2JZCoZi6djjbGWdVj5HDOw6YlkHbVNIHw9mNavuoZS22qrFLMoUk8zeA9T7XAttDaIYbThLDqc5GdRE6tYZxlGuFl0OG2aRa3iDiOZWXQEWYY3guRn0QKUyTuLjgDKtRXJzKKMmxHmdDgQC8npSJKZRUfSplnUnkXZr/QsOlxdj/LqaK9uTf4Pk9ABa2ugnjnERWHHTC7GqHasJkQbG3este6NpfyB0imuZJG4sY7Yml5fxhDOqceSzOCin2gidd7GwHKT8VisMc6vS6YcN5Hy1jSxWGp6wmlxmltirU0JtymdiCXiLamW6R5ms5t20s0tTenkernKDTuyC9oRtyGZlcM4SYHHCeCOBxqDlN7jDYJBuDllRQSA8QK43wAbq3YyxrVnPXSwKQfyMIrCEWArgDqPBupcygDbhWQCrCMpsCOA61KwAyzrbSbpINySGltXkjG2mKTAMQHceMCNjfWOU7iNrRvJGFtCUuCEAG59wI2N9a6ncBtbJckYW4OkwA0CuI0BNzbWu5FkjM2UV9LYkHKbeUVStU1aaO093JGx7jVRuPZ4kh3HyrvH00RYw+kMezxJkomA25JleNuS/B5PAcrk3ePZFijXdjhjyHrCwLgZYU6bgFhITrcvgNNC9ni2NziVSFbjhH+CtQNhndjc2+K/OYnVezxdjesdKDsI6klH9zep6x29upOSsZT7QRNwWCXbD9pZtRM1IdowucPeD5pI8vtBJonF7gftTDijn0gyg4t+XInUeRKFcz9oEsmsMiZLCjxZAHcXoDFI6b2LQTAIV2Q/aKKSFY37TbCxaidjXHvWQ6/WgE/P3B2Bcu0K5LSUgQsptynvbpIC7yaAuzsFO3Cx3rsbBINws1YGaGetBGLtBMT6FoXTWZFym/LuISnwHgK4e1KwnZX13tMgGITr66xOcQW5LwUNpt8W4s9Og4IUoPYirKNXKhtnLvWzi0rjendq+9L0jsb9vYxrnYp/x6t7e/W7Sj6JbcFGwq969xHitFs7nO5jcJrvNd/z6r5e/b4Qpzy+ewpwOoWwvomWT0rv/YBjQ0ZBx6R9gFj7g3VGP4biuIQcF/bJKQK2M5WwPoPmcW8wj/sK8XgAhWNdMBGI9YOA+yCvHYDzrMsxZ6qA7RxIwfbBvQR4PECAx4MCziOvu4DbKC7734ECPA4OOI+VAjweJMDjEJKZE4L8UytRINbBQP7MnQHGHUKl/cUBpC5RQ85DVDtNC62V5I6MdW8ayZ9GOxhoAId0HCvvabRpOB07zWm0QwjrYLo0k2V4zSR/Gq0AZfKeRmsGyjUdZwxZUYxxM8KcTgNiITltKYDTQk6jtdCmXxywT5ixX+knhNPUdcqrrV5NU2lPmKVJZkUFHuOsE2aHqnaGJkQbG3fYJ8xmkPwJM5PEYk+YHUo4p55BMoOLTj+QOh9G4TxhdhjJrBxmSgo8UwD3cKAxSOl9uEEwCFdkf2SGkhWNewTYWLWTMS4Hl1LmkWVAXcxZ6kjVztJCayW5I2Pdm0XyeWQZ0ACO7DhW3jxyFk7HTpNHHkkys8FRZBneUSSfRxagTN488iigXD/EGUNWFGPcjDCns4BYSE6PLoDTQvLIo2lTHmnnkexXOo+cpa6P8eqxXj2OSptHHkfYlZBdQNhZeeTxqp2tCdHGxh12Hjmb5PNIk8Ri88jjCefUs0lmcNF5JFLnEyiceeQJJLNyOFFS4BMFcE8CGoOU3icZBINwRfLI2UpWNO7JYGPVTsa4nSWPnKPauVporSR3ZKx7cylceeScjmPlzSPn4nTsNHnkHJKZDU4hy/BOIfk8sgBl8uaRpwDl+hHOGLKiGONmhDmdC8RCcnpqAZwWkkeeSrnzSP6bnV7nUxXGtf7RajP3mmP0z1XXjDvPq6dRaXOv0wi7erALCDsr9zpdtfM1IXqAuMPOveaTfO5lklhs7nU64RxhPskMLjr3Qup8BoUz9zqDZGbbMyUFPlMA9yygMUjpfZZBMAhXJPear2RF4/4YbKzayRjXnvXQq5YU0BYyQLl+AuS0lIELKbcp79mSAp8tgHsOBTtwsd7nGASDcEV/JaIVqP88oFw/pXA6K1JuU95zJQU+VwB3AQXbWVnvBQbBIFzRb64gZ1ZkMD2PsEavv93PuDqPbzWuz6G2b/dnjPvzjGudlv7Mq+d79QJq+wUAblPtYM8wsPO95udevdCrv1C6S0x4Cwi/uryIsPaOlk9K718Cx4aMEgXLOQOI9SuwzuhHE+yfyHFhn7xIwHYuJqzPoHk8H8zjhUI8XkIycy3aB+cDsS4NuA9yvMkA8TjmXCxgO5dRsH2QeZwH5vESAR4vp3DM/+jxQa55fy3MoVNc+cp2LhUYmysCrjePyxUCel8ZcL059swX0PsqoN6lfBDTHSi3Ke/VkgJfLYB7DdAYpPS+xiAYhFtSY+tBMsZ2raTA1wrgXhdwY2O9ryMZYzPllTS2KFDuqCHn9apdqIXW3sMdGeveQpI/yxgFGtP1HcfKe5ZxIWENpzOcZbyeZCLgDWQZ3g0kf5axAGXynmW8ASjXjThjyDoVwLgZYU4XArGQnN5UAKeFnGW8iTZ9J84+l8l+pfdQFqrrm716i1dvpdKey7wVqGcOcVHYWecyb1PtIk2INjbusM9lLiL5c5kmicWey7yNcE69iGQGF/1ACqnz7QZWmM5l3k4yK4c7JAW+QwD3TqAxSOl9p0EwCFfkCfIiJSsa9zdgY9VOxrgcXDrDd+LuUu1iLbRWkjsy1r3FFK7vxN3Vcay8eeRinI6dJo+8i2Rmg7vJMry7ST6PLECZvHnk3UC5foszhqwoxrgZYU4XA7GQnN5TAKeF5JH30KY80s4j2a90HrlYXS/x6lKv3kulzSPvJexKyC4g7Kw88j7VLtOEaGPjDjuPXEbyeaRJYrF55H2Ec+plJDO46DwSqfP9FM488n6SWTk8ICnwAwK4DwKNQUrvBw2CQbgieeQyJSsa9yGwsWonY9zOkkc+rNrlWmitJHdkrHvLKVx55MMdx8qbRy7H6dhp8siHSWY2eIQsw3uE5PPIApTJm0c+ApTrdzhjyIpijJsR5nQ5EAvJ6aMFcFpIHvmowanEEbPrCD9LPkZYJ7Z/U4aPnuk8sodx/RhlB0E96ej+5ep6hVdXevVxKm3O+ThhV012AWFn5ZxPqHaVJkQbJnfYOecqks85TRKLzTmfIJzRryKZwUXnnEidn6Rw5pxPkswq4ylJgZ8SwH0aaAxSej9tEAzCFck5VylZ0bi/BxurdjLGtWc99GrtZqAtrADK9Qcgp6UMXEi5TXmfkRT4GQHcZynYgYv1ftYgGIQr+psytwD1XwmU648UTmdFym3K+5ykwM8J4K6mYDsr673aIBiEK/qbMsiZFRlM/0RYo9e/+8K4Oo+/xbh+VrVcVxj3VxrXOi39s1ef9+pf1N8a++Z2sBcZ2Ple84JXX/TqS0p3iQlvNeFXly8T1t7R8knp/Vfg2JBRomA5FwGxXgHrjH40wf6JHBf2yZcFbOdVwvoMmsfnwTy+KMTjayQz16J9cBUQ6/WA+yDHmxVAvFc8jFcFbOcNCrYPMo8rwTy+JsDjmxSO+R89Psg179+EOXSKK1/ZzusCY/NWwPXmcXlLQO+/B1xvjj2rBPR+G6h3KR/E9ATKbcr7jqTA7wjgvgs0Bim93zUIBuGW1NiqSMbY3pMU+D0B3PcDbmys9/sUbmPrRTLG9oGkwB8I4H4YcGNjvT+kcBtbNckY20eSAn8kgPtxwI2N9f6Y8MZmQML3M3oCOV0CxPqEwumsSLlNeT+VFPhTAdzPKNjOynp/ZhAMwhV11iogp0uBWP+gcDorUm5T3s8lBf5cAPcLCrazst5fGASDcEWddQkFM5j+E8yfxMOS9wn/FG0NYZ1dn2JgPvWphKXG9WfUdoqhp3G/yrheo9p/efVLr/6bsk9ILGkHe5mBne81a9W9/yjdJSb6LwTGiwFBMorskEjpHcHpLXpCYhkQKwrWGb1rxf6JHJe1yiDRtlMG9hk0j1+CeVwnxGN5RGaNgfbBNUCsioD7IM+hwB8YcTnmlAnYTpeA+2CVAI/lAjx2Dcn8jx4f5Fq/mzCHTnHlK9upELCdyoDrzeNSKaB394DrzXFnjYAv9gh4rOBT7BInQ6YEXG8+/fSGAO5+QuuzcrC99wLq3BO4PgPajYsci5KeTgLKbcpbFREUuCoisEceCfjpJA+wl8EwCFck4PFXlCQC/f4hCPRvCuBODUmgrwbqXA0MzkC7caeGNNBXCwX6zSKCAm8mEOh7BzzQs969hQK9LvAVHpDTPkCsKUAsqdU2+ocU+kZkJtygTWJov+MDkh8TfvKuAQdevSvKfqJ3Ofsa170ibbuinHnp+9XGdY16TT/vn829uoU1A6Ftsv//iU+jbYe/6/M24U9lAL9D5L4N1LdWyFf6t+MrtYav5HvNAO+fOq8OVIMskYD2juBtaMuA27iU3oOAi34yCnr3shYYzwaDdUbv6vB8gxwX9sktBWxnCNhn0DxuDuaxTojHoUJrZrQP1gB9cFjAfZDXhMB51uWYM0TAdoYH3AerBXgcKsDjiJDM/3A7B/r0VgHPXdl2hgnYzsiA683jMlJA71EB15vnq1oBvUcHXO8rPYyrCP984kog1lVArK0DvpZIeRjzgXiXehiXEd6uxwR8LdEqwOPlAjyODXh84JNffAoKHR+6A9cSPYBY2wQ8PvC3coDfOHL5lGQXgXlvXMDjw1IBHrsK8Dg+4PGB13WjBeLDKKBPjwZifSPg8YHXsf2BMnIONFzArp2Axwfer6gB8zhCgEc34PHhGA9jtsD4bAbk8BgKNofHCnHYG8jhscIcIvK+MRH82PQJgd5jBfTuG3C9eR0/TkDvmhDoPV5A734B15vXZY6A3puHQG9XQO8tgHqzbPp8pG41Fzynce7Q0+iv8GoXr3al9f9XKJ854f8jtId6HX/TlPfcqlU/F14P8HzG8ZhjE/sp2yyPH+uylfG5XVV7xY2DFte9ET3A6PoaL1dflU9ftU9fH5++vj59/X36Bvj01fv0Nfj0befTt4NP33TVTlr74q63X3DmaLMv5fO+Vp++mT59R/j0neTTd7JP36k+ffN8+hb49J3n03ehT99FPn0P+vQ95NP3qE/fCp++53z6Vvv0veDT95JP3zs+fe/69H3k0/dJO306Fg1VbaVq9Tqb45P5n807xRW30sBF4yedREMlZRew/HF99k+SH40pgO/ouD8p04Zv68KlitrOMJL1nm7UNg/odrKBF7H6dsnxWZJ6enaQ0PjlAvheifXNIb/+LOanTl2X5XhdxHpPGbU/DpTjXiQHjs2rOW4TNk5n175h6+mnm+6rsHTNpbf5/graUO8KC98eU8rxGWXtvDcXbtRHj3zvNbmvog3HUcvD6zYdm8oz2fJPUPedIkpjsu0LVGUKv4I2tCPz8yus1w9Rf3c35Df1mLCRcqYbm910vDndXN+cSiVamvtY+GRwxjwNVteb5iLfEheeK2LCMTTnXJQrnvrNRbbPcZms+nLNU+ZcpPEk53TPDuqFx8ntS+3PH8xBLbUVk9cKan8eqbBeW6Nazkl7t4PXxQevitofX37fFuq6MgcGAbnKJUckhxxVOeTQ7wlDLB+k/v5fx3L9LKEyhzzoWKU/UwD/61hllu7GdQ+rT3NQnuN9kXb+jlqt32vt++a9qhx9GlM/azHl1XpUWm0/A1di3q2Rwc85Vv2M6xpLT5PvCSAZNJ722YocMkWtPjNmm/IB1vJ2cW1ZynJ8li7aZmqMe5rP/wIYcrA6fz0BAA==","debug_symbols":"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","file_map":{"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            unsafe {\n                //@safety: already unconstrained\n                field_less_than(b, a)\n            },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"62":{"source":"use elgamal::{add_ciphertexts, decrypt, embed_message, encrypt, field_to_point, public_key};\nuse std::embedded_curve_ops::EmbeddedCurvePoint;\n\ntype CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\npub struct PtXY {\n    x: Field,\n    y: Field,\n}\n\ntype CipherTextXY = (PtXY, PtXY);\n\npub fn xy_to_pt(pt: PtXY) -> EmbeddedCurvePoint {\n    let PtXY { x, y } = pt;\n    let is_infinite = (x == 0) & (y == 0);\n    EmbeddedCurvePoint { x, y, is_infinite }\n}\n\npub fn pt_to_xy(pt: EmbeddedCurvePoint) -> PtXY {\n    let EmbeddedCurvePoint { x, y, is_infinite } = pt;\n    if is_infinite {\n        PtXY { x: 0, y: 0 }\n    } else {\n        PtXY { x, y }\n    }\n}\n\npub fn ctxy_to_ct(ct: CipherTextXY) -> CipherText {\n    (xy_to_pt(ct.0), xy_to_pt(ct.1))\n}\n\npub fn ct_to_ctxy(ct: CipherText) -> CipherTextXY {\n    (pt_to_xy(ct.0), pt_to_xy(ct.1))\n}\n\npub struct Sender {\n    priv_key: Field,\n    bal: u32,\n    amt: u32,\n    rnd: Field,\n}\n\npub struct UserPubParams {\n    pub_key: PtXY,\n    bal_ct: CipherTextXY,\n}\n\nfn main(\n    _s: Sender,\n    s: pub UserPubParams,\n    r: pub UserPubParams,\n) -> pub (CipherTextXY, CipherTextXY) {\n    // Check balance is sufficient\n    assert(_s.bal >= _s.amt);\n    let bal_pt = embed_message(_s.bal as Field);\n\n    // Set up keys\n    let pub_key = public_key(_s.priv_key);\n\n    assert((s.pub_key.x == pub_key.x) & (s.pub_key.y == pub_key.y));\n\n    // check balance matches the ciphertext\n    let s_bal_ct = ctxy_to_ct(s.bal_ct);\n    let balance_pt = decrypt(s_bal_ct, _s.priv_key);\n    assert((balance_pt.x == bal_pt.x) & (balance_pt.y == bal_pt.y));\n\n    // remove amount from balance\n    let sender_balance = encrypt(pub_key, (_s.bal - _s.amt) as Field, _s.rnd);\n\n    let r_pk = xy_to_pt(r.pub_key);\n    let rec_amt = encrypt(r_pk, (_s.amt) as Field, _s.rnd);\n\n    let r_bal_ct = ctxy_to_ct(r.bal_ct);\n    let new_rec_bal_ct = add_ciphertexts(rec_amt, r_bal_ct);\n\n    (ct_to_ctxy(sender_balance), ct_to_ctxy(new_rec_bal_ct))\n}\n\n#[test]\nfn test_main() {\n    let _s = Sender {\n        priv_key: 0x04d73359c9166e49aafaf9a4852eaa4dceb2c26878196b10e9048004ff5cc20c,\n        bal: 0xffff,\n        amt: 0x1234,\n        rnd: 0x030cffca80ca4344e54e436fc5a03ae8e884b8f3edcb780702599e1951e8aa62,\n    };\n    let s_pk = public_key(_s.priv_key);\n    let sender_bal_ct = encrypt(s_pk, _s.bal as Field, _s.rnd);\n\n    let s = UserPubParams { pub_key: pt_to_xy(s_pk), bal_ct: ct_to_ctxy(sender_bal_ct) };\n\n    let _r_priv_key = 0x208196b10e9048004ff5cc204d73359c9166e49aafaf9a4852eaa4dceb2c2687;\n    let _r_bal: u32 = 0x1000;\n    let r_pk = public_key(_r_priv_key);\n    let r_bal_ct = ct_to_ctxy(encrypt(r_pk, _r_bal as Field, _s.rnd));\n    let r = UserPubParams { pub_key: pt_to_xy(r_pk), bal_ct: r_bal_ct };\n\n    let (s_bal, r_bal) = main(_s, s, r);\n\n    let s_expected_bal = field_to_point((_s.bal - _s.amt) as Field);\n    let s_updated_bal = decrypt(ctxy_to_ct(s_bal), _s.priv_key);\n\n    assert(s_expected_bal.x == s_updated_bal.x);\n    assert(s_expected_bal.y == s_updated_bal.y);\n\n    let r_expected_bal = field_to_point((_r_bal + _s.amt) as Field);\n    let r_updated_bal = decrypt(ctxy_to_ct(r_bal), _r_priv_key);\n\n    assert(r_expected_bal.x == r_updated_bal.x);\n    assert(r_expected_bal.y == r_updated_bal.y);\n}\n","path":"/Users/shramee/www/starknet/confidential-erc20/circuits/transfer/src/main.nr"},"63":{"source":"// ElGamal Cryptosystem Implementation\n//\n// This library implements the elliptic curve variant of the ElGamal cryptosystem as described\n// in the accompanying documentation. It provides functions for key generation, message embedding,\n// encryption and decryption with the following features:\n//\n// - Curve-agnostic implementation: No elliptic curve parameters are hardcoded in this library\n// - Works with any curve supported by the underlying proving system\n// - Preserves the additive homomorphic property described in Section 2.4\n// - Implements the message embedding approach from Section 2.5\n//\n// The implementation follows the mathematical formulation in the documentation with\n// function signatures designed to be simple and composable.\n\npub mod tests;\n\nuse std::embedded_curve_ops::{\n    embedded_curve_add, EmbeddedCurvePoint, EmbeddedCurveScalar, fixed_base_scalar_mul,\n    multi_scalar_mul,\n};\n\n// #region utils\n\npub type CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\n/// Field to point, x . G\npub fn field_to_point(x: Field) -> EmbeddedCurvePoint {\n    fixed_base_scalar_mul(EmbeddedCurveScalar::from_field(x))\n}\n\n// #endregion utils\n\n/// Implements key generation as in Section 2.1\n/// Computes H = x . G (Equation 2.1)\npub fn public_key(priv_key: Field) -> EmbeddedCurvePoint {\n    field_to_point(priv_key)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt(pub_key: EmbeddedCurvePoint, message: Field, randomness: Field) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    encrypt_pt(pub_key, field_to_point(message), randomness)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt_pt(\n    pub_key: EmbeddedCurvePoint,\n    embedded_message: EmbeddedCurvePoint,\n    randomness: Field,\n) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    let c1 = field_to_point(randomness);\n    let c2 = embedded_curve_add(\n        embedded_message,\n        multi_scalar_mul([pub_key], [EmbeddedCurveScalar::from_field(randomness)]),\n    );\n    (c1, c2)\n}\n\n/// Decryption as per Section 2.3\n/// Computes C_2 - x . C_1 = P_m\npub fn decrypt(ct: CipherText, priv_key: Field) -> EmbeddedCurvePoint {\n    let x = EmbeddedCurveScalar::from_field(priv_key);\n    let diff = multi_scalar_mul([ct.0], [x]);\n    embedded_curve_add(ct.1, -diff)\n}\n\n/// Additively homomorphic property as in Section 2.4\n/// Computes (A_1 + B_1, A_2 + B_2)\npub fn add_ciphertexts(a: CipherText, b: CipherText) -> CipherText {\n    (embedded_curve_add(a.0, b.0), embedded_curve_add(a.1, b.1))\n}\n\n/// Message embedding function f(m) = m . G from Section 2.5\n/// Fails if message is over 40 bits\npub fn embed_message(m: Field) -> EmbeddedCurvePoint {\n    m.assert_max_bit_size::<40>();\n    field_to_point(m)\n}\n\n/// Verifies that a point is the correct embedding of a message\n/// Implements the verification function from Section 2.5\npub fn verify_embedding(embedding: EmbeddedCurvePoint, m: Field) {\n    assert(embedding == field_to_point(m));\n}\n","path":"elgamal/lib.nr"}},"names":["main"],"brillig_names":["decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]},"warnings":[]};