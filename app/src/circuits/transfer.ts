// Auto-generated file
export const transferWitness = new Uint8Array([
31,139,8,0,0,0,0,0,2,255,173,92,115,176,175,75,174,61,123,108,243,97,158,173,86,186,211,15,51,119,158,109,59,233,78,63,219,182,205,177,109,219,182,109,219,54,86,223,153,170,249,246,95,183,118,77,246,189,117,80,103,159,252,58,233,100,101,101,229,251,206,201,185,79,125,93,235,228,83,191,62,239,147,63,135,50,91,206,212,71,143,181,90,233,34,75,86,151,194,148,76,164,204,97,154,70,170,220,56,246,170,49,88,15,133,67,40,107,209,24,41,140,147,163,173,79,227,107,225,235,66,78,182,98,202,229,194,71,91,57,140,181,134,112,24,82,114,41,70,197,74,174,107,144,132,44,198,198,92,148,87,182,57,180,113,104,33,81,239,22,59,69,99,145,154,46,114,176,21,71,24,105,76,196,160,234,228,200,165,243,42,182,136,57,215,214,203,44,162,53,150,216,166,85,171,209,96,133,23,126,147,136,59,27,5,187,232,209,86,156,66,138,35,164,201,44,83,59,245,73,11,177,101,11,185,16,25,117,203,85,43,47,19,157,53,182,208,225,201,108,179,180,108,214,211,197,156,226,181,191,46,126,60,87,182,72,58,106,155,170,41,214,88,151,246,161,165,169,150,82,211,202,125,228,58,99,75,109,174,178,226,12,100,101,68,22,235,139,87,205,145,47,113,180,133,96,141,104,181,105,8,179,115,77,72,172,214,103,235,171,105,89,169,85,81,75,201,198,148,68,194,121,144,229,24,241,97,49,20,154,85,232,146,142,62,94,234,96,43,73,40,33,202,232,102,35,118,28,133,74,75,171,112,235,25,23,177,82,208,220,75,181,140,34,80,158,217,134,234,192,143,181,235,80,235,70,151,62,149,95,131,26,130,145,103,227,66,82,145,13,141,44,226,63,229,138,114,105,81,44,21,97,173,132,68,156,65,138,142,22,68,9,223,203,201,202,101,28,125,188,236,209,86,162,102,138,96,135,132,143,69,85,207,200,3,89,89,198,40,221,180,154,21,73,169,134,213,120,84,21,102,211,96,184,86,238,179,80,149,118,185,227,61,182,212,197,86,207,41,160,46,116,77,196,71,38,28,79,1,190,215,90,215,196,77,230,253,1,113,80,33,11,28,87,66,168,112,134,156,75,186,188,163,143,87,112,204,213,43,58,230,234,149,28,125,188,242,49,87,57,55,177,170,217,52,179,106,174,64,18,164,205,74,83,83,237,181,181,24,102,131,123,165,74,148,94,179,78,202,50,169,47,196,163,45,227,171,28,125,36,206,171,104,221,247,199,57,247,25,106,78,107,182,4,79,40,178,225,99,86,42,40,129,34,22,22,254,144,132,90,13,20,105,34,153,250,184,170,163,143,87,115,188,199,171,59,222,227,53,28,125,188,230,41,188,79,18,215,202,20,10,128,2,229,150,37,40,43,10,179,13,5,168,15,149,214,73,133,214,138,61,68,92,95,168,196,38,251,118,44,76,251,140,227,185,208,23,150,210,196,189,197,84,75,207,168,202,209,240,93,171,15,155,121,69,34,56,223,166,204,98,93,240,205,141,27,140,53,227,129,139,175,237,51,29,125,252,172,163,143,106,19,36,98,204,218,37,141,136,203,106,181,199,146,0,158,72,182,169,17,189,53,27,32,38,36,214,160,37,173,208,20,7,68,55,157,131,139,124,246,169,92,21,109,61,130,104,208,156,140,84,231,202,99,224,238,87,102,56,63,128,92,163,55,73,198,9,160,189,113,186,134,134,222,88,224,58,114,98,94,203,209,199,207,57,218,138,11,12,160,164,152,235,144,193,184,34,96,166,82,0,131,32,153,18,106,41,45,140,80,98,100,220,54,186,66,17,26,160,81,35,44,5,28,215,207,61,133,209,0,98,36,55,11,194,16,184,162,235,224,50,25,140,194,178,86,80,18,52,252,24,209,112,106,106,81,17,39,178,10,242,197,21,169,90,208,77,62,207,209,199,207,247,179,21,191,192,201,214,230,100,95,232,200,49,191,200,49,94,95,236,104,235,75,206,96,11,253,32,27,111,174,162,29,156,48,22,96,231,218,101,5,255,118,236,191,244,12,182,242,206,86,52,125,139,57,74,72,93,25,232,68,224,156,145,209,42,104,126,217,177,15,129,51,219,38,197,107,206,5,22,220,173,131,74,96,106,32,165,148,192,12,208,62,48,75,212,0,91,72,89,156,132,0,107,171,162,112,35,229,73,95,126,60,87,3,94,77,208,13,94,128,59,16,35,24,229,4,226,139,154,94,13,224,158,211,96,148,149,244,17,97,15,72,56,150,24,32,186,206,52,73,237,43,28,99,255,149,103,176,117,65,243,208,87,157,229,92,23,48,123,125,181,99,61,126,205,25,108,17,238,43,209,190,63,193,111,56,0,212,102,3,202,173,32,64,179,85,194,89,114,21,168,28,53,118,164,147,102,116,177,48,137,208,185,129,160,148,54,195,136,142,179,85,114,156,173,178,99,126,21,71,91,228,104,171,30,227,197,57,165,150,55,158,240,12,17,131,127,226,4,130,137,30,19,100,36,84,122,236,171,164,146,65,173,20,216,3,34,19,22,198,167,197,159,200,175,230,119,174,196,142,62,118,71,91,95,235,136,19,95,231,136,19,95,239,136,19,223,224,136,19,215,118,196,137,235,28,115,213,4,100,11,179,51,38,161,41,25,61,97,116,78,200,65,76,162,212,134,245,140,137,33,21,26,160,205,90,83,77,51,169,140,60,193,162,86,6,35,59,239,216,211,86,78,210,209,112,16,226,243,9,114,41,26,161,6,25,194,43,197,18,134,142,201,96,228,13,141,39,227,195,130,210,128,68,144,50,170,3,10,130,93,215,49,191,190,209,209,214,55,57,218,250,102,71,156,248,22,71,156,248,86,71,31,191,205,209,214,183,31,243,139,2,209,168,24,97,48,193,7,204,1,125,38,204,49,232,91,42,24,92,187,6,154,61,139,16,134,214,222,193,119,136,98,205,65,86,234,155,73,173,239,56,198,30,85,162,104,107,208,172,24,35,190,113,28,182,181,164,57,160,64,173,2,149,105,32,131,5,197,88,49,34,211,4,234,4,153,248,64,5,87,204,50,190,211,209,199,239,58,250,56,39,134,56,116,233,214,182,0,86,80,143,22,185,211,18,32,3,132,213,22,59,74,145,49,187,105,153,16,92,103,19,4,3,62,39,252,141,30,195,119,31,207,5,98,57,13,243,85,111,40,252,48,7,34,86,48,56,213,4,50,25,74,237,208,161,48,77,150,9,49,170,181,0,150,8,221,32,90,14,29,19,81,225,250,61,142,62,126,175,163,94,248,125,167,230,71,112,109,200,53,61,67,135,232,51,150,18,40,135,5,151,33,239,64,234,81,141,149,38,58,70,223,52,24,156,154,153,106,28,81,27,120,183,174,252,253,142,156,252,7,28,57,249,15,58,198,254,135,142,62,66,165,178,132,18,137,29,218,61,58,42,15,12,214,24,246,11,84,205,17,18,240,7,141,17,186,9,56,30,210,11,46,20,176,195,50,173,212,200,208,27,126,248,212,185,160,56,164,166,84,33,201,34,255,34,170,164,32,234,210,104,13,198,8,110,91,50,213,153,75,198,76,158,7,162,14,141,168,230,153,21,227,184,148,31,113,244,241,71,29,109,253,152,35,7,248,113,71,91,63,225,152,171,63,233,152,171,63,229,232,227,79,59,250,248,51,142,62,254,172,163,6,243,115,142,182,126,222,49,239,197,209,150,58,105,48,216,63,210,112,212,96,230,145,3,212,8,14,43,248,168,0,217,115,84,41,3,87,222,71,91,224,13,115,116,116,254,180,208,117,135,21,200,194,9,250,55,133,182,207,134,190,153,33,171,219,41,238,11,253,27,19,114,166,136,181,85,39,116,100,232,150,232,52,51,109,249,17,90,123,110,104,81,0,221,209,105,4,204,228,84,250,66,19,135,191,202,161,47,199,216,255,130,163,173,95,116,180,245,75,142,220,247,151,29,185,239,175,56,250,248,171,142,182,126,237,12,182,46,104,239,254,235,103,57,215,5,236,248,127,195,17,239,127,243,44,181,141,90,69,53,129,98,216,92,80,162,10,120,48,198,84,129,159,13,124,197,126,235,44,152,131,21,92,49,176,145,80,27,161,192,103,14,41,164,82,85,13,114,87,43,191,237,184,79,251,29,199,125,218,239,58,230,215,239,57,218,250,125,71,91,127,224,136,19,127,232,136,19,127,228,232,227,31,59,218,250,19,71,156,248,83,71,156,248,51,71,156,248,115,71,156,248,11,71,156,248,75,71,45,237,175,28,181,180,191,118,204,175,191,113,180,245,183,142,182,254,206,17,39,254,222,17,39,254,193,209,199,127,116,180,245,79,71,91,40,9,20,111,131,20,176,31,74,17,80,97,195,58,29,211,19,84,104,9,148,246,226,63,244,190,242,60,255,185,36,204,83,154,153,84,26,102,163,62,231,63,31,99,175,136,190,0,4,22,4,168,173,66,65,31,227,10,109,42,98,191,101,77,144,244,117,20,40,59,146,33,63,153,52,30,88,56,233,144,136,255,179,244,127,113,244,241,95,79,219,66,51,70,187,101,90,248,56,12,144,56,15,144,0,58,5,244,37,89,182,172,98,86,128,28,38,232,240,80,140,114,104,248,14,8,138,88,48,140,64,255,118,180,37,13,157,59,163,202,48,40,162,115,195,3,107,168,55,20,221,86,205,234,236,240,125,63,173,133,73,65,168,118,36,90,97,44,220,76,226,126,16,161,253,187,163,143,255,225,56,195,252,231,57,191,103,106,254,235,156,223,51,53,255,237,24,175,255,57,250,8,232,78,0,99,34,232,140,24,196,176,16,101,198,34,83,22,122,33,150,150,84,89,183,148,220,88,91,128,80,80,1,27,216,97,214,2,231,161,64,134,255,61,165,213,214,209,34,164,45,72,195,213,6,228,225,0,94,24,75,19,100,123,1,36,131,38,66,173,128,100,27,99,101,134,182,89,17,96,8,14,196,208,54,141,255,207,209,199,255,119,180,117,61,199,190,125,125,71,91,55,112,204,213,27,58,230,234,141,28,125,188,177,163,143,55,113,244,241,166,142,249,117,51,199,120,221,220,241,92,183,112,180,117,203,115,126,207,223,223,202,241,92,183,118,180,117,27,39,141,15,179,200,184,173,163,198,119,187,35,70,15,44,251,107,11,32,255,163,52,218,123,39,11,195,48,114,99,247,143,78,168,216,148,239,4,143,251,1,94,193,134,41,199,129,150,105,32,254,29,100,63,221,254,104,43,1,236,19,215,194,32,143,26,35,136,38,100,1,73,169,128,103,224,48,45,15,108,182,6,45,226,58,8,76,19,211,253,18,156,0,163,3,138,107,221,193,49,246,119,116,180,117,39,71,91,119,118,228,228,119,113,228,228,119,117,244,241,110,142,182,238,238,56,187,223,195,113,118,191,167,35,70,223,203,113,118,191,183,227,236,126,31,71,141,239,190,142,26,223,253,28,243,235,254,142,182,30,224,104,235,129,142,56,241,32,71,156,120,176,163,143,15,113,180,245,80,71,156,120,152,35,78,60,220,17,39,30,225,136,19,143,116,196,137,71,157,226,228,188,122,94,85,227,40,49,66,77,8,188,167,109,148,58,254,214,148,1,81,5,108,96,174,150,33,172,152,98,136,204,109,191,248,41,96,38,49,151,250,232,227,185,246,219,71,177,238,199,110,192,78,170,228,86,120,116,153,92,160,197,4,75,152,236,35,102,78,144,252,205,203,19,80,166,110,185,6,102,226,154,102,235,49,142,249,245,88,71,91,143,115,180,245,120,71,156,120,130,35,78,60,209,209,199,39,57,218,122,242,49,94,164,86,20,226,6,116,137,218,167,133,6,217,152,74,133,4,132,68,197,26,26,69,189,85,184,73,9,225,210,128,104,157,255,4,24,91,67,58,70,122,202,145,251,150,253,180,184,236,129,16,218,118,211,44,25,108,119,22,180,76,168,103,251,66,42,68,142,74,217,160,49,237,39,228,108,9,241,204,185,118,91,149,198,83,29,125,124,218,169,122,84,84,12,100,75,200,115,224,255,16,213,123,166,132,238,155,218,126,165,79,39,180,28,129,208,184,166,66,235,105,13,76,31,181,24,216,166,200,68,121,63,253,232,35,192,14,10,78,66,201,119,208,245,92,115,64,252,0,124,24,155,81,133,106,146,19,180,80,168,126,16,124,250,236,74,37,183,17,160,191,25,87,204,207,207,112,244,241,153,142,51,204,179,78,241,156,86,86,227,57,73,211,66,17,229,198,220,226,130,192,181,95,46,29,97,128,160,148,146,112,127,129,149,247,179,130,134,48,70,232,91,161,13,168,196,207,62,158,171,27,144,8,127,216,160,240,218,180,26,231,130,26,145,49,215,65,59,192,140,135,67,103,11,197,24,194,151,218,34,116,163,166,41,109,25,121,228,193,207,113,140,215,115,79,249,8,217,57,113,168,41,173,80,10,81,83,217,111,216,66,3,230,84,44,35,233,105,87,69,66,98,148,173,163,100,120,24,208,217,106,76,161,10,63,239,104,11,162,136,41,216,222,140,152,93,141,225,91,5,222,111,45,121,193,217,18,193,242,134,45,13,50,87,8,132,139,72,210,38,38,194,197,16,128,57,63,223,209,199,23,56,218,122,161,99,223,126,145,163,173,23,59,230,234,75,28,115,245,165,142,62,190,204,209,199,151,59,250,248,10,199,252,122,165,99,188,94,229,120,174,87,59,218,122,141,163,173,215,58,218,122,157,99,236,95,239,120,174,55,56,218,122,163,163,143,111,242,211,1,250,155,29,53,133,183,56,106,10,111,117,140,253,219,206,249,189,163,254,246,115,126,239,168,191,195,209,199,119,58,230,215,187,28,207,245,110,199,115,189,199,241,30,223,235,120,143,239,115,244,241,253,142,62,126,192,209,199,15,58,230,196,135,28,227,245,97,199,115,125,196,209,214,71,79,237,240,71,210,58,113,141,1,131,156,66,24,161,77,233,105,116,30,139,164,202,0,13,199,236,215,185,51,22,155,251,159,17,162,165,121,49,198,40,197,16,248,177,227,185,102,10,208,115,58,190,207,8,191,162,145,49,228,13,49,32,172,204,138,129,42,105,217,47,192,0,181,177,56,93,248,88,9,107,79,147,50,180,214,116,238,196,207,199,147,147,83,239,111,67,201,8,251,69,6,93,251,237,212,186,223,154,217,83,204,94,126,17,230,119,86,12,121,43,209,196,183,8,99,225,107,72,215,202,251,53,49,153,116,161,147,227,123,20,208,161,164,72,150,21,13,234,24,54,102,216,42,67,193,235,157,26,213,162,109,237,119,106,33,53,205,138,17,104,98,166,65,147,81,179,190,181,174,46,23,118,244,241,34,39,126,220,247,162,39,126,220,247,98,39,126,255,38,201,197,79,252,254,77,146,75,56,198,254,146,142,177,191,148,227,185,46,125,180,53,117,97,61,108,60,116,191,228,57,90,208,9,97,111,13,213,149,129,160,144,75,235,44,220,103,8,218,251,234,88,143,23,50,107,50,17,75,25,227,50,199,156,208,8,233,47,3,231,33,87,85,44,134,193,181,20,105,0,233,182,69,76,252,165,45,252,0,0,152,11,23,77,152,215,129,247,21,250,74,3,153,10,147,46,235,232,227,229,28,109,93,222,207,86,188,130,163,173,43,58,214,208,149,28,107,232,202,142,62,94,197,209,199,171,58,250,120,53,199,252,186,186,99,188,174,225,120,174,107,58,218,186,182,163,173,235,156,234,219,184,178,10,42,161,109,203,197,12,137,189,205,173,208,238,151,8,177,41,170,88,222,8,58,59,240,44,40,239,182,189,10,84,228,206,113,211,19,9,231,57,158,235,186,71,91,96,6,216,151,197,44,1,9,84,148,208,227,89,65,114,20,227,102,26,0,217,49,4,27,190,190,31,56,42,2,0,174,160,175,45,86,41,148,71,238,31,7,227,156,20,101,252,84,0,0
]);

export const transferVK = new Uint8Array([
0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,1,15,186,171,9,10,86,173,99,135,111,63,87,36,221,193,133,165,243,62,129,97,248,250,174,17,136,225,210,190,71,58,167,37,37,135,164,230,146,75,118,50,103,121,98,142,201,105,26,175,78,46,233,62,217,185,110,56,82,235,181,97,85,51,172,46,152,7,88,253,153,48,218,76,89,62,78,91,55,238,94,83,237,120,254,117,142,223,209,174,165,98,96,145,52,25,182,30,156,40,106,66,124,201,35,219,120,222,219,199,154,60,33,222,33,195,92,81,119,218,14,33,223,188,162,56,190,136,108,44,189,140,204,232,139,11,53,32,194,137,185,0,233,72,214,132,30,100,198,123,211,0,45,186,32,128,65,138,125,100,145,34,55,211,66,107,38,189,60,137,220,247,115,55,83,146,75,90,78,69,237,207,102,136,129,84,39,128,133,66,245,142,78,40,126,179,7,168,249,57,134,33,1,10,249,35,135,245,95,113,213,139,13,163,159,92,43,7,126,44,226,1,36,171,241,11,171,30,217,95,114,6,136,165,9,46,12,148,179,194,213,227,54,188,251,41,250,3,216,164,93,197,20,115,145,172,208,34,237,169,174,251,127,172,243,116,109,234,87,1,202,55,18,117,55,36,151,28,173,128,67,247,81,126,82,12,86,107,62,3,40,36,71,151,12,161,101,19,210,215,98,67,225,82,182,104,247,143,55,144,97,119,151,68,19,234,27,213,196,224,238,2,34,185,151,29,7,2,10,177,225,13,164,37,219,211,64,8,194,214,82,84,43,185,200,159,202,150,39,237,81,201,104,0,164,133,202,84,180,157,126,86,109,86,186,229,103,105,66,240,78,230,9,32,244,26,14,227,219,43,12,58,130,30,175,15,224,1,89,55,214,14,6,235,169,152,70,120,109,149,72,78,47,30,167,14,39,238,177,156,64,184,105,28,127,84,76,33,202,9,156,79,207,150,247,201,164,55,110,5,9,73,11,254,37,204,222,41,40,156,123,0,86,168,100,208,75,88,213,36,65,21,143,145,206,8,104,11,130,97,184,79,219,242,108,126,43,70,201,207,82,49,62,10,45,22,147,8,60,67,180,16,158,55,119,231,201,136,144,124,101,219,47,65,241,216,171,254,100,52,20,150,214,191,5,92,233,144,192,138,9,223,13,25,47,177,63,71,41,151,190,48,136,117,203,73,44,188,121,71,12,133,52,169,206,52,19,199,248,102,28,1,141,170,91,44,57,159,189,224,107,110,59,57,4,186,97,196,248,179,145,137,224,66,133,245,245,231,34,202,227,252,177,155,16,117,224,9,255,194,197,244,130,135,246,155,189,206,254,189,91,239,84,43,52,187,186,148,61,146,230,192,31,117,91,207,7,42,83,7,176,35,185,36,27,46,111,137,185,82,7,225,72,193,233,130,42,140,97,54,210,82,199,125,93,194,46,153,93,150,0,27,115,101,144,73,34,97,42,117,99,178,152,207,200,74,42,123,142,124,104,142,245,190,151,152,175,94,215,204,67,201,79,13,36,46,76,98,153,255,158,28,56,30,193,227,164,46,38,105,230,207,46,89,61,11,104,215,79,244,209,68,166,26,140,24,204,160,121,123,193,36,203,154,11,40,174,157,63,198,166,250,105,219,244,60,132,236,83,250,116,136,40,255,181,232,173,9,196,254,211,22,172,179,173,86,118,86,149,0,128,57,204,81,194,29,61,26,137,161,162,99,72,7,34,206,91,65,10,14,3,103,196,0,53,66,102,133,3,152,210,72,184,73,45,125,195,23,87,87,123,170,76,51,6,233,57,171,205,24,9,38,201,57,193,43,83,230,175,18,113,155,16,193,116,242,96,221,98,60,74,113,46,66,62,50,218,176,56,206,76,113,7,15,224,40,45,168,116,180,99,72,171,47,115,251,97,222,142,33,176,74,67,247,43,148,250,46,16,22,25,126,207,152,59,46,45,38,193,67,220,242,158,37,162,53,79,52,39,178,149,186,142,38,220,109,27,174,130,95,86,78,140,102,215,17,179,42,6,162,33,211,86,173,47,17,216,92,209,114,116,255,143,199,70,106,252,9,166,193,246,214,111,198,226,131,55,39,216,44,169,229,118,182,154,230,226,234,201,187,101,131,152,166,112,110,10,253,242,180,106,115,96,253,156,22,126,79,193,208,213,3,114,254,26,225,219,52,107,66,120,137,251,223,147,104,33,125,115,252,144,82,51,190,80,34,176,233,114,225,221,213,64,27,136,238,8,38,52,92,109,24,126,141,75,216,240,61,35,19,203,87,225,245,183,200,222,27,96,13,8,224,72,1,171,36,9,190,73,103,141,166,225,135,124,126,10,92,162,112,236,88,105,246,49,25,117,9,251,134,74,127,235,211,144,130,240,9,51,175,179,29,152,0,17,178,145,40,224,203,114,189,232,215,231,35,12,165,142,1,75,165,1,52,196,115,252,125,120,40,120,32,124,215,46,144,102,27,9,190,196,138,102,132,3,88,224,207,76,78,240,146,1,143,71,245,233,197,170,111,178,22,0,68,161,39,58,189,183,59,32,197,231,174,80,183,101,153,197,222,196,15,64,106,149,69,229,50,81,30,37,79,249,13,113,15,103,219,119,60,0,170,46,42,157,39,185,168,161,62,161,199,177,222,206,205,113,181,190,165,188,82,69,53,240,16,253,232,218,237,172,27,241,182,129,116,255,134,88,105,52,193,5,165,176,227,7,26,219,4,198,94,169,75,70,253,138,33,208,246,134,27,176,58,52,253,28,65,53,57,206,244,156,211,33,135,0,106,56,26,2,197,80,182,231,87,201,82,221,36,139,141,95,7,185,32,131,8,190,179,1,167,93,178,245,97,79,29,220,181,106,3,211,121,60,207,100,173,32,172,209,5,214,234,17,140,7,155,143,38,118,162,140,14,124,158,231,108,199,219,235,23,76,225,158,96,88,210,84,72,130,233,62,38,91,49,157,128,101,151,19,179,119,85,197,123,60,72,108,22,208,185,247,118,70,224,131,111,96,5,106,192,115,28,213,15,70,82,236,111,208,102,198,224,107,84,223,13,163,70,53,225,161,201,234,39,102,171,222,30,41,204,93,119,87,44,69,21,218,95,116,194,55,105,22,48,167,99,95,208,142,141,145,220,113,233,2,97,186,108,43,43,206,197,50,70,117,106,162,45,155,177,224,50,58,236,164,132,163,33,85,206,20,200,174,153,116,237,219,64,213,232,111,15,33,15,89,110,119,129,247,26,89,83,215,0,253,198,163,37,17,184,149,49,29,144,131,150,169,87,124,166,185,164,238,219,185,251,50,146,57,79,36,28,231,252,183,230,195,148,61,242,45,222,107,159,215,133,215,182,57,38,95,57,60,144,20,184,244,102,174,178,236,84,127,34,46,41,31,235,251,241,115,57,66,156,57,241,8,45,198,82,18,1,253,96,170,79,2,148,123,78,20,33,197,23,114,13,25,106,92,96,15,189,209,72,9,105,33,3,51,155,85,237,33,150,186,145,87,101,124,21,76,228,117,131,219,100,81,22,139,209,177,73,140,115,144,55,180,186,136,92,96,59,247,219,3,254,28,243,64,31,22,227,190,172,137,138,188,82,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,39,135,193,64,116,85,199,219,195,118,225,5,55,87,75,254,87,43,59,190,141,122,109,233,135,146,220,94,230,154,51,220,10,153,174,113,192,39,126,34,53,137,193,180,7,164,223,174,33,140,114,122,252,92,140,68,167,172,233,185,205,136,134,33
]);

export const transferRawProof = new Uint8Array([
0,0,1,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,28,12,44,212,128,107,216,24,73,143,78,245,136,54,121,77,74,182,20,23,222,110,97,238,25,143,125,226,88,152,229,14,17,218,91,3,162,216,138,219,149,157,95,4,248,224,52,85,229,158,54,182,143,234,189,97,112,147,12,215,212,115,238,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,225,91,198,125,187,33,97,111,185,203,71,187,68,98,243,156,54,209,114,125,244,241,208,94,76,24,174,159,143,99,24,18,205,193,230,123,0,217,134,40,82,121,215,159,123,79,39,106,190,34,236,218,37,168,60,94,49,28,180,16,69,214,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,4,1,172,158,236,25,180,245,71,47,72,121,61,185,242,11,57,70,227,234,171,141,62,203,188,62,198,155,203,233,229,3,197,119,223,61,120,69,166,245,135,94,30,30,184,96,72,113,174,36,168,182,80,207,208,164,188,112,171,85,166,130,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,87,235,157,112,44,253,249,173,24,206,97,76,196,158,182,238,74,34,96,247,140,107,168,142,176,231,39,137,212,86,167,23,41,174,249,50,9,81,191,219,57,173,60,82,5,119,102,111,218,190,49,140,225,197,69,224,129,242,190,146,87,51,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,225,91,198,125,187,33,97,111,185,203,71,187,68,98,243,156,54,209,114,125,244,241,208,94,76,24,174,159,143,99,24,18,205,193,230,123,0,217,134,40,82,121,215,159,123,79,39,106,190,34,236,218,37,168,60,94,49,28,180,16,69,214,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,55,174,107,62,179,139,179,104,229,46,79,45,178,105,103,113,13,127,79,70,161,169,99,189,83,173,89,241,97,127,232,21,131,244,182,219,57,131,57,208,99,47,215,33,28,81,142,230,191,36,219,148,174,15,6,53,165,118,5,21,213,126,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,225,91,198,125,187,33,97,111,185,203,71,187,68,98,243,156,54,209,114,125,244,241,208,94,76,24,174,159,143,99,24,18,205,193,230,123,0,217,134,40,82,121,215,159,123,79,39,106,190,34,236,218,37,168,60,94,49,28,180,16,69,214,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,42,31,243,80,71,132,136,227,160,184,191,154,124,189,71,203,167,149,186,95,241,144,31,22,6,88,234,215,33,224,222,6,182,251,93,33,17,38,73,57,81,199,224,223,156,237,63,21,80,13,125,173,78,154,107,103,135,101,135,232,195,152,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,237,154,172,214,154,44,31,79,118,145,66,195,227,157,219,18,89,62,120,144,40,176,180,47,7,185,166,107,221,200,74,21,171,121,21,204,93,216,38,152,104,204,208,95,56,111,188,96,252,151,162,232,35,219,171,141,96,116,115,69,0,99,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,252,212,66,19,108,172,133,142,39,139,80,243,229,173,160,100,71,12,4,17,143,243,61,116,165,203,44,192,251,185,214,2,235,105,195,138,123,144,134,57,68,147,142,245,227,182,62,208,205,17,158,86,39,27,166,101,230,79,248,100,93,64,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,46,93,165,15,175,163,190,63,196,168,5,153,51,243,66,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,88,92,252,75,91,108,153,232,21,104,102,84,160,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,122,14,234,205,231,212,127,16,87,135,23,232,52,209,219,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,183,86,106,101,174,197,88,116,85,252,178,201,70,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,130,238,131,44,244,203,150,25,194,9,70,199,60,23,109,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,244,230,196,186,145,235,238,8,215,83,95,213,172,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,96,169,26,74,14,209,132,18,117,191,37,169,175,146,174,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,179,225,90,209,218,100,172,97,253,172,29,248,168,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,148,127,185,196,161,159,182,237,85,146,11,147,171,190,118,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,4,212,133,151,180,225,228,130,178,209,111,217,32,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,7,173,222,81,101,67,169,194,171,5,27,71,33,144,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,90,87,67,91,144,148,214,165,53,138,244,210,116,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,204,93,190,233,78,216,25,216,170,241,240,93,178,139,139,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,49,25,104,213,99,108,121,167,186,59,152,251,80,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,66,20,175,240,31,90,155,168,63,230,75,249,224,230,238,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,176,201,243,54,80,139,232,244,38,47,61,249,118,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,204,93,190,233,78,216,25,216,170,241,240,93,178,139,139,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,49,25,104,213,99,108,121,167,186,59,152,251,80,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,66,20,175,240,31,90,155,168,63,230,75,249,224,230,238,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,176,201,243,54,80,139,232,244,38,47,61,249,118,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,43,49,239,230,160,26,10,43,134,17,252,141,28,225,144,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,156,79,173,245,227,239,46,138,66,43,175,206,164,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,33,219,94,118,209,18,139,187,18,62,128,131,198,199,79,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,108,33,14,159,120,150,70,92,203,72,8,107,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,241,235,21,92,5,9,61,138,36,173,96,158,18,245,48,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,74,230,226,254,102,64,242,246,225,30,250,115,147,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,69,146,234,251,1,208,13,2,39,226,165,24,17,176,57,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,192,143,67,174,73,150,225,18,230,223,48,47,11,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,135,232,254,176,149,241,17,145,97,103,41,119,122,43,162,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,98,150,86,194,152,102,67,88,221,201,82,185,26,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,93,158,44,233,255,157,86,56,96,102,41,227,93,238,226,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,29,168,160,155,47,31,60,195,60,78,146,201,60,134,26,232,131,210,118,42,113,220,10,193,237,208,95,185,223,53,236,156,148,246,80,78,230,156,172,161,243,20,117,79,64,186,21,123,202,160,107,7,46,77,173,142,87,230,33,199,121,39,59,151,83,82,41,106,137,244,151,64,2,127,122,176,191,71,43,153,47,70,180,78,22,179,120,118,18,28,87,48,142,165,83,146,180,48,6,127,193,111,238,235,41,147,197,189,201,26,21,183,90,151,51,50,239,36,94,36,24,82,75,30,247,27,108,119,208,113,53,46,245,219,12,92,73,60,74,222,163,185,35,19,64,179,116,107,209,61,9,192,83,47,203,64,136,238,178,141,38,188,219,252,163,25,91,116,181,123,172,74,22,30,17,245,35,31,13,94,253,250,164,145,129,92,56,77,82,22,188,161,179,135,157,239,103,246,12,121,100,77,229,119,140,180,8,240,94,225,119,224,77,178,43,45,224,110,54,189,174,185,88,187,28,195,69,210,133,125,49,116,96,130,164,215,105,12,25,172,52,48,181,207,91,11,164,69,105,8,99,22,174,223,179,108,179,213,112,89,115,21,61,247,70,149,131,209,125,55,21,22,209,136,142,205,63,229,232,243,144,160,254,244,169,188,221,124,216,134,102,151,136,4,210,149,237,241,92,176,55,250,37,44,162,70,244,15,252,100,26,73,226,113,117,123,157,11,247,22,172,31,45,105,144,166,218,148,224,241,142,190,150,218,28,77,34,163,43,161,67,97,99,52,86,209,211,50,20,126,86,16,82,235,233,222,15,199,70,185,123,11,170,37,180,65,44,106,137,148,131,179,216,9,44,128,233,140,20,242,83,123,251,84,129,206,58,219,140,7,203,126,32,82,18,182,110,147,26,63,184,21,175,208,150,5,236,211,165,218,180,173,151,170,14,23,108,10,105,40,228,136,13,209,119,142,61,62,236,83,34,117,166,250,167,98,195,240,240,195,71,124,26,130,130,106,4,231,248,162,191,107,25,127,127,63,245,94,171,97,211,162,36,118,145,241,133,142,164,35,32,185,70,237,95,0,51,232,54,138,91,178,204,214,163,89,72,58,65,222,156,222,0,14,41,218,11,120,228,112,3,186,169,74,3,52,91,8,179,100,154,212,235,105,123,225,124,11,170,44,124,11,98,220,254,66,23,159,142,100,99,191,231,49,219,190,81,17,107,38,138,75,249,80,57,142,14,229,130,29,9,242,79,58,31,47,220,143,13,101,122,178,213,34,76,28,231,75,0,95,162,90,136,6,80,118,234,147,18,163,137,249,243,111,1,2,160,231,72,136,42,128,22,61,192,114,50,116,193,210,190,130,106,193,29,10,40,33,63,78,226,150,187,8,228,193,46,125,248,185,76,218,14,95,81,201,102,30,105,240,130,36,244,151,107,232,1,108,23,55,102,9,27,153,149,131,217,248,8,32,145,153,237,168,41,92,153,172,180,24,235,28,165,177,232,6,9,123,112,255,184,45,46,242,186,82,140,78,184,241,234,35,190,193,49,174,11,139,0,95,31,60,151,53,133,195,72,25,129,32,244,147,97,182,184,130,24,237,131,70,147,112,191,190,5,172,203,57,10,136,17,253,249,80,54,177,161,77,110,36,242,211,234,205,89,217,83,131,204,43,138,243,9,62,126,101,103,96,99,236,9,180,212,253,245,44,75,240,200,5,7,117,130,177,18,79,2,93,54,22,157,96,7,221,117,199,46,206,218,2,188,157,9,48,61,66,166,89,118,254,90,196,105,170,170,56,44,36,227,124,226,198,131,19,174,57,24,17,158,179,247,124,116,11,40,82,218,204,18,222,108,198,232,128,41,107,205,139,186,120,35,195,1,232,124,234,167,16,168,109,61,100,28,68,194,88,11,175,198,248,182,253,166,74,114,201,109,167,222,220,24,75,76,119,86,166,167,166,158,48,82,224,195,120,38,97,130,43,0,170,151,218,244,154,191,181,97,3,126,223,174,150,217,50,230,55,44,197,52,22,100,137,137,253,236,107,68,47,218,153,18,190,214,36,203,65,65,131,52,123,30,133,43,148,147,84,63,112,141,50,53,225,53,249,234,61,209,225,107,59,53,151,32,123,178,49,184,234,2,49,191,72,63,24,209,70,22,31,53,207,74,69,164,107,157,216,181,134,18,40,229,26,237,24,3,8,141,126,240,17,255,160,109,168,55,164,96,106,235,231,140,250,231,234,9,201,127,247,169,105,103,202,148,211,25,231,47,202,139,226,182,169,132,161,228,92,222,152,216,31,99,159,139,134,190,112,52,129,133,25,183,170,216,183,60,139,242,69,21,63,215,104,99,108,200,146,254,246,118,191,242,20,252,238,154,183,249,12,197,249,123,217,65,211,101,143,243,250,179,120,34,225,39,113,223,184,205,122,20,75,140,210,122,15,235,100,146,110,213,253,110,39,249,126,1,157,62,128,126,8,63,118,4,47,88,234,87,160,219,48,170,9,161,175,9,154,249,20,65,208,32,240,221,167,193,160,55,203,93,224,41,149,19,95,40,50,59,231,83,143,129,220,206,42,18,215,243,147,76,95,208,125,88,8,50,252,78,200,40,14,30,64,115,138,178,147,38,248,66,52,147,21,144,29,74,118,188,249,163,180,138,30,17,204,117,208,108,232,251,123,45,73,143,137,4,186,31,107,5,233,207,249,173,148,182,120,177,4,102,63,6,107,228,223,140,254,98,200,192,253,245,108,94,241,226,242,38,195,168,63,13,210,113,199,4,56,69,79,48,225,214,6,45,126,186,201,5,105,84,228,35,142,249,23,80,90,188,233,169,2,95,84,33,95,220,195,186,136,156,108,228,223,32,69,215,39,83,170,16,28,129,85,118,206,240,160,44,175,45,245,33,164,96,224,10,182,217,223,134,46,2,12,2,178,10,89,166,121,4,71,137,97,136,249,210,77,45,96,131,236,79,197,210,156,134,205,38,231,21,49,26,146,131,206,27,120,70,92,61,200,39,171,48,16,8,155,0,220,152,114,130,151,114,153,128,4,178,137,34,137,170,142,97,232,59,190,103,105,38,13,239,110,28,36,246,189,106,25,26,87,250,111,7,77,126,212,237,143,183,42,0,216,245,83,64,44,89,174,232,169,92,184,112,192,218,80,8,65,196,212,33,36,249,98,89,247,73,1,86,98,55,51,9,27,31,37,241,32,55,182,58,78,120,240,69,235,73,41,138,114,13,220,95,252,29,10,234,52,196,76,59,199,7,39,15,189,230,93,27,90,162,40,106,89,45,197,0,223,145,204,132,71,24,106,40,164,31,100,210,237,114,85,122,147,158,83,20,149,160,76,92,62,89,102,52,146,46,77,38,224,18,174,194,78,3,5,104,84,50,124,31,201,209,205,192,215,193,183,4,74,243,242,211,91,157,53,58,53,248,243,96,71,225,39,229,1,190,105,187,201,64,43,231,72,141,32,48,129,213,255,47,54,168,109,95,182,224,124,212,196,14,6,156,164,224,182,5,113,245,110,170,36,197,230,7,27,67,57,54,195,47,189,47,136,122,26,186,168,141,71,128,251,54,38,49,207,154,61,185,219,78,177,143,131,81,126,253,187,116,197,193,63,81,102,36,20,98,84,5,44,27,67,155,98,251,52,166,224,168,53,215,125,194,19,196,235,211,55,235,90,47,47,44,160,92,164,39,39,99,70,112,96,67,4,115,30,64,169,163,121,208,241,61,190,6,84,194,76,152,93,196,231,148,109,124,185,1,239,10,32,175,119,90,174,209,232,71,151,178,134,142,198,121,60,71,251,123,106,239,27,149,9,74,57,158,135,252,47,236,121,5,144,244,163,140,16,62,10,192,184,15,247,255,238,134,170,147,85,246,48,129,116,93,63,225,190,211,195,10,4,78,221,6,57,247,135,86,54,176,12,126,49,48,205,53,35,26,114,233,236,190,92,30,188,23,185,131,197,66,209,184,127,116,79,25,125,81,114,229,110,213,32,169,251,241,64,145,130,31,42,161,105,253,1,200,46,5,80,46,68,223,178,164,183,75,234,45,114,19,75,232,57,114,157,233,245,226,213,199,180,61,36,216,96,31,72,128,193,226,95,77,108,19,12,102,157,209,67,20,148,84,44,120,240,139,123,193,7,90,183,79,223,65,185,217,171,240,125,229,4,141,80,160,215,129,112,115,207,204,19,28,172,9,1,242,245,80,244,157,144,232,76,48,254,44,234,96,30,61,154,1,98,224,6,75,238,159,106,133,177,9,36,10,215,73,103,16,162,68,11,227,11,147,146,51,163,180,103,7,249,88,68,112,115,17,218,21,131,53,186,115,87,33,22,9,36,59,21,142,36,186,172,148,219,21,65,195,227,153,211,249,123,246,189,195,145,156,124,28,252,87,87,76,12,149,124,5,163,198,162,182,202,239,1,248,32,227,111,244,146,2,99,187,152,143,75,72,120,38,82,57,199,153,224,230,2,56,106,14,216,204,178,87,107,24,248,186,16,213,243,6,5,176,248,67,188,151,134,89,166,255,218,181,35,161,147,141,143,40,244,6,140,181,160,156,9,76,197,24,103,97,216,60,222,102,198,132,40,124,57,78,217,207,255,36,191,240,245,201,177,128,39,1,103,30,199,230,73,177,248,92,177,145,228,0,199,68,33,106,83,75,75,174,207,37,86,104,192,255,27,33,59,214,164,44,113,40,100,237,94,251,130,149,140,71,201,117,110,102,163,18,6,107,220,85,155,157,40,23,147,107,206,79,221,167,33,24,168,58,226,179,18,205,136,147,35,159,116,124,129,87,19,218,151,0,94,161,139,161,222,209,192,38,3,49,118,204,78,29,48,182,251,195,134,63,173,94,131,28,187,121,19,18,179,72,68,169,77,187,166,13,132,224,78,64,137,186,135,107,79,26,213,169,155,144,88,159,235,8,113,182,175,125,135,128,110,19,229,151,59,146,6,145,35,178,37,19,69,155,81,215,47,32,227,145,114,15,144,146,254,254,130,196,84,188,10,186,144,218,252,27,205,78,68,170,187,66,49,26,176,134,214,88,130,5,134,181,183,200,240,92,175,43,204,54,190,166,32,112,253,48,62,142,131,31,14,250,148,19,55,173,179,6,16,239,77,42,75,136,38,159,57,117,151,129,211,254,240,153,19,72,81,102,153,210,215,124,246,9,186,169,219,194,26,166,96,44,77,11,90,137,20,246,150,217,117,124,212,45,231,93,219,209,227,126,37,89,187,13,85,224,39,47,196,26,229,251,70,195,230,11,58,192,130,92,149,213,254,106,151,18,15,205,11,146,208,223,21,195,136,228,199,116,233,103,137,159,47,210,87,82,163,37,21,109,157,171,244,161,136,144,209,39,226,28,90,178,41,26,57,205,23,28,240,66,148,32,248,134,140,125,94,253,4,42,119,239,197,222,211,75,145,246,213,39,32,122,8,6,122,249,88,64,244,83,222,97,80,229,48,170,51,140,133,32,159,30,1,47,229,103,112,46,209,85,8,110,125,54,159,185,125,18,51,179,226,41,57,86,219,55,61,160,171,126,223,240,156,23,179,168,174,6,104,113,80,47,144,5,224,140,14,154,205,221,252,67,92,79,111,24,185,139,5,157,53,76,64,28,140,35,226,101,235,131,245,71,79,1,184,99,251,27,40,33,195,181,53,205,181,225,94,192,183,161,247,95,17,50,92,247,220,28,168,140,124,172,43,73,52,119,211,174,94,238,117,9,223,70,163,47,237,100,19,150,111,241,235,115,27,244,110,25,198,36,217,201,233,179,148,150,41,235,217,203,172,169,239,193,85,12,116,170,114,87,15,175,121,221,113,181,121,33,182,143,79,47,171,207,114,16,12,105,135,56,212,149,219,110,37,88,138,34,193,2,140,82,128,97,119,138,7,136,202,176,108,72,170,39,241,16,241,204,138,226,255,59,115,31,22,170,22,199,5,122,193,69,106,161,49,93,106,137,104,109,104,242,251,72,233,24,28,127,80,171,209,165,1,92,137,139,156,67,75,169,30,147,227,124,6,174,88,25,187,63,114,73,34,191,97,210,132,19,141,35,13,105,11,89,145,186,36,176,142,200,101,212,251,172,171,63,134,122,111,23,109,150,145,104,166,106,14,129,210,2,123,163,133,231,109,111,197,207,252,171,21,178,4,71,140,247,115,48,52,89,195,113,4,211,225,170,184,101,205,52,217,9,200,103,216,216,226,220,202,126,74,249,235,76,181,130,15,1,227,178,36,125,38,159,42,213,10,221,113,164,55,233,156,35,137,6,156,214,231,92,231,233,51,244,182,161,177,210,137,242,218,43,200,206,136,149,135,19,254,99,145,18,140,174,139,10,33,249,69,121,42,112,175,217,32,70,165,139,90,68,60,33,60,226,118,197,215,43,91,114,125,71,16,164,206,145,98,31,98,8,234,77,10,50,30,58,155,58,17,139,87,176,205,10,132,74,125,132,28,41,36,34,116,139,34,182,102,205,140,40,201,72,140,229,126,123,97,233,69,249,34,49,147,15,86,186,147,171,185,131,206,65,133,11,112,211,2,68,12,44,117,28,135,138,71,214,175,237,81,49,221,224,106,181,17,15,134,220,96,206,70,239,197,97,3,27,85,28,207,121,200,197,79,4,154,87,23,244,116,102,198,227,43,45,10,4,62,14,131,135,145,42,91,138,230,181,4,46,59,144,121,174,171,127,230,11,161,77,72,28,225,71,203,166,11,59,14,140,104,235,5,154,20,96,208,171,178,237,94,242,3,123,137,98,182,157,107,27,159,195,123,147,73,130,246,102,118,198,155,136,218,225,99,138,90,15,222,179,32,184,64,178,25,130,155,93,131,176,180,0,91,63,195,62,243,41,214,204,134,148,108,237,218,165,206,42,127,157,129,108,183,119,214,241,3,92,198,141,229,215,167,45,49,135,56,237,105,81,75,173,111,172,203,222,82,252,135,184,40,129,149,141,151,34,233,202,32,197,3,201,139,222,159,37,94,199,96,205,132,123,5,85,173,25,188,32,199,117,68,250,22,99,178,197,42,248,48,115,131,140,96,197,67,114,234,18,81,182,34,73,71,129,41,35,136,183,241,77,155,2,106,96,39,177,187,197,200,101,23,235,68,155,151,35,96,95,174,15,148,143,119,206,37,66,22,121,43,160,38,166,152,123,149,137,56,127,249,230,205,172,9,111,97,106,37,126,107,51,20,41,128,179,44,71,47,98,43,227,145,238,26,227,123,120,204,244,61,80,118,38,167,1,148,79,144,160,186,222,110,247,167,43,57,145,126,160,241,34,198,218,135,248,211,254,4,25,186,129,76,44,209,246,41,183,81,161,24,22,16,123,139,88,87,30,223,219,74,75,29,8,184,204,82,117,237,75,78,60,184,220,57,120,90,220,211,51,212,115,228,173,228,49,247,2,47,16,223,243,166,229,225,116,203,103,123,182,94,251,1,158,70,166,120,19,65,255,188,70,160,126,159,163,51,219,233,87,22,33,12,33,181,169,95,10,49,16,102,80,126,93,69,171,103,173,149,6,241,141,187,86,215,110,212,56,79,65,29,84,0,11,48,29,206,132,173,197,190,48,32,113,2,76,19,198,15,43,3,8,34,106,9,219,31,138,20,204,31,189,215,131,190,2,97,170,150,146,75,177,99,209,95,21,48,50,243,71,216,4,75,80,39,49,238,95,15,8,47,210,186,106,74,36,71,30,112,194,186,66,174,136,160,154,6,180,71,55,188,185,114,48,118,72,137,116,14,121,12,36,13,138,71,49,17,209,246,43,193,248,23,37,14,113,60,218,107,246,224,245,245,178,239,180,211,30,116,241,214,235,184,166,144,84,246,158,97,90,48,6,23,80,195,67,129,56,42,250,220,203,202,133,197,45,133,124,46,48,164,214,195,109,60,227,139,184,140,178,38,139,66,29,52,209,183,184,100,53,62,7,206,85,10,17,223,199,117,59,22,223,146,153,89,255,235,127,79,153,14,137,126,39,222,21,150,146,77,99,81,247,45,170,92,231,49,210,209,77,242,232,106,227,5,22,180,91,61,37,223,39,229,185,117,55,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,3,176,220,86,122,213,130,231,178,229,228,171,149,9,114,39,216,125,253,223,32,75,186,187,181,60,77,40,104,249,123,39,65,224,159,165,128,173,65,103,40,189,18,57,9,82,237,67,250,165,139,249,5,28,0,138,250,92,58,198,98,19,231,20,196,56,243,224,119,176,3,3,203,155,39,135,14,22,161,140,220,244,122,66,156,233,167,142,95,63,223,81,255,95,30,28,1,200,43,253,48,77,179,168,151,241,123,248,91,254,52,184,123,88,217,90,205,118,180,5,189,6,196,167,104,153,199,13,73,66,229,207,14,248,200,50,64,105,29,6,242,130,7,89,224,196,21,144,11,43,24,10,64,110,12,240,165,196,2,29,155,154,232,34,109,249,69,170,70,155,233,140,133,64,54,172,198,171,250,220,214,211,252,235,24,183,83,187,88,144,171,19,114,139,106,210,161,152,130,132,0,248,31,79,156,35,34,181,93,133,50,161,16,191,235,96,3,21,143,21,193,190,204,9,142,215,43,9,84,137,101,161,7,236,121,83,245,166,162,113,184,209,84,193,184,6,144,70,149,215,232,42,107,125,117,38,178,88,233,36,177,126,247,171,226,85,144,204,236,225,46,220,105,219,192,3,251,137,167,97,35,246,35,245,17,141,172,32,157,35,229,175,155,60,116,235,139,137,105,103,7,100,242,154,35,73,194,218,69,195,74,96,182,86,24,234,238,116,108,16,59,46,41,125,108,95,72,46,148,162,6,83,173,169,213,243,207,229,202,233,210,78,63,10,185,178,180,28,78,125,186,37,93,93,167,111,88,213,118,159,41,117,10,102,41,38,69,22,166,152,209,151,1,217,216,58,202,195,24,190,33,41,36,19,114,39,153,32,81,24,6,13,82,102,85,79,126,75,73,184,157,34,57,228,129,134,55,187,185,77,154,50,210,115,200,32,152,29,67,59,58,151,156,143,13,68,68,50,209,57,155,48,157,76,106,33,251,143,54,145,43,156,80,116,54,222,33,27,165,214,159,190,247,68,197,99,118,133,41,29,167,72,139,58,87,224,110,195,100,229,118,167,226,192,249,125,41,122,36,35,108,237,9,232,101,80,59,36,170,114,104,40,153,17,63,110,224,200,167,115,2,251,123,249,243,123,31,226,76,189,63,37,18,203,92,242,220,210,93,114,117,196,150,121,63,227,225,104,34,179,38,58,96,37,236,19,215,182,229,150,127,247,71,19,58,162,185,49,238,169,193,46,201,174,66,10,4,94,144,251,24,91,159,110,110,14,69,8,137,16,230,111,84,23,45,28,66,53,50,18,135,61,214,158,27,45,28,251,197,205,208,194,9,25,45,193,10,205,132,200,92,6,195,244,204,218,114,3,100,62,194,194,203,186,69,247,6,145,72,36,132,177,51,46,101,78,3,176,130,30,0,140,185,163,12,151,84,173,227,44,33,181,239,212,27,220,48,179,176,110,68,244,231,49,44,218,151,12,69,191,219,35,204,244,43,182,32,25,209,60,120,37,75,246,130,144,195,206,35,37,161,13,198,178,39,246,95,127,227,17,91,25,81,52,49,189,151,90,160,205,206,26,98,4,81,140,127,210,132,8,195,48,174,120,191,19,172,191,158,123,96,155,101,246,121,20,2,136,11,85,89,136,66,56,152,45,169,245,199,32,155,167,175,183,151,0,98,202,149,162,225,239,202,154,102,209,125,82,186,23,218,64,4,34,118,11,146,23,112,179,133,5,44,129,60,182,41,117,91,2,217,93,233,157,249,103,199,217,187,221,146,113,149,21,222,173,164,189,172,42,39,44,161,34,99,253,67,27,230,121,82,70,133,42,48,18,158,49,168,233,157,176,198,207,189,168,202,8,170,154,231,47,225,49,129,132,255,48,24,164,112,230,87,115,238,88,238,218,87,79,251,61,103,220,149,35,182,135,75,74,224,129,65,48,33,215,128,129,136,188,200,139,13,232,93,130,251,51,17,119,130,152,166,14,214,247,67,230,40,75,8,135,158,199,204,22,223,79,56,45,41,93,168,79,86,55,45,150,164,2,65,192,115,132,141,229,31,196,205,113,181,43,173,55,139,178,50,39,141,167,33,27,207,129,76,140,137,48,84,54,165,161,159,29,194,252,74,147,100,187,35,213,142,247,33,51,111,166,97,13,117,32,166,111,113,193,207,157,209,206,7,176,89,51,214,193,87,95,165,184,185,133,146,51,100,218,181,230,28,251,251,12,219,167,137,130,64,144,176,251,159,91,11,47,70,193,196,33,74,86,185,199,45,255,139,234,33,194,186,99,130,223,237,1,132,37,126,220,232,197,170,91,184,239,206,171,189,147,112,47,83,14,139,12,108,37,39,131,41,184,131,23,241,130,170,21,59,142,113,122,87,151,186,29,134,117,209,33,177,26,184,0,168,4,230,197,197,86,84,245,57,15,76,237,221,155,83,21,59,142,113,122,87,151,186,29,134,117,209,33,177,26,184,0,168,4,230,197,197,86,84,245,57,15,76,237,221,155,83,47,138,180,146,79,202,71,155,211,146,224,154,3,243,216,235,34,39,139,59,253,249,12,27,159,18,134,244,106,85,28,85,39,139,119,48,66,59,155,174,221,203,181,185,112,241,247,115,38,236,180,110,58,165,158,153,224,118,176,71,234,62,203,105,6,117,62,82,79,211,72,176,8,195,20,119,248,197,48,167,90,173,131,53,26,233,94,29,101,22,62,249,162,177,70,73,20,66,119,146,93,235,120,4,242,86,87,142,156,9,148,251,38,142,70,142,189,60,142,230,151,30,156,1,22,155,133,5,45,127,146,18,224,9,33,205,5,60,148,147,254,65,241,71,194,174,227,118,28,106,80,153,89,53,121,227,182,115,4,8,18,176,209,246,236,133,111,9,86,89,218,158,44,148,66,228,218,234,91,21,236,62,144,90,12,30,130,182,30,157,67,242,15,25,168,84,22,219,250,16,169,182,122,238,216,190,111,101,142,239,212,144,210,130,30,193,26,253,112,36,240,120,75,99,21,231,74,241,232,176,12,233,93,61,202,156,43,126,91,176,107,255,205,130,151,106,227,45,180,54,236,187,127,53,78,128,10,38,33,158,170,10,195,230,18,64,79,226,9,196,39,162,62,9,177,205,128,236,55,200,241,214,18,14,146,17,125,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,32,157,98,233,17,64,174,188,223,11,13,45,211,32,212,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,115,84,159,67,180,70,9,126,173,111,104,83,24,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,32,160,107,6,239,47,51,207,56,44,6,192,158,160,85,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,214,77,161,33,49,48,74,15,238,234,159,89,125,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,230,23,6,237,214,125,168,158,124,57,17,219,238,190,123,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,71,215,148,94,47,155,93,92,80,161,42,93,217,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,38,6,156,47,173,115,2,137,226,25,131,222,80,191,173,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,176,164,203,61,89,69,79,87,239,8,172,8,27,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,237,234,103,207,86,26,102,126,80,42,140,150,176,128,222,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,157,109,60,229,9,225,10,38,200,150,186,181,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,1,98,250,33,247,212,60,24,68,220,138,217,121,149,5,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,158,63,187,245,48,233,120,227,183,39,103,128,129,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,200,45,66,175,253,227,194,236,160,14,206,227,173,181,79,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,80,152,154,61,140,104,193,157,126,163,219,38,30,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,128,82,19,154,217,96,209,37,137,249,108,24,26,163,237,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,128,174,231,9,156,245,245,52,13,98,180,114,70,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,21,64,69,176,65,23,194,87,30,178,168,6,105,161,130,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,20,4,14,111,26,52,164,173,254,18,142,84,135,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,5,223,85,87,104,16,45,32,227,49,50,87,53,50,101,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,100,54,125,62,6,219,155,143,88,150,23,3,116,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,140,187,220,118,57,176,81,186,23,31,14,98,226,57,60,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,71,6,251,245,132,46,218,184,248,160,212,87,8,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,246,194,51,12,165,191,255,36,208,218,229,228,238,195,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,226,203,45,2,215,194,122,55,90,160,78,22,198,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,46,65,236,249,205,3,27,193,62,59,110,184,138,2,109,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,29,234,227,116,24,38,60,157,17,8,219,25,177,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,213,32,47,179,236,129,6,89,75,230,105,4,212,179,97,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,223,121,211,115,234,83,122,134,201,200,228,29,70,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,11,5,159,59,112,189,15,74,173,98,87,59,208,10,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,26,141,164,135,250,107,41,173,10,18,180,113,80,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,159,25,65,239,235,240,249,206,166,7,253,235,141,210,163,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,79,75,164,76,14,35,59,49,159,241,25,127,164,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,68,226,126,53,118,250,229,213,100,161,56,20,34,99,144,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,101,189,222,250,191,22,137,74,82,5,126,188,80,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,117,182,194,121,242,81,190,14,186,224,53,61,119,208,190,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,182,121,138,151,174,155,73,162,100,115,187,146,236,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,135,91,130,220,19,149,222,148,225,129,244,110,164,246,120,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,145,253,254,42,27,40,137,59,99,101,122,97,255,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,188,173,90,138,105,200,28,162,148,94,59,162,111,249,110,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,31,198,117,102,219,118,44,40,46,73,100,22,102,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,158,30,7,123,80,181,4,14,103,171,111,223,96,126,109,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,121,195,123,136,21,71,97,99,6,119,129,97,145,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,248,152,215,135,204,198,145,59,143,189,47,7,53,98,231,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,143,220,75,214,98,19,118,68,210,0,70,218,27,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,161,246,232,178,161,30,164,161,238,211,32,2,210,197,255,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,48,111,47,37,160,110,125,114,171,123,220,20,180,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,77,27,120,243,28,155,82,228,175,102,124,157,189,228,155,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,158,110,198,127,137,231,42,164,114,165,80,128,124,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,43,108,102,70,118,56,105,233,255,25,81,79,67,76,49,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,72,209,92,64,84,145,32,243,232,201,74,168,47,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,180,103,131,174,177,103,96,189,202,114,203,66,154,129,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,231,246,68,191,86,156,23,100,70,200,248,208,119,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,221,145,156,222,145,133,50,128,66,166,161,147,79,167,113,40,155,142,247,133,9,192,254,172,189,202,66,74,121,168,5,33,243,98,70,123,0,13,21,8,96,101,23,106,13,107,0,135,49,228,62,56,117,203,209,202,188,64,22,183,149,21,23,40,126,212,105,67,174,151,96,2,61,244,33,203,2,177,69,101,250,229,241,243,154,96,199,159,204,34,164,182,189,49,216,18,103,82,130,106,113,111,215,44,150,233,202,5,89,141,177,198,239,247,35,19,172,4,248,18,202,222,134,233,148,94,211,21,233,199,246,203,5,92,65,178,72,121,247,43,186,59,203,89,78,55,159,131,74,108,158,97,255,27,14,208,153,179,28,25,13,15,174,104,176,128,190,25,193,254,223,122,4,192,245,166,64,161,146,150,157,234,79,26,218,192,51,16,106,57,254,19,139,223,44,42,52,246,192,242,178,182,71,102,206,57,61,28,36,234,240,85,249,226,75,221,137,58,136,223,187,18,56,38,17,214,21,138,253,229,86,65,80,58,23,181,48,226,106,194,203,29,202,191,199,1,81,156,241,111,107,72,19,88,137,36,42,84,177,168,171,186,96,3,30,240,22,58,51,254,58,103,71,21,41,3,183,239,120,125,42,49,233,132,18,94,33,41,160,83,87,207,78,52,98,92,82,179,132,54,11,43,95,110,84,101,46,218,51,84,37,29,26,113,32,194,113,231,9,10,138,157,129,74,241,236,142,193,128,3,187,149,30,188,184,176,165,10,219,58,222,180,189,86,188,8,150,164,37,103,199,33,23,183,209,16,152,48,237,97,176,7,177,232,44,221,200,47,73,19,39,208,154,2,139,144,23,24,124,17,97,62,86,8,14,135,49,214,73,117,155,141,40,142,14,44,43,72,115,66,30,126,58,222,213,141,65,192,222,20,212,134,42,251,250,41,94,174,201,111,16,130,50,4,179,178,213,34,227,202,5,171,27,96,76,183,83,16,209,176,204,115,215,217,161,237,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,112,250,13,100,94,18,110,215,213,89,203,14,27,238,210,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,31,206,9,6,182,133,54,194,131,146,7,44,153,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,18,144,44,106,18,8,113,137,191,210,70,224,126,6,15,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,115,37,79,221,19,92,147,147,149,9,99,45,93,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,144,217,137,191,179,234,196,109,142,239,103,195,137,11,136,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,84,21,97,15,125,81,65,105,1,115,9,234,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,42,218,199,172,49,221,118,78,247,247,21,227,35,46,214,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,74,54,130,160,16,6,79,18,193,53,113,10,80,27
]);

export const transferProof = {
	publicInputs: ["0x1c0c2cd4806bd818498f4ef58836794d4ab61417de6e61ee198f7de25898e50e","0x11da5b03a2d88adb959d5f04f8e03455e59e36b68feabd6170930cd7d473ee92","0x0000000000000000000000000000000000000000000000000000000000000000","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x0000000000000000000000000000000000000000000000000000000000000000","0x2a0401ac9eec19b4f5472f48793db9f20b3946e3eaab8d3ecbbc3ec69bcbe9e5","0x03c577df3d7845a6f5875e1e1eb8604871ae24a8b650cfd0a4bc70ab55a682e4","0x0000000000000000000000000000000000000000000000000000000000000000","0x0257eb9d702cfdf9ad18ce614cc49eb6ee4a2260f78c6ba88eb0e72789d456a7","0x1729aef9320951bfdb39ad3c520577666fdabe318ce1c545e081f2be92573342","0x0000000000000000000000000000000000000000000000000000000000000000","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x0000000000000000000000000000000000000000000000000000000000000000","0x2837ae6b3eb38bb368e52e4f2db26967710d7f4f46a1a963bd53ad59f1617fe8","0x1583f4b6db398339d0632fd7211c518ee6bf24db94ae0f0635a5760515d57e9c","0x0000000000000000000000000000000000000000000000000000000000000000","0x13e15bc67dbb21616fb9cb47bb4462f39c36d1727df4f1d05e4c18ae9f8f6318","0x12cdc1e67b00d986285279d79f7b4f276abe22ecda25a83c5e311cb41045d6a5","0x0000000000000000000000000000000000000000000000000000000000000000","0x112a1ff350478488e3a0b8bf9a7cbd47cba795ba5ff1901f160658ead721e0de","0x06b6fb5d211126493951c7e0df9ced3f15500d7dad4e9a6b67876587e8c39867","0x0000000000000000000000000000000000000000000000000000000000000000","0x1bed9aacd69a2c1f4f769142c3e39ddb12593e789028b0b42f07b9a66bddc84a","0x15ab7915cc5dd8269868ccd05f386fbc60fc97a2e823dbab8d6074734500631d","0x0000000000000000000000000000000000000000000000000000000000000000","0x01fcd442136cac858e278b50f3e5ada064470c04118ff33d74a5cb2cc0fbb9d6","0x02eb69c38a7b90863944938ef5e3b63ed0cd119e56271ba665e64ff8645d40cf","0x0000000000000000000000000000000000000000000000000000000000000000"],
	proof: new Uint8Array([
0,0,1,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,46,93,165,15,175,163,190,63,196,168,5,153,51,243,66,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,88,92,252,75,91,108,153,232,21,104,102,84,160,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,122,14,234,205,231,212,127,16,87,135,23,232,52,209,219,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,183,86,106,101,174,197,88,116,85,252,178,201,70,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,130,238,131,44,244,203,150,25,194,9,70,199,60,23,109,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,244,230,196,186,145,235,238,8,215,83,95,213,172,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,96,169,26,74,14,209,132,18,117,191,37,169,175,146,174,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,179,225,90,209,218,100,172,97,253,172,29,248,168,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,148,127,185,196,161,159,182,237,85,146,11,147,171,190,118,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,4,212,133,151,180,225,228,130,178,209,111,217,32,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,7,173,222,81,101,67,169,194,171,5,27,71,33,144,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,90,87,67,91,144,148,214,165,53,138,244,210,116,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,204,93,190,233,78,216,25,216,170,241,240,93,178,139,139,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,49,25,104,213,99,108,121,167,186,59,152,251,80,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,66,20,175,240,31,90,155,168,63,230,75,249,224,230,238,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,176,201,243,54,80,139,232,244,38,47,61,249,118,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,204,93,190,233,78,216,25,216,170,241,240,93,178,139,139,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,49,25,104,213,99,108,121,167,186,59,152,251,80,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,66,20,175,240,31,90,155,168,63,230,75,249,224,230,238,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,176,201,243,54,80,139,232,244,38,47,61,249,118,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,43,49,239,230,160,26,10,43,134,17,252,141,28,225,144,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,156,79,173,245,227,239,46,138,66,43,175,206,164,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,33,219,94,118,209,18,139,187,18,62,128,131,198,199,79,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,108,33,14,159,120,150,70,92,203,72,8,107,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,241,235,21,92,5,9,61,138,36,173,96,158,18,245,48,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,74,230,226,254,102,64,242,246,225,30,250,115,147,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,69,146,234,251,1,208,13,2,39,226,165,24,17,176,57,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,192,143,67,174,73,150,225,18,230,223,48,47,11,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,135,232,254,176,149,241,17,145,97,103,41,119,122,43,162,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,98,150,86,194,152,102,67,88,221,201,82,185,26,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,93,158,44,233,255,157,86,56,96,102,41,227,93,238,226,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,29,168,160,155,47,31,60,195,60,78,146,201,60,134,26,232,131,210,118,42,113,220,10,193,237,208,95,185,223,53,236,156,148,246,80,78,230,156,172,161,243,20,117,79,64,186,21,123,202,160,107,7,46,77,173,142,87,230,33,199,121,39,59,151,83,82,41,106,137,244,151,64,2,127,122,176,191,71,43,153,47,70,180,78,22,179,120,118,18,28,87,48,142,165,83,146,180,48,6,127,193,111,238,235,41,147,197,189,201,26,21,183,90,151,51,50,239,36,94,36,24,82,75,30,247,27,108,119,208,113,53,46,245,219,12,92,73,60,74,222,163,185,35,19,64,179,116,107,209,61,9,192,83,47,203,64,136,238,178,141,38,188,219,252,163,25,91,116,181,123,172,74,22,30,17,245,35,31,13,94,253,250,164,145,129,92,56,77,82,22,188,161,179,135,157,239,103,246,12,121,100,77,229,119,140,180,8,240,94,225,119,224,77,178,43,45,224,110,54,189,174,185,88,187,28,195,69,210,133,125,49,116,96,130,164,215,105,12,25,172,52,48,181,207,91,11,164,69,105,8,99,22,174,223,179,108,179,213,112,89,115,21,61,247,70,149,131,209,125,55,21,22,209,136,142,205,63,229,232,243,144,160,254,244,169,188,221,124,216,134,102,151,136,4,210,149,237,241,92,176,55,250,37,44,162,70,244,15,252,100,26,73,226,113,117,123,157,11,247,22,172,31,45,105,144,166,218,148,224,241,142,190,150,218,28,77,34,163,43,161,67,97,99,52,86,209,211,50,20,126,86,16,82,235,233,222,15,199,70,185,123,11,170,37,180,65,44,106,137,148,131,179,216,9,44,128,233,140,20,242,83,123,251,84,129,206,58,219,140,7,203,126,32,82,18,182,110,147,26,63,184,21,175,208,150,5,236,211,165,218,180,173,151,170,14,23,108,10,105,40,228,136,13,209,119,142,61,62,236,83,34,117,166,250,167,98,195,240,240,195,71,124,26,130,130,106,4,231,248,162,191,107,25,127,127,63,245,94,171,97,211,162,36,118,145,241,133,142,164,35,32,185,70,237,95,0,51,232,54,138,91,178,204,214,163,89,72,58,65,222,156,222,0,14,41,218,11,120,228,112,3,186,169,74,3,52,91,8,179,100,154,212,235,105,123,225,124,11,170,44,124,11,98,220,254,66,23,159,142,100,99,191,231,49,219,190,81,17,107,38,138,75,249,80,57,142,14,229,130,29,9,242,79,58,31,47,220,143,13,101,122,178,213,34,76,28,231,75,0,95,162,90,136,6,80,118,234,147,18,163,137,249,243,111,1,2,160,231,72,136,42,128,22,61,192,114,50,116,193,210,190,130,106,193,29,10,40,33,63,78,226,150,187,8,228,193,46,125,248,185,76,218,14,95,81,201,102,30,105,240,130,36,244,151,107,232,1,108,23,55,102,9,27,153,149,131,217,248,8,32,145,153,237,168,41,92,153,172,180,24,235,28,165,177,232,6,9,123,112,255,184,45,46,242,186,82,140,78,184,241,234,35,190,193,49,174,11,139,0,95,31,60,151,53,133,195,72,25,129,32,244,147,97,182,184,130,24,237,131,70,147,112,191,190,5,172,203,57,10,136,17,253,249,80,54,177,161,77,110,36,242,211,234,205,89,217,83,131,204,43,138,243,9,62,126,101,103,96,99,236,9,180,212,253,245,44,75,240,200,5,7,117,130,177,18,79,2,93,54,22,157,96,7,221,117,199,46,206,218,2,188,157,9,48,61,66,166,89,118,254,90,196,105,170,170,56,44,36,227,124,226,198,131,19,174,57,24,17,158,179,247,124,116,11,40,82,218,204,18,222,108,198,232,128,41,107,205,139,186,120,35,195,1,232,124,234,167,16,168,109,61,100,28,68,194,88,11,175,198,248,182,253,166,74,114,201,109,167,222,220,24,75,76,119,86,166,167,166,158,48,82,224,195,120,38,97,130,43,0,170,151,218,244,154,191,181,97,3,126,223,174,150,217,50,230,55,44,197,52,22,100,137,137,253,236,107,68,47,218,153,18,190,214,36,203,65,65,131,52,123,30,133,43,148,147,84,63,112,141,50,53,225,53,249,234,61,209,225,107,59,53,151,32,123,178,49,184,234,2,49,191,72,63,24,209,70,22,31,53,207,74,69,164,107,157,216,181,134,18,40,229,26,237,24,3,8,141,126,240,17,255,160,109,168,55,164,96,106,235,231,140,250,231,234,9,201,127,247,169,105,103,202,148,211,25,231,47,202,139,226,182,169,132,161,228,92,222,152,216,31,99,159,139,134,190,112,52,129,133,25,183,170,216,183,60,139,242,69,21,63,215,104,99,108,200,146,254,246,118,191,242,20,252,238,154,183,249,12,197,249,123,217,65,211,101,143,243,250,179,120,34,225,39,113,223,184,205,122,20,75,140,210,122,15,235,100,146,110,213,253,110,39,249,126,1,157,62,128,126,8,63,118,4,47,88,234,87,160,219,48,170,9,161,175,9,154,249,20,65,208,32,240,221,167,193,160,55,203,93,224,41,149,19,95,40,50,59,231,83,143,129,220,206,42,18,215,243,147,76,95,208,125,88,8,50,252,78,200,40,14,30,64,115,138,178,147,38,248,66,52,147,21,144,29,74,118,188,249,163,180,138,30,17,204,117,208,108,232,251,123,45,73,143,137,4,186,31,107,5,233,207,249,173,148,182,120,177,4,102,63,6,107,228,223,140,254,98,200,192,253,245,108,94,241,226,242,38,195,168,63,13,210,113,199,4,56,69,79,48,225,214,6,45,126,186,201,5,105,84,228,35,142,249,23,80,90,188,233,169,2,95,84,33,95,220,195,186,136,156,108,228,223,32,69,215,39,83,170,16,28,129,85,118,206,240,160,44,175,45,245,33,164,96,224,10,182,217,223,134,46,2,12,2,178,10,89,166,121,4,71,137,97,136,249,210,77,45,96,131,236,79,197,210,156,134,205,38,231,21,49,26,146,131,206,27,120,70,92,61,200,39,171,48,16,8,155,0,220,152,114,130,151,114,153,128,4,178,137,34,137,170,142,97,232,59,190,103,105,38,13,239,110,28,36,246,189,106,25,26,87,250,111,7,77,126,212,237,143,183,42,0,216,245,83,64,44,89,174,232,169,92,184,112,192,218,80,8,65,196,212,33,36,249,98,89,247,73,1,86,98,55,51,9,27,31,37,241,32,55,182,58,78,120,240,69,235,73,41,138,114,13,220,95,252,29,10,234,52,196,76,59,199,7,39,15,189,230,93,27,90,162,40,106,89,45,197,0,223,145,204,132,71,24,106,40,164,31,100,210,237,114,85,122,147,158,83,20,149,160,76,92,62,89,102,52,146,46,77,38,224,18,174,194,78,3,5,104,84,50,124,31,201,209,205,192,215,193,183,4,74,243,242,211,91,157,53,58,53,248,243,96,71,225,39,229,1,190,105,187,201,64,43,231,72,141,32,48,129,213,255,47,54,168,109,95,182,224,124,212,196,14,6,156,164,224,182,5,113,245,110,170,36,197,230,7,27,67,57,54,195,47,189,47,136,122,26,186,168,141,71,128,251,54,38,49,207,154,61,185,219,78,177,143,131,81,126,253,187,116,197,193,63,81,102,36,20,98,84,5,44,27,67,155,98,251,52,166,224,168,53,215,125,194,19,196,235,211,55,235,90,47,47,44,160,92,164,39,39,99,70,112,96,67,4,115,30,64,169,163,121,208,241,61,190,6,84,194,76,152,93,196,231,148,109,124,185,1,239,10,32,175,119,90,174,209,232,71,151,178,134,142,198,121,60,71,251,123,106,239,27,149,9,74,57,158,135,252,47,236,121,5,144,244,163,140,16,62,10,192,184,15,247,255,238,134,170,147,85,246,48,129,116,93,63,225,190,211,195,10,4,78,221,6,57,247,135,86,54,176,12,126,49,48,205,53,35,26,114,233,236,190,92,30,188,23,185,131,197,66,209,184,127,116,79,25,125,81,114,229,110,213,32,169,251,241,64,145,130,31,42,161,105,253,1,200,46,5,80,46,68,223,178,164,183,75,234,45,114,19,75,232,57,114,157,233,245,226,213,199,180,61,36,216,96,31,72,128,193,226,95,77,108,19,12,102,157,209,67,20,148,84,44,120,240,139,123,193,7,90,183,79,223,65,185,217,171,240,125,229,4,141,80,160,215,129,112,115,207,204,19,28,172,9,1,242,245,80,244,157,144,232,76,48,254,44,234,96,30,61,154,1,98,224,6,75,238,159,106,133,177,9,36,10,215,73,103,16,162,68,11,227,11,147,146,51,163,180,103,7,249,88,68,112,115,17,218,21,131,53,186,115,87,33,22,9,36,59,21,142,36,186,172,148,219,21,65,195,227,153,211,249,123,246,189,195,145,156,124,28,252,87,87,76,12,149,124,5,163,198,162,182,202,239,1,248,32,227,111,244,146,2,99,187,152,143,75,72,120,38,82,57,199,153,224,230,2,56,106,14,216,204,178,87,107,24,248,186,16,213,243,6,5,176,248,67,188,151,134,89,166,255,218,181,35,161,147,141,143,40,244,6,140,181,160,156,9,76,197,24,103,97,216,60,222,102,198,132,40,124,57,78,217,207,255,36,191,240,245,201,177,128,39,1,103,30,199,230,73,177,248,92,177,145,228,0,199,68,33,106,83,75,75,174,207,37,86,104,192,255,27,33,59,214,164,44,113,40,100,237,94,251,130,149,140,71,201,117,110,102,163,18,6,107,220,85,155,157,40,23,147,107,206,79,221,167,33,24,168,58,226,179,18,205,136,147,35,159,116,124,129,87,19,218,151,0,94,161,139,161,222,209,192,38,3,49,118,204,78,29,48,182,251,195,134,63,173,94,131,28,187,121,19,18,179,72,68,169,77,187,166,13,132,224,78,64,137,186,135,107,79,26,213,169,155,144,88,159,235,8,113,182,175,125,135,128,110,19,229,151,59,146,6,145,35,178,37,19,69,155,81,215,47,32,227,145,114,15,144,146,254,254,130,196,84,188,10,186,144,218,252,27,205,78,68,170,187,66,49,26,176,134,214,88,130,5,134,181,183,200,240,92,175,43,204,54,190,166,32,112,253,48,62,142,131,31,14,250,148,19,55,173,179,6,16,239,77,42,75,136,38,159,57,117,151,129,211,254,240,153,19,72,81,102,153,210,215,124,246,9,186,169,219,194,26,166,96,44,77,11,90,137,20,246,150,217,117,124,212,45,231,93,219,209,227,126,37,89,187,13,85,224,39,47,196,26,229,251,70,195,230,11,58,192,130,92,149,213,254,106,151,18,15,205,11,146,208,223,21,195,136,228,199,116,233,103,137,159,47,210,87,82,163,37,21,109,157,171,244,161,136,144,209,39,226,28,90,178,41,26,57,205,23,28,240,66,148,32,248,134,140,125,94,253,4,42,119,239,197,222,211,75,145,246,213,39,32,122,8,6,122,249,88,64,244,83,222,97,80,229,48,170,51,140,133,32,159,30,1,47,229,103,112,46,209,85,8,110,125,54,159,185,125,18,51,179,226,41,57,86,219,55,61,160,171,126,223,240,156,23,179,168,174,6,104,113,80,47,144,5,224,140,14,154,205,221,252,67,92,79,111,24,185,139,5,157,53,76,64,28,140,35,226,101,235,131,245,71,79,1,184,99,251,27,40,33,195,181,53,205,181,225,94,192,183,161,247,95,17,50,92,247,220,28,168,140,124,172,43,73,52,119,211,174,94,238,117,9,223,70,163,47,237,100,19,150,111,241,235,115,27,244,110,25,198,36,217,201,233,179,148,150,41,235,217,203,172,169,239,193,85,12,116,170,114,87,15,175,121,221,113,181,121,33,182,143,79,47,171,207,114,16,12,105,135,56,212,149,219,110,37,88,138,34,193,2,140,82,128,97,119,138,7,136,202,176,108,72,170,39,241,16,241,204,138,226,255,59,115,31,22,170,22,199,5,122,193,69,106,161,49,93,106,137,104,109,104,242,251,72,233,24,28,127,80,171,209,165,1,92,137,139,156,67,75,169,30,147,227,124,6,174,88,25,187,63,114,73,34,191,97,210,132,19,141,35,13,105,11,89,145,186,36,176,142,200,101,212,251,172,171,63,134,122,111,23,109,150,145,104,166,106,14,129,210,2,123,163,133,231,109,111,197,207,252,171,21,178,4,71,140,247,115,48,52,89,195,113,4,211,225,170,184,101,205,52,217,9,200,103,216,216,226,220,202,126,74,249,235,76,181,130,15,1,227,178,36,125,38,159,42,213,10,221,113,164,55,233,156,35,137,6,156,214,231,92,231,233,51,244,182,161,177,210,137,242,218,43,200,206,136,149,135,19,254,99,145,18,140,174,139,10,33,249,69,121,42,112,175,217,32,70,165,139,90,68,60,33,60,226,118,197,215,43,91,114,125,71,16,164,206,145,98,31,98,8,234,77,10,50,30,58,155,58,17,139,87,176,205,10,132,74,125,132,28,41,36,34,116,139,34,182,102,205,140,40,201,72,140,229,126,123,97,233,69,249,34,49,147,15,86,186,147,171,185,131,206,65,133,11,112,211,2,68,12,44,117,28,135,138,71,214,175,237,81,49,221,224,106,181,17,15,134,220,96,206,70,239,197,97,3,27,85,28,207,121,200,197,79,4,154,87,23,244,116,102,198,227,43,45,10,4,62,14,131,135,145,42,91,138,230,181,4,46,59,144,121,174,171,127,230,11,161,77,72,28,225,71,203,166,11,59,14,140,104,235,5,154,20,96,208,171,178,237,94,242,3,123,137,98,182,157,107,27,159,195,123,147,73,130,246,102,118,198,155,136,218,225,99,138,90,15,222,179,32,184,64,178,25,130,155,93,131,176,180,0,91,63,195,62,243,41,214,204,134,148,108,237,218,165,206,42,127,157,129,108,183,119,214,241,3,92,198,141,229,215,167,45,49,135,56,237,105,81,75,173,111,172,203,222,82,252,135,184,40,129,149,141,151,34,233,202,32,197,3,201,139,222,159,37,94,199,96,205,132,123,5,85,173,25,188,32,199,117,68,250,22,99,178,197,42,248,48,115,131,140,96,197,67,114,234,18,81,182,34,73,71,129,41,35,136,183,241,77,155,2,106,96,39,177,187,197,200,101,23,235,68,155,151,35,96,95,174,15,148,143,119,206,37,66,22,121,43,160,38,166,152,123,149,137,56,127,249,230,205,172,9,111,97,106,37,126,107,51,20,41,128,179,44,71,47,98,43,227,145,238,26,227,123,120,204,244,61,80,118,38,167,1,148,79,144,160,186,222,110,247,167,43,57,145,126,160,241,34,198,218,135,248,211,254,4,25,186,129,76,44,209,246,41,183,81,161,24,22,16,123,139,88,87,30,223,219,74,75,29,8,184,204,82,117,237,75,78,60,184,220,57,120,90,220,211,51,212,115,228,173,228,49,247,2,47,16,223,243,166,229,225,116,203,103,123,182,94,251,1,158,70,166,120,19,65,255,188,70,160,126,159,163,51,219,233,87,22,33,12,33,181,169,95,10,49,16,102,80,126,93,69,171,103,173,149,6,241,141,187,86,215,110,212,56,79,65,29,84,0,11,48,29,206,132,173,197,190,48,32,113,2,76,19,198,15,43,3,8,34,106,9,219,31,138,20,204,31,189,215,131,190,2,97,170,150,146,75,177,99,209,95,21,48,50,243,71,216,4,75,80,39,49,238,95,15,8,47,210,186,106,74,36,71,30,112,194,186,66,174,136,160,154,6,180,71,55,188,185,114,48,118,72,137,116,14,121,12,36,13,138,71,49,17,209,246,43,193,248,23,37,14,113,60,218,107,246,224,245,245,178,239,180,211,30,116,241,214,235,184,166,144,84,246,158,97,90,48,6,23,80,195,67,129,56,42,250,220,203,202,133,197,45,133,124,46,48,164,214,195,109,60,227,139,184,140,178,38,139,66,29,52,209,183,184,100,53,62,7,206,85,10,17,223,199,117,59,22,223,146,153,89,255,235,127,79,153,14,137,126,39,222,21,150,146,77,99,81,247,45,170,92,231,49,210,209,77,242,232,106,227,5,22,180,91,61,37,223,39,229,185,117,55,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,3,176,220,86,122,213,130,231,178,229,228,171,149,9,114,39,216,125,253,223,32,75,186,187,181,60,77,40,104,249,123,39,65,224,159,165,128,173,65,103,40,189,18,57,9,82,237,67,250,165,139,249,5,28,0,138,250,92,58,198,98,19,231,20,196,56,243,224,119,176,3,3,203,155,39,135,14,22,161,140,220,244,122,66,156,233,167,142,95,63,223,81,255,95,30,28,1,200,43,253,48,77,179,168,151,241,123,248,91,254,52,184,123,88,217,90,205,118,180,5,189,6,196,167,104,153,199,13,73,66,229,207,14,248,200,50,64,105,29,6,242,130,7,89,224,196,21,144,11,43,24,10,64,110,12,240,165,196,2,29,155,154,232,34,109,249,69,170,70,155,233,140,133,64,54,172,198,171,250,220,214,211,252,235,24,183,83,187,88,144,171,19,114,139,106,210,161,152,130,132,0,248,31,79,156,35,34,181,93,133,50,161,16,191,235,96,3,21,143,21,193,190,204,9,142,215,43,9,84,137,101,161,7,236,121,83,245,166,162,113,184,209,84,193,184,6,144,70,149,215,232,42,107,125,117,38,178,88,233,36,177,126,247,171,226,85,144,204,236,225,46,220,105,219,192,3,251,137,167,97,35,246,35,245,17,141,172,32,157,35,229,175,155,60,116,235,139,137,105,103,7,100,242,154,35,73,194,218,69,195,74,96,182,86,24,234,238,116,108,16,59,46,41,125,108,95,72,46,148,162,6,83,173,169,213,243,207,229,202,233,210,78,63,10,185,178,180,28,78,125,186,37,93,93,167,111,88,213,118,159,41,117,10,102,41,38,69,22,166,152,209,151,1,217,216,58,202,195,24,190,33,41,36,19,114,39,153,32,81,24,6,13,82,102,85,79,126,75,73,184,157,34,57,228,129,134,55,187,185,77,154,50,210,115,200,32,152,29,67,59,58,151,156,143,13,68,68,50,209,57,155,48,157,76,106,33,251,143,54,145,43,156,80,116,54,222,33,27,165,214,159,190,247,68,197,99,118,133,41,29,167,72,139,58,87,224,110,195,100,229,118,167,226,192,249,125,41,122,36,35,108,237,9,232,101,80,59,36,170,114,104,40,153,17,63,110,224,200,167,115,2,251,123,249,243,123,31,226,76,189,63,37,18,203,92,242,220,210,93,114,117,196,150,121,63,227,225,104,34,179,38,58,96,37,236,19,215,182,229,150,127,247,71,19,58,162,185,49,238,169,193,46,201,174,66,10,4,94,144,251,24,91,159,110,110,14,69,8,137,16,230,111,84,23,45,28,66,53,50,18,135,61,214,158,27,45,28,251,197,205,208,194,9,25,45,193,10,205,132,200,92,6,195,244,204,218,114,3,100,62,194,194,203,186,69,247,6,145,72,36,132,177,51,46,101,78,3,176,130,30,0,140,185,163,12,151,84,173,227,44,33,181,239,212,27,220,48,179,176,110,68,244,231,49,44,218,151,12,69,191,219,35,204,244,43,182,32,25,209,60,120,37,75,246,130,144,195,206,35,37,161,13,198,178,39,246,95,127,227,17,91,25,81,52,49,189,151,90,160,205,206,26,98,4,81,140,127,210,132,8,195,48,174,120,191,19,172,191,158,123,96,155,101,246,121,20,2,136,11,85,89,136,66,56,152,45,169,245,199,32,155,167,175,183,151,0,98,202,149,162,225,239,202,154,102,209,125,82,186,23,218,64,4,34,118,11,146,23,112,179,133,5,44,129,60,182,41,117,91,2,217,93,233,157,249,103,199,217,187,221,146,113,149,21,222,173,164,189,172,42,39,44,161,34,99,253,67,27,230,121,82,70,133,42,48,18,158,49,168,233,157,176,198,207,189,168,202,8,170,154,231,47,225,49,129,132,255,48,24,164,112,230,87,115,238,88,238,218,87,79,251,61,103,220,149,35,182,135,75,74,224,129,65,48,33,215,128,129,136,188,200,139,13,232,93,130,251,51,17,119,130,152,166,14,214,247,67,230,40,75,8,135,158,199,204,22,223,79,56,45,41,93,168,79,86,55,45,150,164,2,65,192,115,132,141,229,31,196,205,113,181,43,173,55,139,178,50,39,141,167,33,27,207,129,76,140,137,48,84,54,165,161,159,29,194,252,74,147,100,187,35,213,142,247,33,51,111,166,97,13,117,32,166,111,113,193,207,157,209,206,7,176,89,51,214,193,87,95,165,184,185,133,146,51,100,218,181,230,28,251,251,12,219,167,137,130,64,144,176,251,159,91,11,47,70,193,196,33,74,86,185,199,45,255,139,234,33,194,186,99,130,223,237,1,132,37,126,220,232,197,170,91,184,239,206,171,189,147,112,47,83,14,139,12,108,37,39,131,41,184,131,23,241,130,170,21,59,142,113,122,87,151,186,29,134,117,209,33,177,26,184,0,168,4,230,197,197,86,84,245,57,15,76,237,221,155,83,21,59,142,113,122,87,151,186,29,134,117,209,33,177,26,184,0,168,4,230,197,197,86,84,245,57,15,76,237,221,155,83,47,138,180,146,79,202,71,155,211,146,224,154,3,243,216,235,34,39,139,59,253,249,12,27,159,18,134,244,106,85,28,85,39,139,119,48,66,59,155,174,221,203,181,185,112,241,247,115,38,236,180,110,58,165,158,153,224,118,176,71,234,62,203,105,6,117,62,82,79,211,72,176,8,195,20,119,248,197,48,167,90,173,131,53,26,233,94,29,101,22,62,249,162,177,70,73,20,66,119,146,93,235,120,4,242,86,87,142,156,9,148,251,38,142,70,142,189,60,142,230,151,30,156,1,22,155,133,5,45,127,146,18,224,9,33,205,5,60,148,147,254,65,241,71,194,174,227,118,28,106,80,153,89,53,121,227,182,115,4,8,18,176,209,246,236,133,111,9,86,89,218,158,44,148,66,228,218,234,91,21,236,62,144,90,12,30,130,182,30,157,67,242,15,25,168,84,22,219,250,16,169,182,122,238,216,190,111,101,142,239,212,144,210,130,30,193,26,253,112,36,240,120,75,99,21,231,74,241,232,176,12,233,93,61,202,156,43,126,91,176,107,255,205,130,151,106,227,45,180,54,236,187,127,53,78,128,10,38,33,158,170,10,195,230,18,64,79,226,9,196,39,162,62,9,177,205,128,236,55,200,241,214,18,14,146,17,125,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,32,157,98,233,17,64,174,188,223,11,13,45,211,32,212,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,115,84,159,67,180,70,9,126,173,111,104,83,24,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,32,160,107,6,239,47,51,207,56,44,6,192,158,160,85,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,214,77,161,33,49,48,74,15,238,234,159,89,125,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,230,23,6,237,214,125,168,158,124,57,17,219,238,190,123,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,71,215,148,94,47,155,93,92,80,161,42,93,217,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,38,6,156,47,173,115,2,137,226,25,131,222,80,191,173,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,176,164,203,61,89,69,79,87,239,8,172,8,27,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,237,234,103,207,86,26,102,126,80,42,140,150,176,128,222,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,157,109,60,229,9,225,10,38,200,150,186,181,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,1,98,250,33,247,212,60,24,68,220,138,217,121,149,5,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,158,63,187,245,48,233,120,227,183,39,103,128,129,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,200,45,66,175,253,227,194,236,160,14,206,227,173,181,79,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,80,152,154,61,140,104,193,157,126,163,219,38,30,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,128,82,19,154,217,96,209,37,137,249,108,24,26,163,237,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,128,174,231,9,156,245,245,52,13,98,180,114,70,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,21,64,69,176,65,23,194,87,30,178,168,6,105,161,130,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,20,4,14,111,26,52,164,173,254,18,142,84,135,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,5,223,85,87,104,16,45,32,227,49,50,87,53,50,101,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,100,54,125,62,6,219,155,143,88,150,23,3,116,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,140,187,220,118,57,176,81,186,23,31,14,98,226,57,60,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,71,6,251,245,132,46,218,184,248,160,212,87,8,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,246,194,51,12,165,191,255,36,208,218,229,228,238,195,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,226,203,45,2,215,194,122,55,90,160,78,22,198,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,46,65,236,249,205,3,27,193,62,59,110,184,138,2,109,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,29,234,227,116,24,38,60,157,17,8,219,25,177,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,213,32,47,179,236,129,6,89,75,230,105,4,212,179,97,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,223,121,211,115,234,83,122,134,201,200,228,29,70,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,11,5,159,59,112,189,15,74,173,98,87,59,208,10,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,26,141,164,135,250,107,41,173,10,18,180,113,80,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,159,25,65,239,235,240,249,206,166,7,253,235,141,210,163,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,79,75,164,76,14,35,59,49,159,241,25,127,164,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,68,226,126,53,118,250,229,213,100,161,56,20,34,99,144,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,101,189,222,250,191,22,137,74,82,5,126,188,80,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,117,182,194,121,242,81,190,14,186,224,53,61,119,208,190,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,182,121,138,151,174,155,73,162,100,115,187,146,236,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,135,91,130,220,19,149,222,148,225,129,244,110,164,246,120,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,145,253,254,42,27,40,137,59,99,101,122,97,255,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,188,173,90,138,105,200,28,162,148,94,59,162,111,249,110,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,31,198,117,102,219,118,44,40,46,73,100,22,102,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,158,30,7,123,80,181,4,14,103,171,111,223,96,126,109,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,121,195,123,136,21,71,97,99,6,119,129,97,145,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,248,152,215,135,204,198,145,59,143,189,47,7,53,98,231,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,143,220,75,214,98,19,118,68,210,0,70,218,27,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,161,246,232,178,161,30,164,161,238,211,32,2,210,197,255,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,48,111,47,37,160,110,125,114,171,123,220,20,180,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,77,27,120,243,28,155,82,228,175,102,124,157,189,228,155,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,158,110,198,127,137,231,42,164,114,165,80,128,124,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,43,108,102,70,118,56,105,233,255,25,81,79,67,76,49,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,72,209,92,64,84,145,32,243,232,201,74,168,47,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,180,103,131,174,177,103,96,189,202,114,203,66,154,129,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,231,246,68,191,86,156,23,100,70,200,248,208,119,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,221,145,156,222,145,133,50,128,66,166,161,147,79,167,113,40,155,142,247,133,9,192,254,172,189,202,66,74,121,168,5,33,243,98,70,123,0,13,21,8,96,101,23,106,13,107,0,135,49,228,62,56,117,203,209,202,188,64,22,183,149,21,23,40,126,212,105,67,174,151,96,2,61,244,33,203,2,177,69,101,250,229,241,243,154,96,199,159,204,34,164,182,189,49,216,18,103,82,130,106,113,111,215,44,150,233,202,5,89,141,177,198,239,247,35,19,172,4,248,18,202,222,134,233,148,94,211,21,233,199,246,203,5,92,65,178,72,121,247,43,186,59,203,89,78,55,159,131,74,108,158,97,255,27,14,208,153,179,28,25,13,15,174,104,176,128,190,25,193,254,223,122,4,192,245,166,64,161,146,150,157,234,79,26,218,192,51,16,106,57,254,19,139,223,44,42,52,246,192,242,178,182,71,102,206,57,61,28,36,234,240,85,249,226,75,221,137,58,136,223,187,18,56,38,17,214,21,138,253,229,86,65,80,58,23,181,48,226,106,194,203,29,202,191,199,1,81,156,241,111,107,72,19,88,137,36,42,84,177,168,171,186,96,3,30,240,22,58,51,254,58,103,71,21,41,3,183,239,120,125,42,49,233,132,18,94,33,41,160,83,87,207,78,52,98,92,82,179,132,54,11,43,95,110,84,101,46,218,51,84,37,29,26,113,32,194,113,231,9,10,138,157,129,74,241,236,142,193,128,3,187,149,30,188,184,176,165,10,219,58,222,180,189,86,188,8,150,164,37,103,199,33,23,183,209,16,152,48,237,97,176,7,177,232,44,221,200,47,73,19,39,208,154,2,139,144,23,24,124,17,97,62,86,8,14,135,49,214,73,117,155,141,40,142,14,44,43,72,115,66,30,126,58,222,213,141,65,192,222,20,212,134,42,251,250,41,94,174,201,111,16,130,50,4,179,178,213,34,227,202,5,171,27,96,76,183,83,16,209,176,204,115,215,217,161,237,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,112,250,13,100,94,18,110,215,213,89,203,14,27,238,210,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,31,206,9,6,182,133,54,194,131,146,7,44,153,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,18,144,44,106,18,8,113,137,191,210,70,224,126,6,15,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,115,37,79,221,19,92,147,147,149,9,99,45,93,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,144,217,137,191,179,234,196,109,142,239,103,195,137,11,136,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,84,21,97,15,125,81,65,105,1,115,9,234,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,42,218,199,172,49,221,118,78,247,247,21,227,35,46,214,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,74,54,130,160,16,6,79,18,193,53,113,10,80,27
]),
};

export const transferCircuit = {"program":{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":7417859333460861000,"abi":{"parameters":[{"name":"_s","type":{"kind":"struct","path":"Sender","fields":[{"name":"priv_key","type":{"kind":"field"}},{"name":"bal","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amt","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"rnd","type":{"kind":"field"}}]},"visibility":"private"},{"name":"s_pub_key","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},"visibility":"public"},{"name":"s_bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]},"visibility":"public"},{"name":"r","type":{"kind":"struct","path":"Recipient","fields":[{"name":"pub_key","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]}}]},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]},{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","file_map":{"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            unsafe {\n                //@safety: already unconstrained\n                field_less_than(b, a)\n            },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"62":{"source":"use elgamal::{add_ciphertexts, decrypt, embed_message, encrypt, field_to_point, public_key};\nuse std::embedded_curve_ops::EmbeddedCurvePoint;\n\ntype CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\npub struct Sender {\n    priv_key: Field,\n    bal: u32,\n    amt: u32,\n    rnd: Field,\n}\n\npub struct Recipient {\n    pub_key: EmbeddedCurvePoint,\n    bal_ct: CipherText,\n}\n\nfn main(\n    _s: Sender,\n    s_pub_key: pub EmbeddedCurvePoint,\n    s_bal_ct: pub CipherText,\n    r: pub Recipient,\n) -> pub (CipherText, CipherText) {\n    // Check balance is sufficient\n    assert(_s.bal >= _s.amt);\n    let bal_pt = embed_message(_s.bal as Field);\n\n    // Set up keys\n    let pub_key = public_key(_s.priv_key);\n\n    assert((s_pub_key.x == pub_key.x) & (s_pub_key.y == pub_key.y));\n\n    // check balance matches the ciphertext\n    let balance_pt = decrypt(s_bal_ct, _s.priv_key);\n    assert((balance_pt.x == bal_pt.x) & (balance_pt.y == bal_pt.y));\n\n    // remove amount from balance\n    let sender_balance = encrypt(pub_key, (_s.bal - _s.amt) as Field, _s.rnd);\n\n    let rec_amt = encrypt(r.pub_key, (_s.amt) as Field, _s.rnd);\n    let new_rec_bal_ct = add_ciphertexts(rec_amt, r.bal_ct);\n\n    (sender_balance, new_rec_bal_ct)\n}\n\n#[test]\nfn test_main() {\n    let s = Sender {\n        priv_key: 0x04d73359c9166e49aafaf9a4852eaa4dceb2c26878196b10e9048004ff5cc20c,\n        bal: 0xffff,\n        amt: 0x1234,\n        rnd: 0x030cffca80ca4344e54e436fc5a03ae8e884b8f3edcb780702599e1951e8aa62,\n    };\n    let s_pub_key = public_key(s.priv_key);\n    let sender_bal_ct = encrypt(s_pub_key, s.bal as Field, s.rnd);\n\n    let _r_priv_key = 0x208196b10e9048004ff5cc204d73359c9166e49aafaf9a4852eaa4dceb2c2687;\n    let _r_bal: u32 = 0x1000;\n    let r_pub_key = public_key(_r_priv_key);\n    let r = Recipient { pub_key: r_pub_key, bal_ct: encrypt(r_pub_key, _r_bal as Field, s.rnd) };\n\n    let (s_bal, r_bal) = main(s, s_pub_key, sender_bal_ct, r);\n\n    let s_expected_bal = field_to_point((s.bal - s.amt) as Field);\n    let s_updated_bal = decrypt(s_bal, s.priv_key);\n\n    assert(s_expected_bal.x == s_updated_bal.x);\n    assert(s_expected_bal.y == s_updated_bal.y);\n\n    let r_expected_bal = field_to_point((_r_bal + s.amt) as Field);\n    let r_updated_bal = decrypt(r_bal, _r_priv_key);\n\n    assert(r_expected_bal.x == r_updated_bal.x);\n    assert(r_expected_bal.y == r_updated_bal.y);\n}\n","path":"/Users/shramee/www/starknet/confidential-erc20/circuits/transfer/src/main.nr"},"63":{"source":"// ElGamal Cryptosystem Implementation\n//\n// This library implements the elliptic curve variant of the ElGamal cryptosystem as described\n// in the accompanying documentation. It provides functions for key generation, message embedding,\n// encryption and decryption with the following features:\n//\n// - Curve-agnostic implementation: No elliptic curve parameters are hardcoded in this library\n// - Works with any curve supported by the underlying proving system\n// - Preserves the additive homomorphic property described in Section 2.4\n// - Implements the message embedding approach from Section 2.5\n//\n// The implementation follows the mathematical formulation in the documentation with\n// function signatures designed to be simple and composable.\n\npub mod tests;\n\nuse std::embedded_curve_ops::{\n    embedded_curve_add, EmbeddedCurvePoint, EmbeddedCurveScalar, fixed_base_scalar_mul,\n    multi_scalar_mul,\n};\n\n// #region utils\n\npub type CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\n/// Field to point, x . G\npub fn field_to_point(x: Field) -> EmbeddedCurvePoint {\n    fixed_base_scalar_mul(EmbeddedCurveScalar::from_field(x))\n}\n\n// #endregion utils\n\n/// Implements key generation as in Section 2.1\n/// Computes H = x . G (Equation 2.1)\npub fn public_key(priv_key: Field) -> EmbeddedCurvePoint {\n    field_to_point(priv_key)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt(pub_key: EmbeddedCurvePoint, message: Field, randomness: Field) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    encrypt_pt(pub_key, field_to_point(message), randomness)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt_pt(\n    pub_key: EmbeddedCurvePoint,\n    embedded_message: EmbeddedCurvePoint,\n    randomness: Field,\n) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    let c1 = field_to_point(randomness);\n    let c2 = embedded_curve_add(\n        embedded_message,\n        multi_scalar_mul([pub_key], [EmbeddedCurveScalar::from_field(randomness)]),\n    );\n    (c1, c2)\n}\n\n/// Decryption as per Section 2.3\n/// Computes C_2 - x . C_1 = P_m\npub fn decrypt(ct: CipherText, priv_key: Field) -> EmbeddedCurvePoint {\n    let x = EmbeddedCurveScalar::from_field(priv_key);\n    let diff = multi_scalar_mul([ct.0], [x]);\n    embedded_curve_add(ct.1, -diff)\n}\n\n/// Additively homomorphic property as in Section 2.4\n/// Computes (A_1 + B_1, A_2 + B_2)\npub fn add_ciphertexts(a: CipherText, b: CipherText) -> CipherText {\n    (embedded_curve_add(a.0, b.0), embedded_curve_add(a.1, b.1))\n}\n\n/// Message embedding function f(m) = m . G from Section 2.5\n/// Fails if message is over 40 bits\npub fn embed_message(m: Field) -> EmbeddedCurvePoint {\n    m.assert_max_bit_size::<40>();\n    field_to_point(m)\n}\n\n/// Verifies that a point is the correct embedding of a message\n/// Implements the verification function from Section 2.5\npub fn verify_embedding(embedding: EmbeddedCurvePoint, m: Field) {\n    assert(embedding == field_to_point(m));\n}\n","path":"elgamal/lib.nr"}},"names":["main"],"brillig_names":["decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]},"warnings":[]};