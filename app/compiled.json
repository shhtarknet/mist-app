{"program":{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":17557289435610927000,"abi":{"parameters":[{"name":"_s","type":{"kind":"struct","path":"Sender","fields":[{"name":"priv_key","type":{"kind":"field"}},{"name":"bal","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amt","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"rnd","type":{"kind":"field"}}]},"visibility":"private"},{"name":"s_pub_key","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},"visibility":"public"},{"name":"s_bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]},"visibility":"public"},{"name":"r","type":{"kind":"struct","path":"Recipient","fields":[{"name":"pub_key","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"bal_ct","type":{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]}}]},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]},{"kind":"tuple","fields":[{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}]}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3dbts4EIXfxde54AzJmWFfZbEo0jQtDARJkaQLLIq++8rZiHZlmVpXXGooqhdFnJD0d45+OEON6R+7z/efvn/9uH/88vSy+/DHj93D093t6/7psXv1Yydvv3r5dvt4ePXyevv8uvvg2d7s7h8/dz9J+Hmz+7J/uN99IPz5580uXNsBzNU94OoeONaDTHjvQfaXHjdnTTHEthiQjo3tSGMAA++NAaxPN0bn4shOODYGHmsMzvWNgeDYWN5U2pWoROgPJaKlU5U3qcMejvIgvBni1mKIj41RcIYhfiWGWO5HRht4eB3QSlR6g31j7yB92MGL7zHI2KElvFkytERatIRtxGDvZtxJwube77uHpkn3oiPAYca0jrC5N8O9srGw4XB0b6Kxc9Ab4rp/afcsE783tgL2tPFB5XgsHGHYYFolWDA9uLVOZ8SPbiUqc0X86NdiSKaIH2klhiQjfuSVqMwX3qJslgwtCS1akitmtWZzb4Z70KR7mWJWi5t7M9wrGwsvFPFbtxKVEvqzz4Zzlb4JldSESm5CpTShMrSg0pkmVEITKrEJlaOxDwP1KhlOVR56uKt7jM7J4np3hE3aSXRoYgzpQtqcdBTkqChL2ntWxCKKWIIeFm8UsYAiFlTEYhWxOEUs8++73h9z94lJyUPon8T47qnMkIUUsbAiFlHEEoqyoKPIQjRgIaOIBRSxoCIWW5SF4hMuzzAR9DLZGI+SDG+M5GoF97WCl739C0Rw8TgLnBWDBz7mXDAEl1rBC0f/zsZs0fOAhY0ilvmzkBxZZOKxDXgfFy/8OQsqObkOLFYRi1PEMj5XSH+KBSs/f12nYbq6x+jdsXs8GNeyzOnC17995Df6hPE+x+eQxtu0s0Dx4gIipZ9QEbManbkq1gTWY0mmmjXB1ViSrFoTuxqd+Yq0xG2mnJvi2zQlV/WV0ObfLP+4Uf8yVWCJbP7N8q90fLxQDVswq9GZfHIToBGd2IhO24hO14hO34hOakQnN6JTGtGZIx7Co06eWLlHA33UgsbZxYLP9PY3xrTpSrbtcgw0amCu7XUMtmlgejseY9t0JeNeNcZtFs610G8WltseyNDmdkG3eXO72GIkGNncLui26lxnoYViANW5zkJpMYDqBGYxV1RnJYu5ojorWcwVt7ky4orq3GExV1TH+Iu5ojoWX8wV1THzYq6Ujm0hsiNMlV9PRKBoNLOnfUeomB0rZrcVs7uK2X3F7FQxO1fMLhWzF18z8hLZw0S0kf6QOlhTMTtUzI4Vs1vN7MkP2YN1FbP7itmpYnbWzJ5vWwGw0opQ1TN2vv0WwKme3vNtcwBOdSyQU6juhDy15wI43Ql5mt2pZieM7Hw2gbkVFdinD9KKKuzTQldUYp8+dTWHJASmz5MISM7YNUcZE+xec+BAEPraS8Lzi8NrjgWm2C9M7+zi5Qch54W91McnvF2N0GyfiPBuPZ5k+w5hvxpP0p9b8LQaoRnr6D1vroy4Im26kq2E3YfNwFkGkmnUwFyF5gSbgfMMLB0pL1V8T3Y1QtPP0cm1ItS3IpRaEcqtCJVWhIZGhLJpRSi0IjRHZLRQnTdbzewTvruK2X3F7FQxO1fMLhWzh3rZxVTMDhWzl55XM9bsiq2Y3VXM7itmJ83s6Zpd4YrZpWL2UC97MJrZM5Y/B2hFqOoZO2Odd1A9vWcsfw6qY4GcQnUn5Mnq1KA7IU+z607Ik8WyYUWL8+mDtKLF+ZRQNCtanE+dumg0hyTpWmk0mqOMKXbNgUO6VhqNq5h9fHqHmKBAt8yXZkfyscCaTmpsfyPVxwsb6C6Gw7pwRBdOKIyTTJvxwuagi+GALhzUhWML4+TL5vHCbpF1sJe+3+dbXEAg1eypNBqBK2YXNexvOEEVDhpdOMUTGCVbTibzV8TNlRFXbKOuJJcAsPD0PpEZo9eFQ6Vxkvkrsi6cHFOlRByGeRkaBlU41ujCAV04qAvH6sJxhXHS+av1unBIFw7rwhFdOEEVjit9V864nOGgYnasmL305JBxGcm5itl9xeykmj25BOa4YnZRw/6GE1TheKMLp+L6A19x/YHXXX+QZi88oU3heF04VBonuULkWQ9O9+LT8/7hYf/148PT3e3r/unx5dDVHP679I1ecNy98GT7ltF9UzgemFPM972j5P8dPswf3vaXM7swGP7S10BdNTzGYMkOh4f5w0u/es5ne7xdehqSa3g7e3jB/nIQNzy0l76S6Krh+2tCPA2H9/OH5/7Qyrk5lHH4MDjvuxeQuHYhbpDU/Sj/7ZQGFzeAA6I0WDcqH1ubcPIWoYPrXv11+7y//fRwf7jNHP74/fGuv+t0L1///tb/pb8vfXt+urv//P35/nCHOrk5HWCtubH+qPnwK5Qba7t36t7tHw==","file_map":{"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"62":{"source":"use elgamal::{add_ciphertexts, decrypt, embed_message, encrypt, field_to_point, public_key};\nuse std::embedded_curve_ops::EmbeddedCurvePoint;\n\ntype CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\npub struct Sender {\n    priv_key: Field,\n    bal: u32,\n    amt: u32,\n    rnd: Field,\n}\n\npub struct Recipient {\n    pub_key: EmbeddedCurvePoint,\n    bal_ct: CipherText,\n}\n\nfn main(\n    _s: Sender,\n    s_pub_key: pub EmbeddedCurvePoint,\n    s_bal_ct: pub CipherText,\n    r: pub Recipient,\n) -> pub (CipherText, CipherText) {\n    // Check balance is sufficient\n    assert(_s.bal >= _s.amt);\n    let bal_pt = embed_message(_s.bal as Field);\n\n    // Set up keys\n    let pub_key = public_key(_s.priv_key);\n\n    assert((s_pub_key.x == pub_key.x) & (s_pub_key.y == pub_key.y));\n\n    // check balance matches the ciphertext\n    let balance_pt = decrypt(s_bal_ct, _s.priv_key);\n    assert((balance_pt.x == bal_pt.x) & (balance_pt.y == bal_pt.y));\n\n    // remove amount from balance\n    let sender_balance = encrypt(pub_key, (_s.bal - _s.amt) as Field, _s.rnd);\n\n    let rec_amt = encrypt(r.pub_key, (_s.amt) as Field, _s.rnd);\n    let new_rec_bal_ct = add_ciphertexts(rec_amt, r.bal_ct);\n\n    (sender_balance, new_rec_bal_ct)\n}\n\n#[test]\nfn test_main() {\n    let s = Sender {\n        priv_key: 0x04d73359c9166e49aafaf9a4852eaa4dceb2c26878196b10e9048004ff5cc20c,\n        bal: 0xffff,\n        amt: 0x1234,\n        rnd: 0x030cffca80ca4344e54e436fc5a03ae8e884b8f3edcb780702599e1951e8aa62,\n    };\n    let s_pub_key = public_key(s.priv_key);\n    let sender_bal_ct = encrypt(s_pub_key, s.bal as Field, s.rnd);\n\n    let _r_priv_key = 0x208196b10e9048004ff5cc204d73359c9166e49aafaf9a4852eaa4dceb2c2687;\n    let _r_bal: u32 = 0x1000;\n    let r_pub_key = public_key(_r_priv_key);\n    let r = Recipient { pub_key: r_pub_key, bal_ct: encrypt(r_pub_key, _r_bal as Field, s.rnd) };\n\n    let (s_bal, r_bal) = main(s, s_pub_key, sender_bal_ct, r);\n\n    let s_expected_bal = field_to_point((s.bal - s.amt) as Field);\n    let s_updated_bal = decrypt(s_bal, s.priv_key);\n\n    assert(s_expected_bal.x == s_updated_bal.x);\n    assert(s_expected_bal.y == s_updated_bal.y);\n\n    let r_expected_bal = field_to_point((_r_bal + s.amt) as Field);\n    let r_updated_bal = decrypt(r_bal, _r_priv_key);\n\n    assert(r_expected_bal.x == r_updated_bal.x);\n    assert(r_expected_bal.y == r_updated_bal.y);\n}\n","path":"/Users/shramee/www/starknet/confidential-erc20/circuits/transfer/src/main.nr"},"63":{"source":"// ElGamal Cryptosystem Implementation\n//\n// This library implements the elliptic curve variant of the ElGamal cryptosystem as described\n// in the accompanying documentation. It provides functions for key generation, message embedding,\n// encryption and decryption with the following features:\n//\n// - Curve-agnostic implementation: No elliptic curve parameters are hardcoded in this library\n// - Works with any curve supported by the underlying proving system\n// - Preserves the additive homomorphic property described in Section 2.4\n// - Implements the message embedding approach from Section 2.5\n//\n// The implementation follows the mathematical formulation in the documentation with\n// function signatures designed to be simple and composable.\n\npub mod tests;\n\nuse std::embedded_curve_ops::{\n    embedded_curve_add, EmbeddedCurvePoint, EmbeddedCurveScalar, fixed_base_scalar_mul,\n    multi_scalar_mul,\n};\n\n// #region utils\n\npub type CipherText = (EmbeddedCurvePoint, EmbeddedCurvePoint);\n\n/// Field to point, x . G\npub fn field_to_point(x: Field) -> EmbeddedCurvePoint {\n    fixed_base_scalar_mul(EmbeddedCurveScalar::from_field(x))\n}\n\n// #endregion utils\n\n/// Implements key generation as in Section 2.1\n/// Computes H = x . G (Equation 2.1)\npub fn public_key(priv_key: Field) -> EmbeddedCurvePoint {\n    field_to_point(priv_key)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt(pub_key: EmbeddedCurvePoint, message: Field, randomness: Field) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    encrypt_pt(pub_key, field_to_point(message), randomness)\n}\n\n/// Encryption as defined in Section 2.2\n/// Computes (C_1, C_2) = (r . G, r . H + P_m)`$ (Equation 2.2)\npub fn encrypt_pt(\n    pub_key: EmbeddedCurvePoint,\n    embedded_message: EmbeddedCurvePoint,\n    randomness: Field,\n) -> CipherText {\n    // @Optimise: Use multi_scalar_mul instead of separate fixed_base_scalar_mul\n    let c1 = field_to_point(randomness);\n    let c2 = embedded_curve_add(\n        embedded_message,\n        multi_scalar_mul([pub_key], [EmbeddedCurveScalar::from_field(randomness)]),\n    );\n    (c1, c2)\n}\n\n/// Decryption as per Section 2.3\n/// Computes C_2 - x . C_1 = P_m\npub fn decrypt(ct: CipherText, priv_key: Field) -> EmbeddedCurvePoint {\n    let x = EmbeddedCurveScalar::from_field(priv_key);\n    let diff = multi_scalar_mul([ct.0], [x]);\n    embedded_curve_add(ct.1, -diff)\n}\n\n/// Additively homomorphic property as in Section 2.4\n/// Computes (A_1 + B_1, A_2 + B_2)\npub fn add_ciphertexts(a: CipherText, b: CipherText) -> CipherText {\n    (embedded_curve_add(a.0, b.0), embedded_curve_add(a.1, b.1))\n}\n\n/// Message embedding function f(m) = m . G from Section 2.5\n/// Fails if message is over 40 bits\npub fn embed_message(m: Field) -> EmbeddedCurvePoint {\n    m.assert_max_bit_size::<40>();\n    field_to_point(m)\n}\n\n/// Verifies that a point is the correct embedding of a message\n/// Implements the verification function from Section 2.5\npub fn verify_embedding(embedding: EmbeddedCurvePoint, m: Field) {\n    assert(embedding == field_to_point(m));\n}\n","path":"elgamal/lib.nr"}},"names":["main"],"brillig_names":["decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]},"warnings":[]}